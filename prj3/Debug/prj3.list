
prj3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004504  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080046b4  080046b4  000146b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004760  08004760  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004760  08004760  00014760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004768  08004768  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004768  08004768  00014768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800476c  0800476c  0001476c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000499c  20000010  08004780  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200049ac  08004780  000249ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104e6  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002154  00000000  00000000  00030526  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b70  00000000  00000000  00032680  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a78  00000000  00000000  000331f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000238b  00000000  00000000  00033c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a3a4  00000000  00000000  00035ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d71c8  00000000  00000000  00040397  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011755f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002df8  00000000  00000000  001175dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800469c 	.word	0x0800469c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	0800469c 	.word	0x0800469c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 f9b8 	bl	8000868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f830 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f88e 	bl	800061c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000500:	f001 f8f8 	bl	80016f4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 8000504:	4a0d      	ldr	r2, [pc, #52]	; (800053c <main+0x4c>)
 8000506:	2102      	movs	r1, #2
 8000508:	2010      	movs	r0, #16
 800050a:	f001 fa31 	bl	8001970 <osMessageQueueNew>
 800050e:	4602      	mov	r2, r0
 8000510:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <main+0x50>)
 8000512:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000514:	4a0b      	ldr	r2, [pc, #44]	; (8000544 <main+0x54>)
 8000516:	2100      	movs	r1, #0
 8000518:	480b      	ldr	r0, [pc, #44]	; (8000548 <main+0x58>)
 800051a:	f001 f955 	bl	80017c8 <osThreadNew>
 800051e:	4602      	mov	r2, r0
 8000520:	4b0a      	ldr	r3, [pc, #40]	; (800054c <main+0x5c>)
 8000522:	601a      	str	r2, [r3, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000524:	4a0a      	ldr	r2, [pc, #40]	; (8000550 <main+0x60>)
 8000526:	2100      	movs	r1, #0
 8000528:	480a      	ldr	r0, [pc, #40]	; (8000554 <main+0x64>)
 800052a:	f001 f94d 	bl	80017c8 <osThreadNew>
 800052e:	4602      	mov	r2, r0
 8000530:	4b09      	ldr	r3, [pc, #36]	; (8000558 <main+0x68>)
 8000532:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000534:	f001 f912 	bl	800175c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000538:	e7fe      	b.n	8000538 <main+0x48>
 800053a:	bf00      	nop
 800053c:	08004738 	.word	0x08004738
 8000540:	20004960 	.word	0x20004960
 8000544:	080046f0 	.word	0x080046f0
 8000548:	08000685 	.word	0x08000685
 800054c:	20004934 	.word	0x20004934
 8000550:	08004714 	.word	0x08004714
 8000554:	080006d9 	.word	0x080006d9
 8000558:	2000495c 	.word	0x2000495c

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	; 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0320 	add.w	r3, r7, #32
 8000566:	2230      	movs	r2, #48	; 0x30
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f004 f88d 	bl	800468a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	4b23      	ldr	r3, [pc, #140]	; (8000614 <SystemClock_Config+0xb8>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	4a22      	ldr	r2, [pc, #136]	; (8000614 <SystemClock_Config+0xb8>)
 800058a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058e:	6413      	str	r3, [r2, #64]	; 0x40
 8000590:	4b20      	ldr	r3, [pc, #128]	; (8000614 <SystemClock_Config+0xb8>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	4b1d      	ldr	r3, [pc, #116]	; (8000618 <SystemClock_Config+0xbc>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005a8:	4a1b      	ldr	r2, [pc, #108]	; (8000618 <SystemClock_Config+0xbc>)
 80005aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b19      	ldr	r3, [pc, #100]	; (8000618 <SystemClock_Config+0xbc>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005bc:	2302      	movs	r3, #2
 80005be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c4:	2310      	movs	r3, #16
 80005c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c8:	2300      	movs	r3, #0
 80005ca:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005cc:	f107 0320 	add.w	r3, r7, #32
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 fc7f 	bl	8000ed4 <HAL_RCC_OscConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005dc:	f000 f8a8 	bl	8000730 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e0:	230f      	movs	r3, #15
 80005e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005e4:	2300      	movs	r3, #0
 80005e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 feda 	bl	80013b4 <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000606:	f000 f893 	bl	8000730 <Error_Handler>
  }
}
 800060a:	bf00      	nop
 800060c:	3750      	adds	r7, #80	; 0x50
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000

0800061c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_GPIO_Init+0x60>)
 8000636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000638:	4a10      	ldr	r2, [pc, #64]	; (800067c <MX_GPIO_Init+0x60>)
 800063a:	f043 0302 	orr.w	r3, r3, #2
 800063e:	6313      	str	r3, [r2, #48]	; 0x30
 8000640:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_GPIO_Init+0x60>)
 8000642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000644:	f003 0302 	and.w	r3, r3, #2
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000652:	480b      	ldr	r0, [pc, #44]	; (8000680 <MX_GPIO_Init+0x64>)
 8000654:	f000 fc0a 	bl	8000e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 8000658:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800065c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065e:	2301      	movs	r3, #1
 8000660:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	4619      	mov	r1, r3
 800066e:	4804      	ldr	r0, [pc, #16]	; (8000680 <MX_GPIO_Init+0x64>)
 8000670:	f000 fa52 	bl	8000b18 <HAL_GPIO_Init>

}
 8000674:	bf00      	nop
 8000676:	3718      	adds	r7, #24
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40023800 	.word	0x40023800
 8000680:	40020400 	.word	0x40020400

08000684 <StartDefaultTask>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void StartDefaultTask(void *argument)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	msg.Buf[0] = 0x7;
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <StartDefaultTask+0x48>)
 800068e:	2207      	movs	r2, #7
 8000690:	701a      	strb	r2, [r3, #0]
	msg.Idx = 0;
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <StartDefaultTask+0x48>)
 8000694:	2200      	movs	r2, #0
 8000696:	f883 2020 	strb.w	r2, [r3, #32]
	osMessageQueuePut(myQueue01Handle, &msg, 0, NULL);
 800069a:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <StartDefaultTask+0x4c>)
 800069c:	6818      	ldr	r0, [r3, #0]
 800069e:	2300      	movs	r3, #0
 80006a0:	2200      	movs	r2, #0
 80006a2:	490a      	ldr	r1, [pc, #40]	; (80006cc <StartDefaultTask+0x48>)
 80006a4:	f001 f9ea 	bl	8001a7c <osMessageQueuePut>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80006a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ac:	4809      	ldr	r0, [pc, #36]	; (80006d4 <StartDefaultTask+0x50>)
 80006ae:	f000 fbf6 	bl	8000e9e <HAL_GPIO_TogglePin>
	osDelay(100);
 80006b2:	2064      	movs	r0, #100	; 0x64
 80006b4:	f001 f92e 	bl	8001914 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80006b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006bc:	4805      	ldr	r0, [pc, #20]	; (80006d4 <StartDefaultTask+0x50>)
 80006be:	f000 fbee 	bl	8000e9e <HAL_GPIO_TogglePin>
	osDelay(900);
 80006c2:	f44f 7061 	mov.w	r0, #900	; 0x384
 80006c6:	f001 f925 	bl	8001914 <osDelay>
	msg.Buf[0] = 0x7;
 80006ca:	e7df      	b.n	800068c <StartDefaultTask+0x8>
 80006cc:	20004938 	.word	0x20004938
 80006d0:	20004960 	.word	0x20004960
 80006d4:	40020400 	.word	0x40020400

080006d8 <StartTask02>:
  }
}

void StartTask02(void *argument)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	status = osMessageQueueGet(myQueue01Handle, &msg, NULL, NULL);
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <StartTask02+0x48>)
 80006e2:	6818      	ldr	r0, [r3, #0]
 80006e4:	2300      	movs	r3, #0
 80006e6:	2200      	movs	r2, #0
 80006e8:	490e      	ldr	r1, [pc, #56]	; (8000724 <StartTask02+0x4c>)
 80006ea:	f001 fa3b 	bl	8001b64 <osMessageQueueGet>
 80006ee:	4602      	mov	r2, r0
 80006f0:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <StartTask02+0x50>)
 80006f2:	601a      	str	r2, [r3, #0]
	if(status == osOK) {
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <StartTask02+0x50>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d1f1      	bne.n	80006e0 <StartTask02+0x8>
		osMessageQueueReset(myQueue01Handle);
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <StartTask02+0x48>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4618      	mov	r0, r3
 8000702:	f001 faa1 	bl	8001c48 <osMessageQueueReset>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000706:	2180      	movs	r1, #128	; 0x80
 8000708:	4808      	ldr	r0, [pc, #32]	; (800072c <StartTask02+0x54>)
 800070a:	f000 fbc8 	bl	8000e9e <HAL_GPIO_TogglePin>
		osDelay(100);
 800070e:	2064      	movs	r0, #100	; 0x64
 8000710:	f001 f900 	bl	8001914 <osDelay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000714:	2180      	movs	r1, #128	; 0x80
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <StartTask02+0x54>)
 8000718:	f000 fbc1 	bl	8000e9e <HAL_GPIO_TogglePin>
	status = osMessageQueueGet(myQueue01Handle, &msg, NULL, NULL);
 800071c:	e7e0      	b.n	80006e0 <StartTask02+0x8>
 800071e:	bf00      	nop
 8000720:	20004960 	.word	0x20004960
 8000724:	20004938 	.word	0x20004938
 8000728:	20004964 	.word	0x20004964
 800072c:	40020400 	.word	0x40020400

08000730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
	...

08000740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <HAL_MspInit+0x54>)
 800074c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074e:	4a11      	ldr	r2, [pc, #68]	; (8000794 <HAL_MspInit+0x54>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000754:	6453      	str	r3, [r2, #68]	; 0x44
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <HAL_MspInit+0x54>)
 8000758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <HAL_MspInit+0x54>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076a:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <HAL_MspInit+0x54>)
 800076c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000770:	6413      	str	r3, [r2, #64]	; 0x40
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <HAL_MspInit+0x54>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	210f      	movs	r1, #15
 8000782:	f06f 0001 	mvn.w	r0, #1
 8000786:	f000 f99e 	bl	8000ac6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800

08000798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <HardFault_Handler+0x4>

080007ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <MemManage_Handler+0x4>

080007b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <BusFault_Handler+0x4>

080007b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <UsageFault_Handler+0x4>

080007be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d0:	f000 f89c 	bl	800090c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80007d4:	f002 feee 	bl	80035b4 <xTaskGetSchedulerState>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d001      	beq.n	80007e2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80007de:	f003 fcc3 	bl	8004168 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <SystemInit+0x28>)
 80007ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007f2:	4a07      	ldr	r2, [pc, #28]	; (8000810 <SystemInit+0x28>)
 80007f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <SystemInit+0x28>)
 80007fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000802:	609a      	str	r2, [r3, #8]
#endif
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000814:	f8df d034 	ldr.w	sp, [pc, #52]	; 800084c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000818:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800081a:	e003      	b.n	8000824 <LoopCopyDataInit>

0800081c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800081e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000820:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000822:	3104      	adds	r1, #4

08000824 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000824:	480b      	ldr	r0, [pc, #44]	; (8000854 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000828:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800082a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800082c:	d3f6      	bcc.n	800081c <CopyDataInit>
  ldr  r2, =_sbss
 800082e:	4a0b      	ldr	r2, [pc, #44]	; (800085c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000830:	e002      	b.n	8000838 <LoopFillZerobss>

08000832 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000832:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000834:	f842 3b04 	str.w	r3, [r2], #4

08000838 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800083a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800083c:	d3f9      	bcc.n	8000832 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800083e:	f7ff ffd3 	bl	80007e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000842:	f003 fef3 	bl	800462c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000846:	f7ff fe53 	bl	80004f0 <main>
  bx  lr    
 800084a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800084c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000850:	08004770 	.word	0x08004770
  ldr  r0, =_sdata
 8000854:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000858:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 800085c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000860:	200049ac 	.word	0x200049ac

08000864 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000864:	e7fe      	b.n	8000864 <ADC_IRQHandler>
	...

08000868 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <HAL_Init+0x40>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a0d      	ldr	r2, [pc, #52]	; (80008a8 <HAL_Init+0x40>)
 8000872:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000876:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000878:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <HAL_Init+0x40>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <HAL_Init+0x40>)
 800087e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000882:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000884:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <HAL_Init+0x40>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a07      	ldr	r2, [pc, #28]	; (80008a8 <HAL_Init+0x40>)
 800088a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800088e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000890:	2003      	movs	r0, #3
 8000892:	f000 f90d 	bl	8000ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000896:	200f      	movs	r0, #15
 8000898:	f000 f808 	bl	80008ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800089c:	f7ff ff50 	bl	8000740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023c00 	.word	0x40023c00

080008ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <HAL_InitTick+0x54>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <HAL_InitTick+0x58>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	4619      	mov	r1, r3
 80008be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 f917 	bl	8000afe <HAL_SYSTICK_Config>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
 80008d8:	e00e      	b.n	80008f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b0f      	cmp	r3, #15
 80008de:	d80a      	bhi.n	80008f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e0:	2200      	movs	r2, #0
 80008e2:	6879      	ldr	r1, [r7, #4]
 80008e4:	f04f 30ff 	mov.w	r0, #4294967295
 80008e8:	f000 f8ed 	bl	8000ac6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008ec:	4a06      	ldr	r2, [pc, #24]	; (8000908 <HAL_InitTick+0x5c>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008f2:	2300      	movs	r3, #0
 80008f4:	e000      	b.n	80008f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000000 	.word	0x20000000
 8000904:	20000008 	.word	0x20000008
 8000908:	20000004 	.word	0x20000004

0800090c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_IncTick+0x20>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	461a      	mov	r2, r3
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_IncTick+0x24>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4413      	add	r3, r2
 800091c:	4a04      	ldr	r2, [pc, #16]	; (8000930 <HAL_IncTick+0x24>)
 800091e:	6013      	str	r3, [r2, #0]
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	20000008 	.word	0x20000008
 8000930:	20004968 	.word	0x20004968

08000934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return uwTick;
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <HAL_GetTick+0x14>)
 800093a:	681b      	ldr	r3, [r3, #0]
}
 800093c:	4618      	mov	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	20004968 	.word	0x20004968

0800094c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000968:	4013      	ands	r3, r2
 800096a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097e:	4a04      	ldr	r2, [pc, #16]	; (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	60d3      	str	r3, [r2, #12]
}
 8000984:	bf00      	nop
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <__NVIC_GetPriorityGrouping+0x18>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	0a1b      	lsrs	r3, r3, #8
 800099e:	f003 0307 	and.w	r3, r3, #7
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	6039      	str	r1, [r7, #0]
 80009ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	db0a      	blt.n	80009da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	490c      	ldr	r1, [pc, #48]	; (80009fc <__NVIC_SetPriority+0x4c>)
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	0112      	lsls	r2, r2, #4
 80009d0:	b2d2      	uxtb	r2, r2
 80009d2:	440b      	add	r3, r1
 80009d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009d8:	e00a      	b.n	80009f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4908      	ldr	r1, [pc, #32]	; (8000a00 <__NVIC_SetPriority+0x50>)
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	f003 030f 	and.w	r3, r3, #15
 80009e6:	3b04      	subs	r3, #4
 80009e8:	0112      	lsls	r2, r2, #4
 80009ea:	b2d2      	uxtb	r2, r2
 80009ec:	440b      	add	r3, r1
 80009ee:	761a      	strb	r2, [r3, #24]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	e000e100 	.word	0xe000e100
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b089      	sub	sp, #36	; 0x24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	f1c3 0307 	rsb	r3, r3, #7
 8000a1e:	2b04      	cmp	r3, #4
 8000a20:	bf28      	it	cs
 8000a22:	2304      	movcs	r3, #4
 8000a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	3304      	adds	r3, #4
 8000a2a:	2b06      	cmp	r3, #6
 8000a2c:	d902      	bls.n	8000a34 <NVIC_EncodePriority+0x30>
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	3b03      	subs	r3, #3
 8000a32:	e000      	b.n	8000a36 <NVIC_EncodePriority+0x32>
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a38:	f04f 32ff 	mov.w	r2, #4294967295
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	43da      	mvns	r2, r3
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	401a      	ands	r2, r3
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	fa01 f303 	lsl.w	r3, r1, r3
 8000a56:	43d9      	mvns	r1, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a5c:	4313      	orrs	r3, r2
         );
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3724      	adds	r7, #36	; 0x24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a7c:	d301      	bcc.n	8000a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00f      	b.n	8000aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <SysTick_Config+0x40>)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3b01      	subs	r3, #1
 8000a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a8a:	210f      	movs	r1, #15
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f7ff ff8e 	bl	80009b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <SysTick_Config+0x40>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a9a:	4b04      	ldr	r3, [pc, #16]	; (8000aac <SysTick_Config+0x40>)
 8000a9c:	2207      	movs	r2, #7
 8000a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	e000e010 	.word	0xe000e010

08000ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff ff47 	bl	800094c <__NVIC_SetPriorityGrouping>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b086      	sub	sp, #24
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4603      	mov	r3, r0
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
 8000ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad8:	f7ff ff5c 	bl	8000994 <__NVIC_GetPriorityGrouping>
 8000adc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	68b9      	ldr	r1, [r7, #8]
 8000ae2:	6978      	ldr	r0, [r7, #20]
 8000ae4:	f7ff ff8e 	bl	8000a04 <NVIC_EncodePriority>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aee:	4611      	mov	r1, r2
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ff5d 	bl	80009b0 <__NVIC_SetPriority>
}
 8000af6:	bf00      	nop
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f7ff ffb0 	bl	8000a6c <SysTick_Config>
 8000b0c:	4603      	mov	r3, r0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b089      	sub	sp, #36	; 0x24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
 8000b32:	e177      	b.n	8000e24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b34:	2201      	movs	r2, #1
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	697a      	ldr	r2, [r7, #20]
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	f040 8166 	bne.w	8000e1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d00b      	beq.n	8000b72 <HAL_GPIO_Init+0x5a>
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	d007      	beq.n	8000b72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b66:	2b11      	cmp	r3, #17
 8000b68:	d003      	beq.n	8000b72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	2b12      	cmp	r3, #18
 8000b70:	d130      	bne.n	8000bd4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43db      	mvns	r3, r3
 8000b84:	69ba      	ldr	r2, [r7, #24]
 8000b86:	4013      	ands	r3, r2
 8000b88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	68da      	ldr	r2, [r3, #12]
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	69ba      	ldr	r2, [r7, #24]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ba8:	2201      	movs	r2, #1
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	69ba      	ldr	r2, [r7, #24]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	091b      	lsrs	r3, r3, #4
 8000bbe:	f003 0201 	and.w	r2, r3, #1
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	69ba      	ldr	r2, [r7, #24]
 8000bd2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	2203      	movs	r2, #3
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	43db      	mvns	r3, r3
 8000be6:	69ba      	ldr	r2, [r7, #24]
 8000be8:	4013      	ands	r3, r2
 8000bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	689a      	ldr	r2, [r3, #8]
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d003      	beq.n	8000c14 <HAL_GPIO_Init+0xfc>
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	2b12      	cmp	r3, #18
 8000c12:	d123      	bne.n	8000c5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	08da      	lsrs	r2, r3, #3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3208      	adds	r2, #8
 8000c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	f003 0307 	and.w	r3, r3, #7
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	220f      	movs	r2, #15
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	43db      	mvns	r3, r3
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	4013      	ands	r3, r2
 8000c36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	691a      	ldr	r2, [r3, #16]
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	08da      	lsrs	r2, r3, #3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	3208      	adds	r2, #8
 8000c56:	69b9      	ldr	r1, [r7, #24]
 8000c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	2203      	movs	r2, #3
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	69ba      	ldr	r2, [r7, #24]
 8000c70:	4013      	ands	r3, r2
 8000c72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 0203 	and.w	r2, r3, #3
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	f000 80c0 	beq.w	8000e1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b65      	ldr	r3, [pc, #404]	; (8000e38 <HAL_GPIO_Init+0x320>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	4a64      	ldr	r2, [pc, #400]	; (8000e38 <HAL_GPIO_Init+0x320>)
 8000ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cac:	6453      	str	r3, [r2, #68]	; 0x44
 8000cae:	4b62      	ldr	r3, [pc, #392]	; (8000e38 <HAL_GPIO_Init+0x320>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cba:	4a60      	ldr	r2, [pc, #384]	; (8000e3c <HAL_GPIO_Init+0x324>)
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	089b      	lsrs	r3, r3, #2
 8000cc0:	3302      	adds	r3, #2
 8000cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	f003 0303 	and.w	r3, r3, #3
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	220f      	movs	r2, #15
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a57      	ldr	r2, [pc, #348]	; (8000e40 <HAL_GPIO_Init+0x328>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d037      	beq.n	8000d56 <HAL_GPIO_Init+0x23e>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a56      	ldr	r2, [pc, #344]	; (8000e44 <HAL_GPIO_Init+0x32c>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d031      	beq.n	8000d52 <HAL_GPIO_Init+0x23a>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a55      	ldr	r2, [pc, #340]	; (8000e48 <HAL_GPIO_Init+0x330>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d02b      	beq.n	8000d4e <HAL_GPIO_Init+0x236>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a54      	ldr	r2, [pc, #336]	; (8000e4c <HAL_GPIO_Init+0x334>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d025      	beq.n	8000d4a <HAL_GPIO_Init+0x232>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a53      	ldr	r2, [pc, #332]	; (8000e50 <HAL_GPIO_Init+0x338>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d01f      	beq.n	8000d46 <HAL_GPIO_Init+0x22e>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a52      	ldr	r2, [pc, #328]	; (8000e54 <HAL_GPIO_Init+0x33c>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d019      	beq.n	8000d42 <HAL_GPIO_Init+0x22a>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a51      	ldr	r2, [pc, #324]	; (8000e58 <HAL_GPIO_Init+0x340>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d013      	beq.n	8000d3e <HAL_GPIO_Init+0x226>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a50      	ldr	r2, [pc, #320]	; (8000e5c <HAL_GPIO_Init+0x344>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d00d      	beq.n	8000d3a <HAL_GPIO_Init+0x222>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a4f      	ldr	r2, [pc, #316]	; (8000e60 <HAL_GPIO_Init+0x348>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d007      	beq.n	8000d36 <HAL_GPIO_Init+0x21e>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a4e      	ldr	r2, [pc, #312]	; (8000e64 <HAL_GPIO_Init+0x34c>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d101      	bne.n	8000d32 <HAL_GPIO_Init+0x21a>
 8000d2e:	2309      	movs	r3, #9
 8000d30:	e012      	b.n	8000d58 <HAL_GPIO_Init+0x240>
 8000d32:	230a      	movs	r3, #10
 8000d34:	e010      	b.n	8000d58 <HAL_GPIO_Init+0x240>
 8000d36:	2308      	movs	r3, #8
 8000d38:	e00e      	b.n	8000d58 <HAL_GPIO_Init+0x240>
 8000d3a:	2307      	movs	r3, #7
 8000d3c:	e00c      	b.n	8000d58 <HAL_GPIO_Init+0x240>
 8000d3e:	2306      	movs	r3, #6
 8000d40:	e00a      	b.n	8000d58 <HAL_GPIO_Init+0x240>
 8000d42:	2305      	movs	r3, #5
 8000d44:	e008      	b.n	8000d58 <HAL_GPIO_Init+0x240>
 8000d46:	2304      	movs	r3, #4
 8000d48:	e006      	b.n	8000d58 <HAL_GPIO_Init+0x240>
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e004      	b.n	8000d58 <HAL_GPIO_Init+0x240>
 8000d4e:	2302      	movs	r3, #2
 8000d50:	e002      	b.n	8000d58 <HAL_GPIO_Init+0x240>
 8000d52:	2301      	movs	r3, #1
 8000d54:	e000      	b.n	8000d58 <HAL_GPIO_Init+0x240>
 8000d56:	2300      	movs	r3, #0
 8000d58:	69fa      	ldr	r2, [r7, #28]
 8000d5a:	f002 0203 	and.w	r2, r2, #3
 8000d5e:	0092      	lsls	r2, r2, #2
 8000d60:	4093      	lsls	r3, r2
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d68:	4934      	ldr	r1, [pc, #208]	; (8000e3c <HAL_GPIO_Init+0x324>)
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	089b      	lsrs	r3, r3, #2
 8000d6e:	3302      	adds	r3, #2
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d76:	4b3c      	ldr	r3, [pc, #240]	; (8000e68 <HAL_GPIO_Init+0x350>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4013      	ands	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d003      	beq.n	8000d9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d9a:	4a33      	ldr	r2, [pc, #204]	; (8000e68 <HAL_GPIO_Init+0x350>)
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000da0:	4b31      	ldr	r3, [pc, #196]	; (8000e68 <HAL_GPIO_Init+0x350>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	43db      	mvns	r3, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4013      	ands	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d003      	beq.n	8000dc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dc4:	4a28      	ldr	r2, [pc, #160]	; (8000e68 <HAL_GPIO_Init+0x350>)
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dca:	4b27      	ldr	r3, [pc, #156]	; (8000e68 <HAL_GPIO_Init+0x350>)
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dee:	4a1e      	ldr	r2, [pc, #120]	; (8000e68 <HAL_GPIO_Init+0x350>)
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000df4:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <HAL_GPIO_Init+0x350>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e18:	4a13      	ldr	r2, [pc, #76]	; (8000e68 <HAL_GPIO_Init+0x350>)
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3301      	adds	r3, #1
 8000e22:	61fb      	str	r3, [r7, #28]
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	2b0f      	cmp	r3, #15
 8000e28:	f67f ae84 	bls.w	8000b34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	3724      	adds	r7, #36	; 0x24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40013800 	.word	0x40013800
 8000e40:	40020000 	.word	0x40020000
 8000e44:	40020400 	.word	0x40020400
 8000e48:	40020800 	.word	0x40020800
 8000e4c:	40020c00 	.word	0x40020c00
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40021400 	.word	0x40021400
 8000e58:	40021800 	.word	0x40021800
 8000e5c:	40021c00 	.word	0x40021c00
 8000e60:	40022000 	.word	0x40022000
 8000e64:	40022400 	.word	0x40022400
 8000e68:	40013c00 	.word	0x40013c00

08000e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	460b      	mov	r3, r1
 8000e76:	807b      	strh	r3, [r7, #2]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e7c:	787b      	ldrb	r3, [r7, #1]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e82:	887a      	ldrh	r2, [r7, #2]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e88:	e003      	b.n	8000e92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e8a:	887b      	ldrh	r3, [r7, #2]
 8000e8c:	041a      	lsls	r2, r3, #16
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	619a      	str	r2, [r3, #24]
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	695a      	ldr	r2, [r3, #20]
 8000eae:	887b      	ldrh	r3, [r7, #2]
 8000eb0:	401a      	ands	r2, r3
 8000eb2:	887b      	ldrh	r3, [r7, #2]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d104      	bne.n	8000ec2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000eb8:	887b      	ldrh	r3, [r7, #2]
 8000eba:	041a      	lsls	r2, r3, #16
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000ec0:	e002      	b.n	8000ec8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000ec2:	887a      	ldrh	r2, [r7, #2]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	619a      	str	r2, [r3, #24]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d101      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e25b      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d075      	beq.n	8000fde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ef2:	4ba3      	ldr	r3, [pc, #652]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	f003 030c 	and.w	r3, r3, #12
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	d00c      	beq.n	8000f18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000efe:	4ba0      	ldr	r3, [pc, #640]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f06:	2b08      	cmp	r3, #8
 8000f08:	d112      	bne.n	8000f30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f0a:	4b9d      	ldr	r3, [pc, #628]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f16:	d10b      	bne.n	8000f30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f18:	4b99      	ldr	r3, [pc, #612]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d05b      	beq.n	8000fdc <HAL_RCC_OscConfig+0x108>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d157      	bne.n	8000fdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e236      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f38:	d106      	bne.n	8000f48 <HAL_RCC_OscConfig+0x74>
 8000f3a:	4b91      	ldr	r3, [pc, #580]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a90      	ldr	r2, [pc, #576]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	e01d      	b.n	8000f84 <HAL_RCC_OscConfig+0xb0>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f50:	d10c      	bne.n	8000f6c <HAL_RCC_OscConfig+0x98>
 8000f52:	4b8b      	ldr	r3, [pc, #556]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a8a      	ldr	r2, [pc, #552]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	4b88      	ldr	r3, [pc, #544]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a87      	ldr	r2, [pc, #540]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	e00b      	b.n	8000f84 <HAL_RCC_OscConfig+0xb0>
 8000f6c:	4b84      	ldr	r3, [pc, #528]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a83      	ldr	r2, [pc, #524]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f76:	6013      	str	r3, [r2, #0]
 8000f78:	4b81      	ldr	r3, [pc, #516]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a80      	ldr	r2, [pc, #512]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d013      	beq.n	8000fb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8c:	f7ff fcd2 	bl	8000934 <HAL_GetTick>
 8000f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f92:	e008      	b.n	8000fa6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f94:	f7ff fcce 	bl	8000934 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b64      	cmp	r3, #100	; 0x64
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e1fb      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa6:	4b76      	ldr	r3, [pc, #472]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d0f0      	beq.n	8000f94 <HAL_RCC_OscConfig+0xc0>
 8000fb2:	e014      	b.n	8000fde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb4:	f7ff fcbe 	bl	8000934 <HAL_GetTick>
 8000fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fba:	e008      	b.n	8000fce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fbc:	f7ff fcba 	bl	8000934 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b64      	cmp	r3, #100	; 0x64
 8000fc8:	d901      	bls.n	8000fce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e1e7      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fce:	4b6c      	ldr	r3, [pc, #432]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d1f0      	bne.n	8000fbc <HAL_RCC_OscConfig+0xe8>
 8000fda:	e000      	b.n	8000fde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d063      	beq.n	80010b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fea:	4b65      	ldr	r3, [pc, #404]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	f003 030c 	and.w	r3, r3, #12
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d00b      	beq.n	800100e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ff6:	4b62      	ldr	r3, [pc, #392]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ffe:	2b08      	cmp	r3, #8
 8001000:	d11c      	bne.n	800103c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001002:	4b5f      	ldr	r3, [pc, #380]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d116      	bne.n	800103c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800100e:	4b5c      	ldr	r3, [pc, #368]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d005      	beq.n	8001026 <HAL_RCC_OscConfig+0x152>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d001      	beq.n	8001026 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e1bb      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001026:	4b56      	ldr	r3, [pc, #344]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	691b      	ldr	r3, [r3, #16]
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	4952      	ldr	r1, [pc, #328]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8001036:	4313      	orrs	r3, r2
 8001038:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800103a:	e03a      	b.n	80010b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d020      	beq.n	8001086 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001044:	4b4f      	ldr	r3, [pc, #316]	; (8001184 <HAL_RCC_OscConfig+0x2b0>)
 8001046:	2201      	movs	r2, #1
 8001048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800104a:	f7ff fc73 	bl	8000934 <HAL_GetTick>
 800104e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001050:	e008      	b.n	8001064 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001052:	f7ff fc6f 	bl	8000934 <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	2b02      	cmp	r3, #2
 800105e:	d901      	bls.n	8001064 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001060:	2303      	movs	r3, #3
 8001062:	e19c      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001064:	4b46      	ldr	r3, [pc, #280]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0302 	and.w	r3, r3, #2
 800106c:	2b00      	cmp	r3, #0
 800106e:	d0f0      	beq.n	8001052 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001070:	4b43      	ldr	r3, [pc, #268]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	4940      	ldr	r1, [pc, #256]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8001080:	4313      	orrs	r3, r2
 8001082:	600b      	str	r3, [r1, #0]
 8001084:	e015      	b.n	80010b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001086:	4b3f      	ldr	r3, [pc, #252]	; (8001184 <HAL_RCC_OscConfig+0x2b0>)
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800108c:	f7ff fc52 	bl	8000934 <HAL_GetTick>
 8001090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001094:	f7ff fc4e 	bl	8000934 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e17b      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010a6:	4b36      	ldr	r3, [pc, #216]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1f0      	bne.n	8001094 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0308 	and.w	r3, r3, #8
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d030      	beq.n	8001120 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d016      	beq.n	80010f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010c6:	4b30      	ldr	r3, [pc, #192]	; (8001188 <HAL_RCC_OscConfig+0x2b4>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010cc:	f7ff fc32 	bl	8000934 <HAL_GetTick>
 80010d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010d4:	f7ff fc2e 	bl	8000934 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e15b      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010e6:	4b26      	ldr	r3, [pc, #152]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 80010e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0f0      	beq.n	80010d4 <HAL_RCC_OscConfig+0x200>
 80010f2:	e015      	b.n	8001120 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010f4:	4b24      	ldr	r3, [pc, #144]	; (8001188 <HAL_RCC_OscConfig+0x2b4>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010fa:	f7ff fc1b 	bl	8000934 <HAL_GetTick>
 80010fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001100:	e008      	b.n	8001114 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001102:	f7ff fc17 	bl	8000934 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e144      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001114:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8001116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1f0      	bne.n	8001102 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0304 	and.w	r3, r3, #4
 8001128:	2b00      	cmp	r3, #0
 800112a:	f000 80a0 	beq.w	800126e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800112e:	2300      	movs	r3, #0
 8001130:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001132:	4b13      	ldr	r3, [pc, #76]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d10f      	bne.n	800115e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8001148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114c:	6413      	str	r3, [r2, #64]	; 0x40
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <HAL_RCC_OscConfig+0x2ac>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800115a:	2301      	movs	r3, #1
 800115c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800115e:	4b0b      	ldr	r3, [pc, #44]	; (800118c <HAL_RCC_OscConfig+0x2b8>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001166:	2b00      	cmp	r3, #0
 8001168:	d121      	bne.n	80011ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <HAL_RCC_OscConfig+0x2b8>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a07      	ldr	r2, [pc, #28]	; (800118c <HAL_RCC_OscConfig+0x2b8>)
 8001170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001174:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001176:	f7ff fbdd 	bl	8000934 <HAL_GetTick>
 800117a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117c:	e011      	b.n	80011a2 <HAL_RCC_OscConfig+0x2ce>
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800
 8001184:	42470000 	.word	0x42470000
 8001188:	42470e80 	.word	0x42470e80
 800118c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001190:	f7ff fbd0 	bl	8000934 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e0fd      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a2:	4b81      	ldr	r3, [pc, #516]	; (80013a8 <HAL_RCC_OscConfig+0x4d4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f0      	beq.n	8001190 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d106      	bne.n	80011c4 <HAL_RCC_OscConfig+0x2f0>
 80011b6:	4b7d      	ldr	r3, [pc, #500]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 80011b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011ba:	4a7c      	ldr	r2, [pc, #496]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6713      	str	r3, [r2, #112]	; 0x70
 80011c2:	e01c      	b.n	80011fe <HAL_RCC_OscConfig+0x32a>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	2b05      	cmp	r3, #5
 80011ca:	d10c      	bne.n	80011e6 <HAL_RCC_OscConfig+0x312>
 80011cc:	4b77      	ldr	r3, [pc, #476]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 80011ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011d0:	4a76      	ldr	r2, [pc, #472]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 80011d2:	f043 0304 	orr.w	r3, r3, #4
 80011d6:	6713      	str	r3, [r2, #112]	; 0x70
 80011d8:	4b74      	ldr	r3, [pc, #464]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 80011da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011dc:	4a73      	ldr	r2, [pc, #460]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	6713      	str	r3, [r2, #112]	; 0x70
 80011e4:	e00b      	b.n	80011fe <HAL_RCC_OscConfig+0x32a>
 80011e6:	4b71      	ldr	r3, [pc, #452]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 80011e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011ea:	4a70      	ldr	r2, [pc, #448]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 80011ec:	f023 0301 	bic.w	r3, r3, #1
 80011f0:	6713      	str	r3, [r2, #112]	; 0x70
 80011f2:	4b6e      	ldr	r3, [pc, #440]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 80011f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011f6:	4a6d      	ldr	r2, [pc, #436]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 80011f8:	f023 0304 	bic.w	r3, r3, #4
 80011fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d015      	beq.n	8001232 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001206:	f7ff fb95 	bl	8000934 <HAL_GetTick>
 800120a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800120c:	e00a      	b.n	8001224 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800120e:	f7ff fb91 	bl	8000934 <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	f241 3288 	movw	r2, #5000	; 0x1388
 800121c:	4293      	cmp	r3, r2
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e0bc      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001224:	4b61      	ldr	r3, [pc, #388]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 8001226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d0ee      	beq.n	800120e <HAL_RCC_OscConfig+0x33a>
 8001230:	e014      	b.n	800125c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001232:	f7ff fb7f 	bl	8000934 <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001238:	e00a      	b.n	8001250 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800123a:	f7ff fb7b 	bl	8000934 <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	f241 3288 	movw	r2, #5000	; 0x1388
 8001248:	4293      	cmp	r3, r2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e0a6      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001250:	4b56      	ldr	r3, [pc, #344]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 8001252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1ee      	bne.n	800123a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800125c:	7dfb      	ldrb	r3, [r7, #23]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d105      	bne.n	800126e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001262:	4b52      	ldr	r3, [pc, #328]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	4a51      	ldr	r2, [pc, #324]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 8001268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800126c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 8092 	beq.w	800139c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001278:	4b4c      	ldr	r3, [pc, #304]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f003 030c 	and.w	r3, r3, #12
 8001280:	2b08      	cmp	r3, #8
 8001282:	d05c      	beq.n	800133e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d141      	bne.n	8001310 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800128c:	4b48      	ldr	r3, [pc, #288]	; (80013b0 <HAL_RCC_OscConfig+0x4dc>)
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001292:	f7ff fb4f 	bl	8000934 <HAL_GetTick>
 8001296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001298:	e008      	b.n	80012ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800129a:	f7ff fb4b 	bl	8000934 <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e078      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ac:	4b3f      	ldr	r3, [pc, #252]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1f0      	bne.n	800129a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69da      	ldr	r2, [r3, #28]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	431a      	orrs	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c6:	019b      	lsls	r3, r3, #6
 80012c8:	431a      	orrs	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ce:	085b      	lsrs	r3, r3, #1
 80012d0:	3b01      	subs	r3, #1
 80012d2:	041b      	lsls	r3, r3, #16
 80012d4:	431a      	orrs	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012da:	061b      	lsls	r3, r3, #24
 80012dc:	4933      	ldr	r1, [pc, #204]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012e2:	4b33      	ldr	r3, [pc, #204]	; (80013b0 <HAL_RCC_OscConfig+0x4dc>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fb24 	bl	8000934 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012f0:	f7ff fb20 	bl	8000934 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e04d      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001302:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0x41c>
 800130e:	e045      	b.n	800139c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001310:	4b27      	ldr	r3, [pc, #156]	; (80013b0 <HAL_RCC_OscConfig+0x4dc>)
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001316:	f7ff fb0d 	bl	8000934 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800131e:	f7ff fb09 	bl	8000934 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e036      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001330:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1f0      	bne.n	800131e <HAL_RCC_OscConfig+0x44a>
 800133c:	e02e      	b.n	800139c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d101      	bne.n	800134a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e029      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800134a:	4b18      	ldr	r3, [pc, #96]	; (80013ac <HAL_RCC_OscConfig+0x4d8>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	429a      	cmp	r2, r3
 800135c:	d11c      	bne.n	8001398 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001368:	429a      	cmp	r2, r3
 800136a:	d115      	bne.n	8001398 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001372:	4013      	ands	r3, r2
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001378:	4293      	cmp	r3, r2
 800137a:	d10d      	bne.n	8001398 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001386:	429a      	cmp	r2, r3
 8001388:	d106      	bne.n	8001398 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001394:	429a      	cmp	r2, r3
 8001396:	d001      	beq.n	800139c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e000      	b.n	800139e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40007000 	.word	0x40007000
 80013ac:	40023800 	.word	0x40023800
 80013b0:	42470060 	.word	0x42470060

080013b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e0cc      	b.n	8001562 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013c8:	4b68      	ldr	r3, [pc, #416]	; (800156c <HAL_RCC_ClockConfig+0x1b8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 030f 	and.w	r3, r3, #15
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d90c      	bls.n	80013f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013d6:	4b65      	ldr	r3, [pc, #404]	; (800156c <HAL_RCC_ClockConfig+0x1b8>)
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013de:	4b63      	ldr	r3, [pc, #396]	; (800156c <HAL_RCC_ClockConfig+0x1b8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 030f 	and.w	r3, r3, #15
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d001      	beq.n	80013f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e0b8      	b.n	8001562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d020      	beq.n	800143e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	2b00      	cmp	r3, #0
 8001406:	d005      	beq.n	8001414 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001408:	4b59      	ldr	r3, [pc, #356]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	4a58      	ldr	r2, [pc, #352]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 800140e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001412:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0308 	and.w	r3, r3, #8
 800141c:	2b00      	cmp	r3, #0
 800141e:	d005      	beq.n	800142c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001420:	4b53      	ldr	r3, [pc, #332]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	4a52      	ldr	r2, [pc, #328]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001426:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800142a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800142c:	4b50      	ldr	r3, [pc, #320]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	494d      	ldr	r1, [pc, #308]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 800143a:	4313      	orrs	r3, r2
 800143c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b00      	cmp	r3, #0
 8001448:	d044      	beq.n	80014d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d107      	bne.n	8001462 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001452:	4b47      	ldr	r3, [pc, #284]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d119      	bne.n	8001492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e07f      	b.n	8001562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b02      	cmp	r3, #2
 8001468:	d003      	beq.n	8001472 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800146e:	2b03      	cmp	r3, #3
 8001470:	d107      	bne.n	8001482 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001472:	4b3f      	ldr	r3, [pc, #252]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d109      	bne.n	8001492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e06f      	b.n	8001562 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001482:	4b3b      	ldr	r3, [pc, #236]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e067      	b.n	8001562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001492:	4b37      	ldr	r3, [pc, #220]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f023 0203 	bic.w	r2, r3, #3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	4934      	ldr	r1, [pc, #208]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014a4:	f7ff fa46 	bl	8000934 <HAL_GetTick>
 80014a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014aa:	e00a      	b.n	80014c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ac:	f7ff fa42 	bl	8000934 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e04f      	b.n	8001562 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c2:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 020c 	and.w	r2, r3, #12
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d1eb      	bne.n	80014ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014d4:	4b25      	ldr	r3, [pc, #148]	; (800156c <HAL_RCC_ClockConfig+0x1b8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 030f 	and.w	r3, r3, #15
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d20c      	bcs.n	80014fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e2:	4b22      	ldr	r3, [pc, #136]	; (800156c <HAL_RCC_ClockConfig+0x1b8>)
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ea:	4b20      	ldr	r3, [pc, #128]	; (800156c <HAL_RCC_ClockConfig+0x1b8>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d001      	beq.n	80014fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e032      	b.n	8001562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	2b00      	cmp	r3, #0
 8001506:	d008      	beq.n	800151a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001508:	4b19      	ldr	r3, [pc, #100]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	4916      	ldr	r1, [pc, #88]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001516:	4313      	orrs	r3, r2
 8001518:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	2b00      	cmp	r3, #0
 8001524:	d009      	beq.n	800153a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001526:	4b12      	ldr	r3, [pc, #72]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	490e      	ldr	r1, [pc, #56]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	4313      	orrs	r3, r2
 8001538:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800153a:	f000 f821 	bl	8001580 <HAL_RCC_GetSysClockFreq>
 800153e:	4601      	mov	r1, r0
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	091b      	lsrs	r3, r3, #4
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <HAL_RCC_ClockConfig+0x1c0>)
 800154c:	5cd3      	ldrb	r3, [r2, r3]
 800154e:	fa21 f303 	lsr.w	r3, r1, r3
 8001552:	4a09      	ldr	r2, [pc, #36]	; (8001578 <HAL_RCC_ClockConfig+0x1c4>)
 8001554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <HAL_RCC_ClockConfig+0x1c8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff f9a6 	bl	80008ac <HAL_InitTick>

  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023c00 	.word	0x40023c00
 8001570:	40023800 	.word	0x40023800
 8001574:	08004750 	.word	0x08004750
 8001578:	20000000 	.word	0x20000000
 800157c:	20000004 	.word	0x20000004

08001580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	2300      	movs	r3, #0
 8001590:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001596:	4b50      	ldr	r3, [pc, #320]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 030c 	and.w	r3, r3, #12
 800159e:	2b04      	cmp	r3, #4
 80015a0:	d007      	beq.n	80015b2 <HAL_RCC_GetSysClockFreq+0x32>
 80015a2:	2b08      	cmp	r3, #8
 80015a4:	d008      	beq.n	80015b8 <HAL_RCC_GetSysClockFreq+0x38>
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f040 808d 	bne.w	80016c6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015ac:	4b4b      	ldr	r3, [pc, #300]	; (80016dc <HAL_RCC_GetSysClockFreq+0x15c>)
 80015ae:	60bb      	str	r3, [r7, #8]
       break;
 80015b0:	e08c      	b.n	80016cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015b2:	4b4b      	ldr	r3, [pc, #300]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80015b4:	60bb      	str	r3, [r7, #8]
      break;
 80015b6:	e089      	b.n	80016cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015b8:	4b47      	ldr	r3, [pc, #284]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015c2:	4b45      	ldr	r3, [pc, #276]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d023      	beq.n	8001616 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ce:	4b42      	ldr	r3, [pc, #264]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	099b      	lsrs	r3, r3, #6
 80015d4:	f04f 0400 	mov.w	r4, #0
 80015d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	ea03 0501 	and.w	r5, r3, r1
 80015e4:	ea04 0602 	and.w	r6, r4, r2
 80015e8:	4a3d      	ldr	r2, [pc, #244]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80015ea:	fb02 f106 	mul.w	r1, r2, r6
 80015ee:	2200      	movs	r2, #0
 80015f0:	fb02 f205 	mul.w	r2, r2, r5
 80015f4:	440a      	add	r2, r1
 80015f6:	493a      	ldr	r1, [pc, #232]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80015f8:	fba5 0101 	umull	r0, r1, r5, r1
 80015fc:	1853      	adds	r3, r2, r1
 80015fe:	4619      	mov	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f04f 0400 	mov.w	r4, #0
 8001606:	461a      	mov	r2, r3
 8001608:	4623      	mov	r3, r4
 800160a:	f7fe fdf1 	bl	80001f0 <__aeabi_uldivmod>
 800160e:	4603      	mov	r3, r0
 8001610:	460c      	mov	r4, r1
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	e049      	b.n	80016aa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001616:	4b30      	ldr	r3, [pc, #192]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	099b      	lsrs	r3, r3, #6
 800161c:	f04f 0400 	mov.w	r4, #0
 8001620:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	ea03 0501 	and.w	r5, r3, r1
 800162c:	ea04 0602 	and.w	r6, r4, r2
 8001630:	4629      	mov	r1, r5
 8001632:	4632      	mov	r2, r6
 8001634:	f04f 0300 	mov.w	r3, #0
 8001638:	f04f 0400 	mov.w	r4, #0
 800163c:	0154      	lsls	r4, r2, #5
 800163e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001642:	014b      	lsls	r3, r1, #5
 8001644:	4619      	mov	r1, r3
 8001646:	4622      	mov	r2, r4
 8001648:	1b49      	subs	r1, r1, r5
 800164a:	eb62 0206 	sbc.w	r2, r2, r6
 800164e:	f04f 0300 	mov.w	r3, #0
 8001652:	f04f 0400 	mov.w	r4, #0
 8001656:	0194      	lsls	r4, r2, #6
 8001658:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800165c:	018b      	lsls	r3, r1, #6
 800165e:	1a5b      	subs	r3, r3, r1
 8001660:	eb64 0402 	sbc.w	r4, r4, r2
 8001664:	f04f 0100 	mov.w	r1, #0
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	00e2      	lsls	r2, r4, #3
 800166e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001672:	00d9      	lsls	r1, r3, #3
 8001674:	460b      	mov	r3, r1
 8001676:	4614      	mov	r4, r2
 8001678:	195b      	adds	r3, r3, r5
 800167a:	eb44 0406 	adc.w	r4, r4, r6
 800167e:	f04f 0100 	mov.w	r1, #0
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	02a2      	lsls	r2, r4, #10
 8001688:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800168c:	0299      	lsls	r1, r3, #10
 800168e:	460b      	mov	r3, r1
 8001690:	4614      	mov	r4, r2
 8001692:	4618      	mov	r0, r3
 8001694:	4621      	mov	r1, r4
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f04f 0400 	mov.w	r4, #0
 800169c:	461a      	mov	r2, r3
 800169e:	4623      	mov	r3, r4
 80016a0:	f7fe fda6 	bl	80001f0 <__aeabi_uldivmod>
 80016a4:	4603      	mov	r3, r0
 80016a6:	460c      	mov	r4, r1
 80016a8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	0c1b      	lsrs	r3, r3, #16
 80016b0:	f003 0303 	and.w	r3, r3, #3
 80016b4:	3301      	adds	r3, #1
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c2:	60bb      	str	r3, [r7, #8]
      break;
 80016c4:	e002      	b.n	80016cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016c6:	4b05      	ldr	r3, [pc, #20]	; (80016dc <HAL_RCC_GetSysClockFreq+0x15c>)
 80016c8:	60bb      	str	r3, [r7, #8]
      break;
 80016ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016cc:	68bb      	ldr	r3, [r7, #8]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800
 80016dc:	00f42400 	.word	0x00f42400
 80016e0:	017d7840 	.word	0x017d7840

080016e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
	...

080016f4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80016fa:	f3ef 8305 	mrs	r3, IPSR
 80016fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8001700:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10f      	bne.n	8001726 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001706:	f3ef 8310 	mrs	r3, PRIMASK
 800170a:	607b      	str	r3, [r7, #4]
  return(result);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d105      	bne.n	800171e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001712:	f3ef 8311 	mrs	r3, BASEPRI
 8001716:	603b      	str	r3, [r7, #0]
  return(result);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d007      	beq.n	800172e <osKernelInitialize+0x3a>
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <osKernelInitialize+0x64>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b02      	cmp	r3, #2
 8001724:	d103      	bne.n	800172e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001726:	f06f 0305 	mvn.w	r3, #5
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	e00c      	b.n	8001748 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800172e:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <osKernelInitialize+0x64>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d105      	bne.n	8001742 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <osKernelInitialize+0x64>)
 8001738:	2201      	movs	r2, #1
 800173a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	e002      	b.n	8001748 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
 8001746:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001748:	68fb      	ldr	r3, [r7, #12]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	2000002c 	.word	0x2000002c

0800175c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001762:	f3ef 8305 	mrs	r3, IPSR
 8001766:	60bb      	str	r3, [r7, #8]
  return(result);
 8001768:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800176a:	2b00      	cmp	r3, #0
 800176c:	d10f      	bne.n	800178e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800176e:	f3ef 8310 	mrs	r3, PRIMASK
 8001772:	607b      	str	r3, [r7, #4]
  return(result);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d105      	bne.n	8001786 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800177a:	f3ef 8311 	mrs	r3, BASEPRI
 800177e:	603b      	str	r3, [r7, #0]
  return(result);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d007      	beq.n	8001796 <osKernelStart+0x3a>
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <osKernelStart+0x68>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b02      	cmp	r3, #2
 800178c:	d103      	bne.n	8001796 <osKernelStart+0x3a>
    stat = osErrorISR;
 800178e:	f06f 0305 	mvn.w	r3, #5
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	e010      	b.n	80017b8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001796:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <osKernelStart+0x68>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d109      	bne.n	80017b2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800179e:	f7ff ffa1 	bl	80016e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80017a2:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <osKernelStart+0x68>)
 80017a4:	2202      	movs	r2, #2
 80017a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80017a8:	f001 face 	bl	8002d48 <vTaskStartScheduler>
      stat = osOK;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	e002      	b.n	80017b8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295
 80017b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80017b8:	68fb      	ldr	r3, [r7, #12]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	2000002c 	.word	0x2000002c

080017c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b090      	sub	sp, #64	; 0x40
 80017cc:	af04      	add	r7, sp, #16
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80017d8:	f3ef 8305 	mrs	r3, IPSR
 80017dc:	61fb      	str	r3, [r7, #28]
  return(result);
 80017de:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f040 808f 	bne.w	8001904 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017e6:	f3ef 8310 	mrs	r3, PRIMASK
 80017ea:	61bb      	str	r3, [r7, #24]
  return(result);
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d105      	bne.n	80017fe <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80017f2:	f3ef 8311 	mrs	r3, BASEPRI
 80017f6:	617b      	str	r3, [r7, #20]
  return(result);
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <osThreadNew+0x3e>
 80017fe:	4b44      	ldr	r3, [pc, #272]	; (8001910 <osThreadNew+0x148>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b02      	cmp	r3, #2
 8001804:	d07e      	beq.n	8001904 <osThreadNew+0x13c>
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d07b      	beq.n	8001904 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8001810:	2318      	movs	r3, #24
 8001812:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8001814:	2300      	movs	r3, #0
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8001818:	f04f 33ff 	mov.w	r3, #4294967295
 800181c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d045      	beq.n	80018b0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d002      	beq.n	8001832 <osThreadNew+0x6a>
        name = attr->name;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d002      	beq.n	8001840 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	2b00      	cmp	r3, #0
 8001844:	d008      	beq.n	8001858 <osThreadNew+0x90>
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	2b38      	cmp	r3, #56	; 0x38
 800184a:	d805      	bhi.n	8001858 <osThreadNew+0x90>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <osThreadNew+0x94>
        return (NULL);
 8001858:	2300      	movs	r3, #0
 800185a:	e054      	b.n	8001906 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	089b      	lsrs	r3, r3, #2
 800186a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00e      	beq.n	8001892 <osThreadNew+0xca>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	2b5b      	cmp	r3, #91	; 0x5b
 800187a:	d90a      	bls.n	8001892 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001880:	2b00      	cmp	r3, #0
 8001882:	d006      	beq.n	8001892 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d002      	beq.n	8001892 <osThreadNew+0xca>
        mem = 1;
 800188c:	2301      	movs	r3, #1
 800188e:	623b      	str	r3, [r7, #32]
 8001890:	e010      	b.n	80018b4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10c      	bne.n	80018b4 <osThreadNew+0xec>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d108      	bne.n	80018b4 <osThreadNew+0xec>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d104      	bne.n	80018b4 <osThreadNew+0xec>
          mem = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
 80018ae:	e001      	b.n	80018b4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80018b4:	6a3b      	ldr	r3, [r7, #32]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d110      	bne.n	80018dc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80018c2:	9202      	str	r2, [sp, #8]
 80018c4:	9301      	str	r3, [sp, #4]
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f001 f867 	bl	80029a4 <xTaskCreateStatic>
 80018d6:	4603      	mov	r3, r0
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	e013      	b.n	8001904 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80018dc:	6a3b      	ldr	r3, [r7, #32]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d110      	bne.n	8001904 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80018e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	f107 0310 	add.w	r3, r7, #16
 80018ea:	9301      	str	r3, [sp, #4]
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f001 f8af 	bl	8002a58 <xTaskCreate>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d001      	beq.n	8001904 <osThreadNew+0x13c>
          hTask = NULL;
 8001900:	2300      	movs	r3, #0
 8001902:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001904:	693b      	ldr	r3, [r7, #16]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3730      	adds	r7, #48	; 0x30
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	2000002c 	.word	0x2000002c

08001914 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800191c:	f3ef 8305 	mrs	r3, IPSR
 8001920:	613b      	str	r3, [r7, #16]
  return(result);
 8001922:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001924:	2b00      	cmp	r3, #0
 8001926:	d10f      	bne.n	8001948 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001928:	f3ef 8310 	mrs	r3, PRIMASK
 800192c:	60fb      	str	r3, [r7, #12]
  return(result);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d105      	bne.n	8001940 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001934:	f3ef 8311 	mrs	r3, BASEPRI
 8001938:	60bb      	str	r3, [r7, #8]
  return(result);
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d007      	beq.n	8001950 <osDelay+0x3c>
 8001940:	4b0a      	ldr	r3, [pc, #40]	; (800196c <osDelay+0x58>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d103      	bne.n	8001950 <osDelay+0x3c>
    stat = osErrorISR;
 8001948:	f06f 0305 	mvn.w	r3, #5
 800194c:	617b      	str	r3, [r7, #20]
 800194e:	e007      	b.n	8001960 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d002      	beq.n	8001960 <osDelay+0x4c>
      vTaskDelay(ticks);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f001 f9c0 	bl	8002ce0 <vTaskDelay>
    }
  }

  return (stat);
 8001960:	697b      	ldr	r3, [r7, #20]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	2000002c 	.word	0x2000002c

08001970 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8001970:	b580      	push	{r7, lr}
 8001972:	b08c      	sub	sp, #48	; 0x30
 8001974:	af02      	add	r7, sp, #8
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800197c:	2300      	movs	r3, #0
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001980:	f3ef 8305 	mrs	r3, IPSR
 8001984:	61bb      	str	r3, [r7, #24]
  return(result);
 8001986:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8001988:	2b00      	cmp	r3, #0
 800198a:	d170      	bne.n	8001a6e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800198c:	f3ef 8310 	mrs	r3, PRIMASK
 8001990:	617b      	str	r3, [r7, #20]
  return(result);
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d105      	bne.n	80019a4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001998:	f3ef 8311 	mrs	r3, BASEPRI
 800199c:	613b      	str	r3, [r7, #16]
  return(result);
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <osMessageQueueNew+0x3c>
 80019a4:	4b34      	ldr	r3, [pc, #208]	; (8001a78 <osMessageQueueNew+0x108>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d060      	beq.n	8001a6e <osMessageQueueNew+0xfe>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d05d      	beq.n	8001a6e <osMessageQueueNew+0xfe>
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d05a      	beq.n	8001a6e <osMessageQueueNew+0xfe>
    mem = -1;
 80019b8:	f04f 33ff 	mov.w	r3, #4294967295
 80019bc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d029      	beq.n	8001a18 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d012      	beq.n	80019f2 <osMessageQueueNew+0x82>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	2b4f      	cmp	r3, #79	; 0x4f
 80019d2:	d90e      	bls.n	80019f2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00a      	beq.n	80019f2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	695a      	ldr	r2, [r3, #20]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	68b9      	ldr	r1, [r7, #8]
 80019e4:	fb01 f303 	mul.w	r3, r1, r3
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d302      	bcc.n	80019f2 <osMessageQueueNew+0x82>
        mem = 1;
 80019ec:	2301      	movs	r3, #1
 80019ee:	623b      	str	r3, [r7, #32]
 80019f0:	e014      	b.n	8001a1c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d110      	bne.n	8001a1c <osMessageQueueNew+0xac>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10c      	bne.n	8001a1c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d108      	bne.n	8001a1c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d104      	bne.n	8001a1c <osMessageQueueNew+0xac>
          mem = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	623b      	str	r3, [r7, #32]
 8001a16:	e001      	b.n	8001a1c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d10c      	bne.n	8001a3c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691a      	ldr	r2, [r3, #16]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6899      	ldr	r1, [r3, #8]
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	460b      	mov	r3, r1
 8001a30:	68b9      	ldr	r1, [r7, #8]
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f000 fa8c 	bl	8001f50 <xQueueGenericCreateStatic>
 8001a38:	6278      	str	r0, [r7, #36]	; 0x24
 8001a3a:	e008      	b.n	8001a4e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8001a3c:	6a3b      	ldr	r3, [r7, #32]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d105      	bne.n	8001a4e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8001a42:	2200      	movs	r2, #0
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 faf5 	bl	8002036 <xQueueGenericCreate>
 8001a4c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00c      	beq.n	8001a6e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <osMessageQueueNew+0xf2>
        name = attr->name;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	61fb      	str	r3, [r7, #28]
 8001a60:	e001      	b.n	8001a66 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8001a66:	69f9      	ldr	r1, [r7, #28]
 8001a68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a6a:	f000 ff3f 	bl	80028ec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3728      	adds	r7, #40	; 0x28
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	2000002c 	.word	0x2000002c

08001a7c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08a      	sub	sp, #40	; 0x28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	603b      	str	r3, [r7, #0]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8001a90:	2300      	movs	r3, #0
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a94:	f3ef 8305 	mrs	r3, IPSR
 8001a98:	61fb      	str	r3, [r7, #28]
  return(result);
 8001a9a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d10f      	bne.n	8001ac0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001aa0:	f3ef 8310 	mrs	r3, PRIMASK
 8001aa4:	61bb      	str	r3, [r7, #24]
  return(result);
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d105      	bne.n	8001ab8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001aac:	f3ef 8311 	mrs	r3, BASEPRI
 8001ab0:	617b      	str	r3, [r7, #20]
  return(result);
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d02c      	beq.n	8001b12 <osMessageQueuePut+0x96>
 8001ab8:	4b28      	ldr	r3, [pc, #160]	; (8001b5c <osMessageQueuePut+0xe0>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d128      	bne.n	8001b12 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d005      	beq.n	8001ad2 <osMessageQueuePut+0x56>
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d002      	beq.n	8001ad2 <osMessageQueuePut+0x56>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8001ad2:	f06f 0303 	mvn.w	r3, #3
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001ad8:	e039      	b.n	8001b4e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8001ade:	f107 0210 	add.w	r2, r7, #16
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	68b9      	ldr	r1, [r7, #8]
 8001ae6:	6a38      	ldr	r0, [r7, #32]
 8001ae8:	f000 fc02 	bl	80022f0 <xQueueGenericSendFromISR>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d003      	beq.n	8001afa <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8001af2:	f06f 0302 	mvn.w	r3, #2
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001af8:	e029      	b.n	8001b4e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d026      	beq.n	8001b4e <osMessageQueuePut+0xd2>
 8001b00:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <osMessageQueuePut+0xe4>)
 8001b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	f3bf 8f4f 	dsb	sy
 8001b0c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001b10:	e01d      	b.n	8001b4e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d002      	beq.n	8001b1e <osMessageQueuePut+0xa2>
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d103      	bne.n	8001b26 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8001b1e:	f06f 0303 	mvn.w	r3, #3
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
 8001b24:	e014      	b.n	8001b50 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8001b26:	2300      	movs	r3, #0
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	68b9      	ldr	r1, [r7, #8]
 8001b2c:	6a38      	ldr	r0, [r7, #32]
 8001b2e:	f000 fae5 	bl	80020fc <xQueueGenericSend>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d00b      	beq.n	8001b50 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8001b3e:	f06f 0301 	mvn.w	r3, #1
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
 8001b44:	e004      	b.n	8001b50 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8001b46:	f06f 0302 	mvn.w	r3, #2
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b4c:	e000      	b.n	8001b50 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001b4e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3728      	adds	r7, #40	; 0x28
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	2000002c 	.word	0x2000002c
 8001b60:	e000ed04 	.word	0xe000ed04

08001b64 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	; 0x28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
 8001b70:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8001b76:	2300      	movs	r3, #0
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b7a:	f3ef 8305 	mrs	r3, IPSR
 8001b7e:	61fb      	str	r3, [r7, #28]
  return(result);
 8001b80:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10f      	bne.n	8001ba6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b86:	f3ef 8310 	mrs	r3, PRIMASK
 8001b8a:	61bb      	str	r3, [r7, #24]
  return(result);
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d105      	bne.n	8001b9e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001b92:	f3ef 8311 	mrs	r3, BASEPRI
 8001b96:	617b      	str	r3, [r7, #20]
  return(result);
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d02c      	beq.n	8001bf8 <osMessageQueueGet+0x94>
 8001b9e:	4b28      	ldr	r3, [pc, #160]	; (8001c40 <osMessageQueueGet+0xdc>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d128      	bne.n	8001bf8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d005      	beq.n	8001bb8 <osMessageQueueGet+0x54>
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <osMessageQueueGet+0x54>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8001bb8:	f06f 0303 	mvn.w	r3, #3
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001bbe:	e038      	b.n	8001c32 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8001bc4:	f107 0310 	add.w	r3, r7, #16
 8001bc8:	461a      	mov	r2, r3
 8001bca:	68b9      	ldr	r1, [r7, #8]
 8001bcc:	6a38      	ldr	r0, [r7, #32]
 8001bce:	f000 fcff 	bl	80025d0 <xQueueReceiveFromISR>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d003      	beq.n	8001be0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8001bd8:	f06f 0302 	mvn.w	r3, #2
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001bde:	e028      	b.n	8001c32 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d025      	beq.n	8001c32 <osMessageQueueGet+0xce>
 8001be6:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <osMessageQueueGet+0xe0>)
 8001be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	f3bf 8f4f 	dsb	sy
 8001bf2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001bf6:	e01c      	b.n	8001c32 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d002      	beq.n	8001c04 <osMessageQueueGet+0xa0>
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d103      	bne.n	8001c0c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8001c04:	f06f 0303 	mvn.w	r3, #3
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
 8001c0a:	e013      	b.n	8001c34 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	68b9      	ldr	r1, [r7, #8]
 8001c10:	6a38      	ldr	r0, [r7, #32]
 8001c12:	f000 fc01 	bl	8002418 <xQueueReceive>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d00b      	beq.n	8001c34 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8001c22:	f06f 0301 	mvn.w	r3, #1
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
 8001c28:	e004      	b.n	8001c34 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8001c2a:	f06f 0302 	mvn.w	r3, #2
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c30:	e000      	b.n	8001c34 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001c32:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3728      	adds	r7, #40	; 0x28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	2000002c 	.word	0x2000002c
 8001c44:	e000ed04 	.word	0xe000ed04

08001c48 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c54:	f3ef 8305 	mrs	r3, IPSR
 8001c58:	617b      	str	r3, [r7, #20]
  return(result);
 8001c5a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10f      	bne.n	8001c80 <osMessageQueueReset+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c60:	f3ef 8310 	mrs	r3, PRIMASK
 8001c64:	613b      	str	r3, [r7, #16]
  return(result);
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d105      	bne.n	8001c78 <osMessageQueueReset+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001c6c:	f3ef 8311 	mrs	r3, BASEPRI
 8001c70:	60fb      	str	r3, [r7, #12]
  return(result);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d007      	beq.n	8001c88 <osMessageQueueReset+0x40>
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <osMessageQueueReset+0x64>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d103      	bne.n	8001c88 <osMessageQueueReset+0x40>
    stat = osErrorISR;
 8001c80:	f06f 0305 	mvn.w	r3, #5
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	e00c      	b.n	8001ca2 <osMessageQueueReset+0x5a>
  }
  else if (hQueue == NULL) {
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d103      	bne.n	8001c96 <osMessageQueueReset+0x4e>
    stat = osErrorParameter;
 8001c8e:	f06f 0303 	mvn.w	r3, #3
 8001c92:	61fb      	str	r3, [r7, #28]
 8001c94:	e005      	b.n	8001ca2 <osMessageQueueReset+0x5a>
  }
  else {
    stat = osOK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
    (void)xQueueReset (hQueue);
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	69b8      	ldr	r0, [r7, #24]
 8001c9e:	f000 f8ef 	bl	8001e80 <xQueueGenericReset>
  }

  return (stat);
 8001ca2:	69fb      	ldr	r3, [r7, #28]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3720      	adds	r7, #32
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	2000002c 	.word	0x2000002c

08001cb0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4a07      	ldr	r2, [pc, #28]	; (8001cdc <vApplicationGetIdleTaskMemory+0x2c>)
 8001cc0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	4a06      	ldr	r2, [pc, #24]	; (8001ce0 <vApplicationGetIdleTaskMemory+0x30>)
 8001cc6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2280      	movs	r2, #128	; 0x80
 8001ccc:	601a      	str	r2, [r3, #0]
}
 8001cce:	bf00      	nop
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20000030 	.word	0x20000030
 8001ce0:	2000008c 	.word	0x2000008c

08001ce4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4a07      	ldr	r2, [pc, #28]	; (8001d10 <vApplicationGetTimerTaskMemory+0x2c>)
 8001cf4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	4a06      	ldr	r2, [pc, #24]	; (8001d14 <vApplicationGetTimerTaskMemory+0x30>)
 8001cfa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d02:	601a      	str	r2, [r3, #0]
}
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	2000028c 	.word	0x2000028c
 8001d14:	200002e8 	.word	0x200002e8

08001d18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f103 0208 	add.w	r2, r3, #8
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f103 0208 	add.w	r2, r3, #8
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f103 0208 	add.w	r2, r3, #8
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d72:	b480      	push	{r7}
 8001d74:	b085      	sub	sp, #20
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	601a      	str	r2, [r3, #0]
}
 8001dae:	bf00      	nop
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b085      	sub	sp, #20
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd0:	d103      	bne.n	8001dda <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	e00c      	b.n	8001df4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	3308      	adds	r3, #8
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	e002      	b.n	8001de8 <vListInsert+0x2e>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d2f6      	bcs.n	8001de2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	1c5a      	adds	r2, r3, #1
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	601a      	str	r2, [r3, #0]
}
 8001e20:	bf00      	nop
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6892      	ldr	r2, [r2, #8]
 8001e42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6852      	ldr	r2, [r2, #4]
 8001e4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d103      	bne.n	8001e60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	1e5a      	subs	r2, r3, #1
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d109      	bne.n	8001ea8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e98:	f383 8811 	msr	BASEPRI, r3
 8001e9c:	f3bf 8f6f 	isb	sy
 8001ea0:	f3bf 8f4f 	dsb	sy
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	e7fe      	b.n	8001ea6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001ea8:	f002 f8d0 	bl	800404c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb4:	68f9      	ldr	r1, [r7, #12]
 8001eb6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001eb8:	fb01 f303 	mul.w	r3, r1, r3
 8001ebc:	441a      	add	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	68f9      	ldr	r1, [r7, #12]
 8001edc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001ede:	fb01 f303 	mul.w	r3, r1, r3
 8001ee2:	441a      	add	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	22ff      	movs	r2, #255	; 0xff
 8001eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	22ff      	movs	r2, #255	; 0xff
 8001ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d114      	bne.n	8001f28 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d01a      	beq.n	8001f3c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	3310      	adds	r3, #16
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f001 f99c 	bl	8003248 <xTaskRemoveFromEventList>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d012      	beq.n	8001f3c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001f16:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <xQueueGenericReset+0xcc>)
 8001f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	f3bf 8f4f 	dsb	sy
 8001f22:	f3bf 8f6f 	isb	sy
 8001f26:	e009      	b.n	8001f3c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	3310      	adds	r3, #16
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff fef3 	bl	8001d18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	3324      	adds	r3, #36	; 0x24
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff feee 	bl	8001d18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001f3c:	f002 f8b4 	bl	80040a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001f40:	2301      	movs	r3, #1
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	e000ed04 	.word	0xe000ed04

08001f50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08e      	sub	sp, #56	; 0x38
 8001f54:	af02      	add	r7, sp, #8
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
 8001f5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d109      	bne.n	8001f78 <xQueueGenericCreateStatic+0x28>
 8001f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f68:	f383 8811 	msr	BASEPRI, r3
 8001f6c:	f3bf 8f6f 	isb	sy
 8001f70:	f3bf 8f4f 	dsb	sy
 8001f74:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f76:	e7fe      	b.n	8001f76 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d109      	bne.n	8001f92 <xQueueGenericCreateStatic+0x42>
 8001f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f82:	f383 8811 	msr	BASEPRI, r3
 8001f86:	f3bf 8f6f 	isb	sy
 8001f8a:	f3bf 8f4f 	dsb	sy
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f90:	e7fe      	b.n	8001f90 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d002      	beq.n	8001f9e <xQueueGenericCreateStatic+0x4e>
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <xQueueGenericCreateStatic+0x52>
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <xQueueGenericCreateStatic+0x54>
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d109      	bne.n	8001fbc <xQueueGenericCreateStatic+0x6c>
 8001fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fac:	f383 8811 	msr	BASEPRI, r3
 8001fb0:	f3bf 8f6f 	isb	sy
 8001fb4:	f3bf 8f4f 	dsb	sy
 8001fb8:	623b      	str	r3, [r7, #32]
 8001fba:	e7fe      	b.n	8001fba <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d102      	bne.n	8001fc8 <xQueueGenericCreateStatic+0x78>
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <xQueueGenericCreateStatic+0x7c>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <xQueueGenericCreateStatic+0x7e>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d109      	bne.n	8001fe6 <xQueueGenericCreateStatic+0x96>
 8001fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd6:	f383 8811 	msr	BASEPRI, r3
 8001fda:	f3bf 8f6f 	isb	sy
 8001fde:	f3bf 8f4f 	dsb	sy
 8001fe2:	61fb      	str	r3, [r7, #28]
 8001fe4:	e7fe      	b.n	8001fe4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001fe6:	2350      	movs	r3, #80	; 0x50
 8001fe8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2b50      	cmp	r3, #80	; 0x50
 8001fee:	d009      	beq.n	8002004 <xQueueGenericCreateStatic+0xb4>
 8001ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff4:	f383 8811 	msr	BASEPRI, r3
 8001ff8:	f3bf 8f6f 	isb	sy
 8001ffc:	f3bf 8f4f 	dsb	sy
 8002000:	61bb      	str	r3, [r7, #24]
 8002002:	e7fe      	b.n	8002002 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002004:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800200a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00d      	beq.n	800202c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002018:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800201c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	4613      	mov	r3, r2
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f000 f844 	bl	80020b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800202c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800202e:	4618      	mov	r0, r3
 8002030:	3730      	adds	r7, #48	; 0x30
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002036:	b580      	push	{r7, lr}
 8002038:	b08a      	sub	sp, #40	; 0x28
 800203a:	af02      	add	r7, sp, #8
 800203c:	60f8      	str	r0, [r7, #12]
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	4613      	mov	r3, r2
 8002042:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d109      	bne.n	800205e <xQueueGenericCreate+0x28>
 800204a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800204e:	f383 8811 	msr	BASEPRI, r3
 8002052:	f3bf 8f6f 	isb	sy
 8002056:	f3bf 8f4f 	dsb	sy
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	e7fe      	b.n	800205c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d102      	bne.n	800206a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002064:	2300      	movs	r3, #0
 8002066:	61fb      	str	r3, [r7, #28]
 8002068:	e004      	b.n	8002074 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	68ba      	ldr	r2, [r7, #8]
 800206e:	fb02 f303 	mul.w	r3, r2, r3
 8002072:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	3350      	adds	r3, #80	; 0x50
 8002078:	4618      	mov	r0, r3
 800207a:	f002 f901 	bl	8004280 <pvPortMalloc>
 800207e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d011      	beq.n	80020aa <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	3350      	adds	r3, #80	; 0x50
 800208e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002098:	79fa      	ldrb	r2, [r7, #7]
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	4613      	mov	r3, r2
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	68b9      	ldr	r1, [r7, #8]
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f000 f805 	bl	80020b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80020aa:	69bb      	ldr	r3, [r7, #24]
	}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3720      	adds	r7, #32
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
 80020c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d103      	bne.n	80020d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	e002      	b.n	80020d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80020e2:	2101      	movs	r1, #1
 80020e4:	69b8      	ldr	r0, [r7, #24]
 80020e6:	f7ff fecb 	bl	8001e80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	78fa      	ldrb	r2, [r7, #3]
 80020ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80020f2:	bf00      	nop
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08e      	sub	sp, #56	; 0x38
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800210a:	2300      	movs	r3, #0
 800210c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002114:	2b00      	cmp	r3, #0
 8002116:	d109      	bne.n	800212c <xQueueGenericSend+0x30>
 8002118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800211c:	f383 8811 	msr	BASEPRI, r3
 8002120:	f3bf 8f6f 	isb	sy
 8002124:	f3bf 8f4f 	dsb	sy
 8002128:	62bb      	str	r3, [r7, #40]	; 0x28
 800212a:	e7fe      	b.n	800212a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d103      	bne.n	800213a <xQueueGenericSend+0x3e>
 8002132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <xQueueGenericSend+0x42>
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <xQueueGenericSend+0x44>
 800213e:	2300      	movs	r3, #0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d109      	bne.n	8002158 <xQueueGenericSend+0x5c>
 8002144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002148:	f383 8811 	msr	BASEPRI, r3
 800214c:	f3bf 8f6f 	isb	sy
 8002150:	f3bf 8f4f 	dsb	sy
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
 8002156:	e7fe      	b.n	8002156 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d103      	bne.n	8002166 <xQueueGenericSend+0x6a>
 800215e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002162:	2b01      	cmp	r3, #1
 8002164:	d101      	bne.n	800216a <xQueueGenericSend+0x6e>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <xQueueGenericSend+0x70>
 800216a:	2300      	movs	r3, #0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d109      	bne.n	8002184 <xQueueGenericSend+0x88>
 8002170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002174:	f383 8811 	msr	BASEPRI, r3
 8002178:	f3bf 8f6f 	isb	sy
 800217c:	f3bf 8f4f 	dsb	sy
 8002180:	623b      	str	r3, [r7, #32]
 8002182:	e7fe      	b.n	8002182 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002184:	f001 fa16 	bl	80035b4 <xTaskGetSchedulerState>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d102      	bne.n	8002194 <xQueueGenericSend+0x98>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <xQueueGenericSend+0x9c>
 8002194:	2301      	movs	r3, #1
 8002196:	e000      	b.n	800219a <xQueueGenericSend+0x9e>
 8002198:	2300      	movs	r3, #0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d109      	bne.n	80021b2 <xQueueGenericSend+0xb6>
 800219e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a2:	f383 8811 	msr	BASEPRI, r3
 80021a6:	f3bf 8f6f 	isb	sy
 80021aa:	f3bf 8f4f 	dsb	sy
 80021ae:	61fb      	str	r3, [r7, #28]
 80021b0:	e7fe      	b.n	80021b0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80021b2:	f001 ff4b 	bl	800404c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80021b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021be:	429a      	cmp	r2, r3
 80021c0:	d302      	bcc.n	80021c8 <xQueueGenericSend+0xcc>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d129      	bne.n	800221c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	68b9      	ldr	r1, [r7, #8]
 80021cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021ce:	f000 fa7c 	bl	80026ca <prvCopyDataToQueue>
 80021d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d010      	beq.n	80021fe <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021de:	3324      	adds	r3, #36	; 0x24
 80021e0:	4618      	mov	r0, r3
 80021e2:	f001 f831 	bl	8003248 <xTaskRemoveFromEventList>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d013      	beq.n	8002214 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80021ec:	4b3f      	ldr	r3, [pc, #252]	; (80022ec <xQueueGenericSend+0x1f0>)
 80021ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	f3bf 8f4f 	dsb	sy
 80021f8:	f3bf 8f6f 	isb	sy
 80021fc:	e00a      	b.n	8002214 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80021fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002200:	2b00      	cmp	r3, #0
 8002202:	d007      	beq.n	8002214 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002204:	4b39      	ldr	r3, [pc, #228]	; (80022ec <xQueueGenericSend+0x1f0>)
 8002206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	f3bf 8f4f 	dsb	sy
 8002210:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002214:	f001 ff48 	bl	80040a8 <vPortExitCritical>
				return pdPASS;
 8002218:	2301      	movs	r3, #1
 800221a:	e063      	b.n	80022e4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d103      	bne.n	800222a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002222:	f001 ff41 	bl	80040a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002226:	2300      	movs	r3, #0
 8002228:	e05c      	b.n	80022e4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800222a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800222c:	2b00      	cmp	r3, #0
 800222e:	d106      	bne.n	800223e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002230:	f107 0314 	add.w	r3, r7, #20
 8002234:	4618      	mov	r0, r3
 8002236:	f001 f869 	bl	800330c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800223a:	2301      	movs	r3, #1
 800223c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800223e:	f001 ff33 	bl	80040a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002242:	f000 fde5 	bl	8002e10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002246:	f001 ff01 	bl	800404c <vPortEnterCritical>
 800224a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002250:	b25b      	sxtb	r3, r3
 8002252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002256:	d103      	bne.n	8002260 <xQueueGenericSend+0x164>
 8002258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002262:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002266:	b25b      	sxtb	r3, r3
 8002268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226c:	d103      	bne.n	8002276 <xQueueGenericSend+0x17a>
 800226e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002276:	f001 ff17 	bl	80040a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800227a:	1d3a      	adds	r2, r7, #4
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	4611      	mov	r1, r2
 8002282:	4618      	mov	r0, r3
 8002284:	f001 f858 	bl	8003338 <xTaskCheckForTimeOut>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d124      	bne.n	80022d8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800228e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002290:	f000 fb13 	bl	80028ba <prvIsQueueFull>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d018      	beq.n	80022cc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800229a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229c:	3310      	adds	r3, #16
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	4611      	mov	r1, r2
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 ff82 	bl	80031ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80022a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022aa:	f000 fa9e 	bl	80027ea <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80022ae:	f000 fdbd 	bl	8002e2c <xTaskResumeAll>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f47f af7c 	bne.w	80021b2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80022ba:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <xQueueGenericSend+0x1f0>)
 80022bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	f3bf 8f4f 	dsb	sy
 80022c6:	f3bf 8f6f 	isb	sy
 80022ca:	e772      	b.n	80021b2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80022cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022ce:	f000 fa8c 	bl	80027ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80022d2:	f000 fdab 	bl	8002e2c <xTaskResumeAll>
 80022d6:	e76c      	b.n	80021b2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80022d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022da:	f000 fa86 	bl	80027ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80022de:	f000 fda5 	bl	8002e2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80022e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3738      	adds	r7, #56	; 0x38
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	e000ed04 	.word	0xe000ed04

080022f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08e      	sub	sp, #56	; 0x38
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002304:	2b00      	cmp	r3, #0
 8002306:	d109      	bne.n	800231c <xQueueGenericSendFromISR+0x2c>
 8002308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800230c:	f383 8811 	msr	BASEPRI, r3
 8002310:	f3bf 8f6f 	isb	sy
 8002314:	f3bf 8f4f 	dsb	sy
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
 800231a:	e7fe      	b.n	800231a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d103      	bne.n	800232a <xQueueGenericSendFromISR+0x3a>
 8002322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <xQueueGenericSendFromISR+0x3e>
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <xQueueGenericSendFromISR+0x40>
 800232e:	2300      	movs	r3, #0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d109      	bne.n	8002348 <xQueueGenericSendFromISR+0x58>
 8002334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002338:	f383 8811 	msr	BASEPRI, r3
 800233c:	f3bf 8f6f 	isb	sy
 8002340:	f3bf 8f4f 	dsb	sy
 8002344:	623b      	str	r3, [r7, #32]
 8002346:	e7fe      	b.n	8002346 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	2b02      	cmp	r3, #2
 800234c:	d103      	bne.n	8002356 <xQueueGenericSendFromISR+0x66>
 800234e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <xQueueGenericSendFromISR+0x6a>
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <xQueueGenericSendFromISR+0x6c>
 800235a:	2300      	movs	r3, #0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d109      	bne.n	8002374 <xQueueGenericSendFromISR+0x84>
 8002360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002364:	f383 8811 	msr	BASEPRI, r3
 8002368:	f3bf 8f6f 	isb	sy
 800236c:	f3bf 8f4f 	dsb	sy
 8002370:	61fb      	str	r3, [r7, #28]
 8002372:	e7fe      	b.n	8002372 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002374:	f001 ff46 	bl	8004204 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002378:	f3ef 8211 	mrs	r2, BASEPRI
 800237c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002380:	f383 8811 	msr	BASEPRI, r3
 8002384:	f3bf 8f6f 	isb	sy
 8002388:	f3bf 8f4f 	dsb	sy
 800238c:	61ba      	str	r2, [r7, #24]
 800238e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002390:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239c:	429a      	cmp	r2, r3
 800239e:	d302      	bcc.n	80023a6 <xQueueGenericSendFromISR+0xb6>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d12c      	bne.n	8002400 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80023a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	68b9      	ldr	r1, [r7, #8]
 80023b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023b6:	f000 f988 	bl	80026ca <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80023ba:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80023be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c2:	d112      	bne.n	80023ea <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80023c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d016      	beq.n	80023fa <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ce:	3324      	adds	r3, #36	; 0x24
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 ff39 	bl	8003248 <xTaskRemoveFromEventList>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00e      	beq.n	80023fa <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00b      	beq.n	80023fa <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	e007      	b.n	80023fa <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80023ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80023ee:	3301      	adds	r3, #1
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	b25a      	sxtb	r2, r3
 80023f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80023fa:	2301      	movs	r3, #1
 80023fc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80023fe:	e001      	b.n	8002404 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002400:	2300      	movs	r3, #0
 8002402:	637b      	str	r3, [r7, #52]	; 0x34
 8002404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002406:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800240e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002410:	4618      	mov	r0, r3
 8002412:	3738      	adds	r7, #56	; 0x38
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08c      	sub	sp, #48	; 0x30
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002424:	2300      	movs	r3, #0
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800242c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242e:	2b00      	cmp	r3, #0
 8002430:	d109      	bne.n	8002446 <xQueueReceive+0x2e>
	__asm volatile
 8002432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002436:	f383 8811 	msr	BASEPRI, r3
 800243a:	f3bf 8f6f 	isb	sy
 800243e:	f3bf 8f4f 	dsb	sy
 8002442:	623b      	str	r3, [r7, #32]
 8002444:	e7fe      	b.n	8002444 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d103      	bne.n	8002454 <xQueueReceive+0x3c>
 800244c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <xQueueReceive+0x40>
 8002454:	2301      	movs	r3, #1
 8002456:	e000      	b.n	800245a <xQueueReceive+0x42>
 8002458:	2300      	movs	r3, #0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d109      	bne.n	8002472 <xQueueReceive+0x5a>
 800245e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002462:	f383 8811 	msr	BASEPRI, r3
 8002466:	f3bf 8f6f 	isb	sy
 800246a:	f3bf 8f4f 	dsb	sy
 800246e:	61fb      	str	r3, [r7, #28]
 8002470:	e7fe      	b.n	8002470 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002472:	f001 f89f 	bl	80035b4 <xTaskGetSchedulerState>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d102      	bne.n	8002482 <xQueueReceive+0x6a>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <xQueueReceive+0x6e>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <xQueueReceive+0x70>
 8002486:	2300      	movs	r3, #0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d109      	bne.n	80024a0 <xQueueReceive+0x88>
 800248c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002490:	f383 8811 	msr	BASEPRI, r3
 8002494:	f3bf 8f6f 	isb	sy
 8002498:	f3bf 8f4f 	dsb	sy
 800249c:	61bb      	str	r3, [r7, #24]
 800249e:	e7fe      	b.n	800249e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80024a0:	f001 fdd4 	bl	800404c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d01f      	beq.n	80024f0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80024b0:	68b9      	ldr	r1, [r7, #8]
 80024b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024b4:	f000 f973 	bl	800279e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	1e5a      	subs	r2, r3, #1
 80024bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024be:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00f      	beq.n	80024e8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ca:	3310      	adds	r3, #16
 80024cc:	4618      	mov	r0, r3
 80024ce:	f000 febb 	bl	8003248 <xTaskRemoveFromEventList>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d007      	beq.n	80024e8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80024d8:	4b3c      	ldr	r3, [pc, #240]	; (80025cc <xQueueReceive+0x1b4>)
 80024da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	f3bf 8f4f 	dsb	sy
 80024e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80024e8:	f001 fdde 	bl	80040a8 <vPortExitCritical>
				return pdPASS;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e069      	b.n	80025c4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d103      	bne.n	80024fe <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80024f6:	f001 fdd7 	bl	80040a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80024fa:	2300      	movs	r3, #0
 80024fc:	e062      	b.n	80025c4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80024fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002500:	2b00      	cmp	r3, #0
 8002502:	d106      	bne.n	8002512 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002504:	f107 0310 	add.w	r3, r7, #16
 8002508:	4618      	mov	r0, r3
 800250a:	f000 feff 	bl	800330c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800250e:	2301      	movs	r3, #1
 8002510:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002512:	f001 fdc9 	bl	80040a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002516:	f000 fc7b 	bl	8002e10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800251a:	f001 fd97 	bl	800404c <vPortEnterCritical>
 800251e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002520:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002524:	b25b      	sxtb	r3, r3
 8002526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252a:	d103      	bne.n	8002534 <xQueueReceive+0x11c>
 800252c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002536:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800253a:	b25b      	sxtb	r3, r3
 800253c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002540:	d103      	bne.n	800254a <xQueueReceive+0x132>
 8002542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800254a:	f001 fdad 	bl	80040a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800254e:	1d3a      	adds	r2, r7, #4
 8002550:	f107 0310 	add.w	r3, r7, #16
 8002554:	4611      	mov	r1, r2
 8002556:	4618      	mov	r0, r3
 8002558:	f000 feee 	bl	8003338 <xTaskCheckForTimeOut>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d123      	bne.n	80025aa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002562:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002564:	f000 f993 	bl	800288e <prvIsQueueEmpty>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d017      	beq.n	800259e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800256e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002570:	3324      	adds	r3, #36	; 0x24
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	4611      	mov	r1, r2
 8002576:	4618      	mov	r0, r3
 8002578:	f000 fe18 	bl	80031ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800257c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800257e:	f000 f934 	bl	80027ea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002582:	f000 fc53 	bl	8002e2c <xTaskResumeAll>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d189      	bne.n	80024a0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800258c:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <xQueueReceive+0x1b4>)
 800258e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	f3bf 8f4f 	dsb	sy
 8002598:	f3bf 8f6f 	isb	sy
 800259c:	e780      	b.n	80024a0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800259e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025a0:	f000 f923 	bl	80027ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80025a4:	f000 fc42 	bl	8002e2c <xTaskResumeAll>
 80025a8:	e77a      	b.n	80024a0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80025aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025ac:	f000 f91d 	bl	80027ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80025b0:	f000 fc3c 	bl	8002e2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025b6:	f000 f96a 	bl	800288e <prvIsQueueEmpty>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f43f af6f 	beq.w	80024a0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80025c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3730      	adds	r7, #48	; 0x30
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	e000ed04 	.word	0xe000ed04

080025d0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08e      	sub	sp, #56	; 0x38
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80025e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d109      	bne.n	80025fa <xQueueReceiveFromISR+0x2a>
 80025e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ea:	f383 8811 	msr	BASEPRI, r3
 80025ee:	f3bf 8f6f 	isb	sy
 80025f2:	f3bf 8f4f 	dsb	sy
 80025f6:	623b      	str	r3, [r7, #32]
 80025f8:	e7fe      	b.n	80025f8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d103      	bne.n	8002608 <xQueueReceiveFromISR+0x38>
 8002600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <xQueueReceiveFromISR+0x3c>
 8002608:	2301      	movs	r3, #1
 800260a:	e000      	b.n	800260e <xQueueReceiveFromISR+0x3e>
 800260c:	2300      	movs	r3, #0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d109      	bne.n	8002626 <xQueueReceiveFromISR+0x56>
 8002612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002616:	f383 8811 	msr	BASEPRI, r3
 800261a:	f3bf 8f6f 	isb	sy
 800261e:	f3bf 8f4f 	dsb	sy
 8002622:	61fb      	str	r3, [r7, #28]
 8002624:	e7fe      	b.n	8002624 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002626:	f001 fded 	bl	8004204 <vPortValidateInterruptPriority>
	__asm volatile
 800262a:	f3ef 8211 	mrs	r2, BASEPRI
 800262e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002632:	f383 8811 	msr	BASEPRI, r3
 8002636:	f3bf 8f6f 	isb	sy
 800263a:	f3bf 8f4f 	dsb	sy
 800263e:	61ba      	str	r2, [r7, #24]
 8002640:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002642:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002644:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800264c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264e:	2b00      	cmp	r3, #0
 8002650:	d02f      	beq.n	80026b2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002654:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002658:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800265c:	68b9      	ldr	r1, [r7, #8]
 800265e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002660:	f000 f89d 	bl	800279e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002666:	1e5a      	subs	r2, r3, #1
 8002668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800266c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002674:	d112      	bne.n	800269c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d016      	beq.n	80026ac <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800267e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002680:	3310      	adds	r3, #16
 8002682:	4618      	mov	r0, r3
 8002684:	f000 fde0 	bl	8003248 <xTaskRemoveFromEventList>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00e      	beq.n	80026ac <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00b      	beq.n	80026ac <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	e007      	b.n	80026ac <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800269c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026a0:	3301      	adds	r3, #1
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	b25a      	sxtb	r2, r3
 80026a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80026ac:	2301      	movs	r3, #1
 80026ae:	637b      	str	r3, [r7, #52]	; 0x34
 80026b0:	e001      	b.n	80026b6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	637b      	str	r3, [r7, #52]	; 0x34
 80026b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80026c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3738      	adds	r7, #56	; 0x38
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b086      	sub	sp, #24
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	60f8      	str	r0, [r7, #12]
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026de:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10d      	bne.n	8002704 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d14d      	bne.n	800278c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 ff7b 	bl	80035f0 <xTaskPriorityDisinherit>
 80026fa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	609a      	str	r2, [r3, #8]
 8002702:	e043      	b.n	800278c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d119      	bne.n	800273e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6858      	ldr	r0, [r3, #4]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	461a      	mov	r2, r3
 8002714:	68b9      	ldr	r1, [r7, #8]
 8002716:	f001 ffad 	bl	8004674 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	441a      	add	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	429a      	cmp	r2, r3
 8002732:	d32b      	bcc.n	800278c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	605a      	str	r2, [r3, #4]
 800273c:	e026      	b.n	800278c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	68d8      	ldr	r0, [r3, #12]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	461a      	mov	r2, r3
 8002748:	68b9      	ldr	r1, [r7, #8]
 800274a:	f001 ff93 	bl	8004674 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	425b      	negs	r3, r3
 8002758:	441a      	add	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d207      	bcs.n	800277a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	425b      	negs	r3, r3
 8002774:	441a      	add	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b02      	cmp	r3, #2
 800277e:	d105      	bne.n	800278c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d002      	beq.n	800278c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	3b01      	subs	r3, #1
 800278a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1c5a      	adds	r2, r3, #1
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002794:	697b      	ldr	r3, [r7, #20]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d018      	beq.n	80027e2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	441a      	add	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d303      	bcc.n	80027d2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68d9      	ldr	r1, [r3, #12]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	461a      	mov	r2, r3
 80027dc:	6838      	ldr	r0, [r7, #0]
 80027de:	f001 ff49 	bl	8004674 <memcpy>
	}
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b084      	sub	sp, #16
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80027f2:	f001 fc2b 	bl	800404c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027fc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80027fe:	e011      	b.n	8002824 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	2b00      	cmp	r3, #0
 8002806:	d012      	beq.n	800282e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3324      	adds	r3, #36	; 0x24
 800280c:	4618      	mov	r0, r3
 800280e:	f000 fd1b 	bl	8003248 <xTaskRemoveFromEventList>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002818:	f000 fdee 	bl	80033f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800281c:	7bfb      	ldrb	r3, [r7, #15]
 800281e:	3b01      	subs	r3, #1
 8002820:	b2db      	uxtb	r3, r3
 8002822:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002828:	2b00      	cmp	r3, #0
 800282a:	dce9      	bgt.n	8002800 <prvUnlockQueue+0x16>
 800282c:	e000      	b.n	8002830 <prvUnlockQueue+0x46>
					break;
 800282e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	22ff      	movs	r2, #255	; 0xff
 8002834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002838:	f001 fc36 	bl	80040a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800283c:	f001 fc06 	bl	800404c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002846:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002848:	e011      	b.n	800286e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d012      	beq.n	8002878 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3310      	adds	r3, #16
 8002856:	4618      	mov	r0, r3
 8002858:	f000 fcf6 	bl	8003248 <xTaskRemoveFromEventList>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002862:	f000 fdc9 	bl	80033f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002866:	7bbb      	ldrb	r3, [r7, #14]
 8002868:	3b01      	subs	r3, #1
 800286a:	b2db      	uxtb	r3, r3
 800286c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800286e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002872:	2b00      	cmp	r3, #0
 8002874:	dce9      	bgt.n	800284a <prvUnlockQueue+0x60>
 8002876:	e000      	b.n	800287a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002878:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	22ff      	movs	r2, #255	; 0xff
 800287e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002882:	f001 fc11 	bl	80040a8 <vPortExitCritical>
}
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b084      	sub	sp, #16
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002896:	f001 fbd9 	bl	800404c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d102      	bne.n	80028a8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80028a2:	2301      	movs	r3, #1
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	e001      	b.n	80028ac <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80028a8:	2300      	movs	r3, #0
 80028aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80028ac:	f001 fbfc 	bl	80040a8 <vPortExitCritical>

	return xReturn;
 80028b0:	68fb      	ldr	r3, [r7, #12]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80028c2:	f001 fbc3 	bl	800404c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d102      	bne.n	80028d8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80028d2:	2301      	movs	r3, #1
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	e001      	b.n	80028dc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80028d8:	2300      	movs	r3, #0
 80028da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80028dc:	f001 fbe4 	bl	80040a8 <vPortExitCritical>

	return xReturn;
 80028e0:	68fb      	ldr	r3, [r7, #12]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
	...

080028ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	e014      	b.n	8002926 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80028fc:	4a0e      	ldr	r2, [pc, #56]	; (8002938 <vQueueAddToRegistry+0x4c>)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10b      	bne.n	8002920 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002908:	490b      	ldr	r1, [pc, #44]	; (8002938 <vQueueAddToRegistry+0x4c>)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002912:	4a09      	ldr	r2, [pc, #36]	; (8002938 <vQueueAddToRegistry+0x4c>)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4413      	add	r3, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800291e:	e005      	b.n	800292c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	3301      	adds	r3, #1
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2b07      	cmp	r3, #7
 800292a:	d9e7      	bls.n	80028fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800292c:	bf00      	nop
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	2000496c 	.word	0x2000496c

0800293c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800294c:	f001 fb7e 	bl	800404c <vPortEnterCritical>
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002956:	b25b      	sxtb	r3, r3
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295c:	d103      	bne.n	8002966 <vQueueWaitForMessageRestricted+0x2a>
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800296c:	b25b      	sxtb	r3, r3
 800296e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002972:	d103      	bne.n	800297c <vQueueWaitForMessageRestricted+0x40>
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800297c:	f001 fb94 	bl	80040a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002984:	2b00      	cmp	r3, #0
 8002986:	d106      	bne.n	8002996 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	3324      	adds	r3, #36	; 0x24
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	68b9      	ldr	r1, [r7, #8]
 8002990:	4618      	mov	r0, r3
 8002992:	f000 fc2f 	bl	80031f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002996:	6978      	ldr	r0, [r7, #20]
 8002998:	f7ff ff27 	bl	80027ea <prvUnlockQueue>
	}
 800299c:	bf00      	nop
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08e      	sub	sp, #56	; 0x38
 80029a8:	af04      	add	r7, sp, #16
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80029b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d109      	bne.n	80029cc <xTaskCreateStatic+0x28>
	__asm volatile
 80029b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029bc:	f383 8811 	msr	BASEPRI, r3
 80029c0:	f3bf 8f6f 	isb	sy
 80029c4:	f3bf 8f4f 	dsb	sy
 80029c8:	623b      	str	r3, [r7, #32]
 80029ca:	e7fe      	b.n	80029ca <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80029cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d109      	bne.n	80029e6 <xTaskCreateStatic+0x42>
 80029d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d6:	f383 8811 	msr	BASEPRI, r3
 80029da:	f3bf 8f6f 	isb	sy
 80029de:	f3bf 8f4f 	dsb	sy
 80029e2:	61fb      	str	r3, [r7, #28]
 80029e4:	e7fe      	b.n	80029e4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80029e6:	235c      	movs	r3, #92	; 0x5c
 80029e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	2b5c      	cmp	r3, #92	; 0x5c
 80029ee:	d009      	beq.n	8002a04 <xTaskCreateStatic+0x60>
 80029f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f4:	f383 8811 	msr	BASEPRI, r3
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	f3bf 8f4f 	dsb	sy
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	e7fe      	b.n	8002a02 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002a04:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d01e      	beq.n	8002a4a <xTaskCreateStatic+0xa6>
 8002a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d01b      	beq.n	8002a4a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a14:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a1a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002a24:	2300      	movs	r3, #0
 8002a26:	9303      	str	r3, [sp, #12]
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	9302      	str	r3, [sp, #8]
 8002a2c:	f107 0314 	add.w	r3, r7, #20
 8002a30:	9301      	str	r3, [sp, #4]
 8002a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	68b9      	ldr	r1, [r7, #8]
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 f850 	bl	8002ae2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a44:	f000 f8dc 	bl	8002c00 <prvAddNewTaskToReadyList>
 8002a48:	e001      	b.n	8002a4e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002a4e:	697b      	ldr	r3, [r7, #20]
	}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3728      	adds	r7, #40	; 0x28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b08c      	sub	sp, #48	; 0x30
 8002a5c:	af04      	add	r7, sp, #16
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	4613      	mov	r3, r2
 8002a66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002a68:	88fb      	ldrh	r3, [r7, #6]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f001 fc07 	bl	8004280 <pvPortMalloc>
 8002a72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00e      	beq.n	8002a98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002a7a:	205c      	movs	r0, #92	; 0x5c
 8002a7c:	f001 fc00 	bl	8004280 <pvPortMalloc>
 8002a80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	631a      	str	r2, [r3, #48]	; 0x30
 8002a8e:	e005      	b.n	8002a9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002a90:	6978      	ldr	r0, [r7, #20]
 8002a92:	f001 fcb7 	bl	8004404 <vPortFree>
 8002a96:	e001      	b.n	8002a9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d017      	beq.n	8002ad2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002aaa:	88fa      	ldrh	r2, [r7, #6]
 8002aac:	2300      	movs	r3, #0
 8002aae:	9303      	str	r3, [sp, #12]
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	9302      	str	r3, [sp, #8]
 8002ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab6:	9301      	str	r3, [sp, #4]
 8002ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	68b9      	ldr	r1, [r7, #8]
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 f80e 	bl	8002ae2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ac6:	69f8      	ldr	r0, [r7, #28]
 8002ac8:	f000 f89a 	bl	8002c00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002acc:	2301      	movs	r3, #1
 8002ace:	61bb      	str	r3, [r7, #24]
 8002ad0:	e002      	b.n	8002ad8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002ad8:	69bb      	ldr	r3, [r7, #24]
	}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3720      	adds	r7, #32
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b088      	sub	sp, #32
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	461a      	mov	r2, r3
 8002afa:	21a5      	movs	r1, #165	; 0xa5
 8002afc:	f001 fdc5 	bl	800468a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	f023 0307 	bic.w	r3, r3, #7
 8002b18:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d009      	beq.n	8002b38 <prvInitialiseNewTask+0x56>
 8002b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b28:	f383 8811 	msr	BASEPRI, r3
 8002b2c:	f3bf 8f6f 	isb	sy
 8002b30:	f3bf 8f4f 	dsb	sy
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	e7fe      	b.n	8002b36 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d01f      	beq.n	8002b7e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61fb      	str	r3, [r7, #28]
 8002b42:	e012      	b.n	8002b6a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b44:	68ba      	ldr	r2, [r7, #8]
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	4413      	add	r3, r2
 8002b4a:	7819      	ldrb	r1, [r3, #0]
 8002b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	4413      	add	r3, r2
 8002b52:	3334      	adds	r3, #52	; 0x34
 8002b54:	460a      	mov	r2, r1
 8002b56:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d006      	beq.n	8002b72 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	3301      	adds	r3, #1
 8002b68:	61fb      	str	r3, [r7, #28]
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	2b0f      	cmp	r3, #15
 8002b6e:	d9e9      	bls.n	8002b44 <prvInitialiseNewTask+0x62>
 8002b70:	e000      	b.n	8002b74 <prvInitialiseNewTask+0x92>
			{
				break;
 8002b72:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b7c:	e003      	b.n	8002b86 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b88:	2b37      	cmp	r3, #55	; 0x37
 8002b8a:	d901      	bls.n	8002b90 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b8c:	2337      	movs	r3, #55	; 0x37
 8002b8e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b94:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b9a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff f8d6 	bl	8001d58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bae:	3318      	adds	r3, #24
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff f8d1 	bl	8001d58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bce:	2200      	movs	r2, #0
 8002bd0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	68f9      	ldr	r1, [r7, #12]
 8002bde:	69b8      	ldr	r0, [r7, #24]
 8002be0:	f001 f90c 	bl	8003dfc <pxPortInitialiseStack>
 8002be4:	4602      	mov	r2, r0
 8002be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d002      	beq.n	8002bf6 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002bf6:	bf00      	nop
 8002bf8:	3720      	adds	r7, #32
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002c08:	f001 fa20 	bl	800404c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002c0c:	4b2d      	ldr	r3, [pc, #180]	; (8002cc4 <prvAddNewTaskToReadyList+0xc4>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	3301      	adds	r3, #1
 8002c12:	4a2c      	ldr	r2, [pc, #176]	; (8002cc4 <prvAddNewTaskToReadyList+0xc4>)
 8002c14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002c16:	4b2c      	ldr	r3, [pc, #176]	; (8002cc8 <prvAddNewTaskToReadyList+0xc8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d109      	bne.n	8002c32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002c1e:	4a2a      	ldr	r2, [pc, #168]	; (8002cc8 <prvAddNewTaskToReadyList+0xc8>)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c24:	4b27      	ldr	r3, [pc, #156]	; (8002cc4 <prvAddNewTaskToReadyList+0xc4>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d110      	bne.n	8002c4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002c2c:	f000 fc08 	bl	8003440 <prvInitialiseTaskLists>
 8002c30:	e00d      	b.n	8002c4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002c32:	4b26      	ldr	r3, [pc, #152]	; (8002ccc <prvAddNewTaskToReadyList+0xcc>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d109      	bne.n	8002c4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c3a:	4b23      	ldr	r3, [pc, #140]	; (8002cc8 <prvAddNewTaskToReadyList+0xc8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d802      	bhi.n	8002c4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002c48:	4a1f      	ldr	r2, [pc, #124]	; (8002cc8 <prvAddNewTaskToReadyList+0xc8>)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002c4e:	4b20      	ldr	r3, [pc, #128]	; (8002cd0 <prvAddNewTaskToReadyList+0xd0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	3301      	adds	r3, #1
 8002c54:	4a1e      	ldr	r2, [pc, #120]	; (8002cd0 <prvAddNewTaskToReadyList+0xd0>)
 8002c56:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002c58:	4b1d      	ldr	r3, [pc, #116]	; (8002cd0 <prvAddNewTaskToReadyList+0xd0>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c64:	4b1b      	ldr	r3, [pc, #108]	; (8002cd4 <prvAddNewTaskToReadyList+0xd4>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d903      	bls.n	8002c74 <prvAddNewTaskToReadyList+0x74>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c70:	4a18      	ldr	r2, [pc, #96]	; (8002cd4 <prvAddNewTaskToReadyList+0xd4>)
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4a15      	ldr	r2, [pc, #84]	; (8002cd8 <prvAddNewTaskToReadyList+0xd8>)
 8002c82:	441a      	add	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3304      	adds	r3, #4
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	f7ff f871 	bl	8001d72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002c90:	f001 fa0a 	bl	80040a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002c94:	4b0d      	ldr	r3, [pc, #52]	; (8002ccc <prvAddNewTaskToReadyList+0xcc>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00e      	beq.n	8002cba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c9c:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <prvAddNewTaskToReadyList+0xc8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d207      	bcs.n	8002cba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002caa:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <prvAddNewTaskToReadyList+0xdc>)
 8002cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	f3bf 8f4f 	dsb	sy
 8002cb6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20000bbc 	.word	0x20000bbc
 8002cc8:	200006e8 	.word	0x200006e8
 8002ccc:	20000bc8 	.word	0x20000bc8
 8002cd0:	20000bd8 	.word	0x20000bd8
 8002cd4:	20000bc4 	.word	0x20000bc4
 8002cd8:	200006ec 	.word	0x200006ec
 8002cdc:	e000ed04 	.word	0xe000ed04

08002ce0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d016      	beq.n	8002d20 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002cf2:	4b13      	ldr	r3, [pc, #76]	; (8002d40 <vTaskDelay+0x60>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d009      	beq.n	8002d0e <vTaskDelay+0x2e>
 8002cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfe:	f383 8811 	msr	BASEPRI, r3
 8002d02:	f3bf 8f6f 	isb	sy
 8002d06:	f3bf 8f4f 	dsb	sy
 8002d0a:	60bb      	str	r3, [r7, #8]
 8002d0c:	e7fe      	b.n	8002d0c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002d0e:	f000 f87f 	bl	8002e10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002d12:	2100      	movs	r1, #0
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 fcd7 	bl	80036c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002d1a:	f000 f887 	bl	8002e2c <xTaskResumeAll>
 8002d1e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d107      	bne.n	8002d36 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002d26:	4b07      	ldr	r3, [pc, #28]	; (8002d44 <vTaskDelay+0x64>)
 8002d28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	f3bf 8f4f 	dsb	sy
 8002d32:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002d36:	bf00      	nop
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000be4 	.word	0x20000be4
 8002d44:	e000ed04 	.word	0xe000ed04

08002d48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b08a      	sub	sp, #40	; 0x28
 8002d4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002d56:	463a      	mov	r2, r7
 8002d58:	1d39      	adds	r1, r7, #4
 8002d5a:	f107 0308 	add.w	r3, r7, #8
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe ffa6 	bl	8001cb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002d64:	6839      	ldr	r1, [r7, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	9202      	str	r2, [sp, #8]
 8002d6c:	9301      	str	r3, [sp, #4]
 8002d6e:	2300      	movs	r3, #0
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	2300      	movs	r3, #0
 8002d74:	460a      	mov	r2, r1
 8002d76:	4920      	ldr	r1, [pc, #128]	; (8002df8 <vTaskStartScheduler+0xb0>)
 8002d78:	4820      	ldr	r0, [pc, #128]	; (8002dfc <vTaskStartScheduler+0xb4>)
 8002d7a:	f7ff fe13 	bl	80029a4 <xTaskCreateStatic>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	4b1f      	ldr	r3, [pc, #124]	; (8002e00 <vTaskStartScheduler+0xb8>)
 8002d82:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002d84:	4b1e      	ldr	r3, [pc, #120]	; (8002e00 <vTaskStartScheduler+0xb8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	617b      	str	r3, [r7, #20]
 8002d90:	e001      	b.n	8002d96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d102      	bne.n	8002da2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002d9c:	f000 fce8 	bl	8003770 <xTimerCreateTimerTask>
 8002da0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d115      	bne.n	8002dd4 <vTaskStartScheduler+0x8c>
 8002da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dac:	f383 8811 	msr	BASEPRI, r3
 8002db0:	f3bf 8f6f 	isb	sy
 8002db4:	f3bf 8f4f 	dsb	sy
 8002db8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002dba:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <vTaskStartScheduler+0xbc>)
 8002dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002dc2:	4b11      	ldr	r3, [pc, #68]	; (8002e08 <vTaskStartScheduler+0xc0>)
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002dc8:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <vTaskStartScheduler+0xc4>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002dce:	f001 f89f 	bl	8003f10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002dd2:	e00d      	b.n	8002df0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dda:	d109      	bne.n	8002df0 <vTaskStartScheduler+0xa8>
 8002ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de0:	f383 8811 	msr	BASEPRI, r3
 8002de4:	f3bf 8f6f 	isb	sy
 8002de8:	f3bf 8f4f 	dsb	sy
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	e7fe      	b.n	8002dee <vTaskStartScheduler+0xa6>
}
 8002df0:	bf00      	nop
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	080046d8 	.word	0x080046d8
 8002dfc:	08003411 	.word	0x08003411
 8002e00:	20000be0 	.word	0x20000be0
 8002e04:	20000bdc 	.word	0x20000bdc
 8002e08:	20000bc8 	.word	0x20000bc8
 8002e0c:	20000bc0 	.word	0x20000bc0

08002e10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002e14:	4b04      	ldr	r3, [pc, #16]	; (8002e28 <vTaskSuspendAll+0x18>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	4a03      	ldr	r2, [pc, #12]	; (8002e28 <vTaskSuspendAll+0x18>)
 8002e1c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002e1e:	bf00      	nop
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	20000be4 	.word	0x20000be4

08002e2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002e36:	2300      	movs	r3, #0
 8002e38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002e3a:	4b41      	ldr	r3, [pc, #260]	; (8002f40 <xTaskResumeAll+0x114>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d109      	bne.n	8002e56 <xTaskResumeAll+0x2a>
 8002e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e46:	f383 8811 	msr	BASEPRI, r3
 8002e4a:	f3bf 8f6f 	isb	sy
 8002e4e:	f3bf 8f4f 	dsb	sy
 8002e52:	603b      	str	r3, [r7, #0]
 8002e54:	e7fe      	b.n	8002e54 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002e56:	f001 f8f9 	bl	800404c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002e5a:	4b39      	ldr	r3, [pc, #228]	; (8002f40 <xTaskResumeAll+0x114>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	4a37      	ldr	r2, [pc, #220]	; (8002f40 <xTaskResumeAll+0x114>)
 8002e62:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e64:	4b36      	ldr	r3, [pc, #216]	; (8002f40 <xTaskResumeAll+0x114>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d162      	bne.n	8002f32 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e6c:	4b35      	ldr	r3, [pc, #212]	; (8002f44 <xTaskResumeAll+0x118>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d05e      	beq.n	8002f32 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e74:	e02f      	b.n	8002ed6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e76:	4b34      	ldr	r3, [pc, #208]	; (8002f48 <xTaskResumeAll+0x11c>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	3318      	adds	r3, #24
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe ffd2 	bl	8001e2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	3304      	adds	r3, #4
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fe ffcd 	bl	8001e2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e96:	4b2d      	ldr	r3, [pc, #180]	; (8002f4c <xTaskResumeAll+0x120>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d903      	bls.n	8002ea6 <xTaskResumeAll+0x7a>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea2:	4a2a      	ldr	r2, [pc, #168]	; (8002f4c <xTaskResumeAll+0x120>)
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eaa:	4613      	mov	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4a27      	ldr	r2, [pc, #156]	; (8002f50 <xTaskResumeAll+0x124>)
 8002eb4:	441a      	add	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	3304      	adds	r3, #4
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	f7fe ff58 	bl	8001d72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec6:	4b23      	ldr	r3, [pc, #140]	; (8002f54 <xTaskResumeAll+0x128>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d302      	bcc.n	8002ed6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002ed0:	4b21      	ldr	r3, [pc, #132]	; (8002f58 <xTaskResumeAll+0x12c>)
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ed6:	4b1c      	ldr	r3, [pc, #112]	; (8002f48 <xTaskResumeAll+0x11c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1cb      	bne.n	8002e76 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002ee4:	f000 fb46 	bl	8003574 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002ee8:	4b1c      	ldr	r3, [pc, #112]	; (8002f5c <xTaskResumeAll+0x130>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d010      	beq.n	8002f16 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002ef4:	f000 f846 	bl	8002f84 <xTaskIncrementTick>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002efe:	4b16      	ldr	r3, [pc, #88]	; (8002f58 <xTaskResumeAll+0x12c>)
 8002f00:	2201      	movs	r2, #1
 8002f02:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1f1      	bne.n	8002ef4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002f10:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <xTaskResumeAll+0x130>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002f16:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <xTaskResumeAll+0x12c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d009      	beq.n	8002f32 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002f22:	4b0f      	ldr	r3, [pc, #60]	; (8002f60 <xTaskResumeAll+0x134>)
 8002f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	f3bf 8f4f 	dsb	sy
 8002f2e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002f32:	f001 f8b9 	bl	80040a8 <vPortExitCritical>

	return xAlreadyYielded;
 8002f36:	68bb      	ldr	r3, [r7, #8]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	20000be4 	.word	0x20000be4
 8002f44:	20000bbc 	.word	0x20000bbc
 8002f48:	20000b7c 	.word	0x20000b7c
 8002f4c:	20000bc4 	.word	0x20000bc4
 8002f50:	200006ec 	.word	0x200006ec
 8002f54:	200006e8 	.word	0x200006e8
 8002f58:	20000bd0 	.word	0x20000bd0
 8002f5c:	20000bcc 	.word	0x20000bcc
 8002f60:	e000ed04 	.word	0xe000ed04

08002f64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002f6a:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <xTaskGetTickCount+0x1c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002f70:	687b      	ldr	r3, [r7, #4]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	20000bc0 	.word	0x20000bc0

08002f84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f8e:	4b4e      	ldr	r3, [pc, #312]	; (80030c8 <xTaskIncrementTick+0x144>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f040 8088 	bne.w	80030a8 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f98:	4b4c      	ldr	r3, [pc, #304]	; (80030cc <xTaskIncrementTick+0x148>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002fa0:	4a4a      	ldr	r2, [pc, #296]	; (80030cc <xTaskIncrementTick+0x148>)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d11f      	bne.n	8002fec <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002fac:	4b48      	ldr	r3, [pc, #288]	; (80030d0 <xTaskIncrementTick+0x14c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d009      	beq.n	8002fca <xTaskIncrementTick+0x46>
 8002fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fba:	f383 8811 	msr	BASEPRI, r3
 8002fbe:	f3bf 8f6f 	isb	sy
 8002fc2:	f3bf 8f4f 	dsb	sy
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	e7fe      	b.n	8002fc8 <xTaskIncrementTick+0x44>
 8002fca:	4b41      	ldr	r3, [pc, #260]	; (80030d0 <xTaskIncrementTick+0x14c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	4b40      	ldr	r3, [pc, #256]	; (80030d4 <xTaskIncrementTick+0x150>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a3e      	ldr	r2, [pc, #248]	; (80030d0 <xTaskIncrementTick+0x14c>)
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	4a3e      	ldr	r2, [pc, #248]	; (80030d4 <xTaskIncrementTick+0x150>)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6013      	str	r3, [r2, #0]
 8002fde:	4b3e      	ldr	r3, [pc, #248]	; (80030d8 <xTaskIncrementTick+0x154>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	4a3c      	ldr	r2, [pc, #240]	; (80030d8 <xTaskIncrementTick+0x154>)
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	f000 fac4 	bl	8003574 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002fec:	4b3b      	ldr	r3, [pc, #236]	; (80030dc <xTaskIncrementTick+0x158>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d349      	bcc.n	800308a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ff6:	4b36      	ldr	r3, [pc, #216]	; (80030d0 <xTaskIncrementTick+0x14c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d104      	bne.n	800300a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003000:	4b36      	ldr	r3, [pc, #216]	; (80030dc <xTaskIncrementTick+0x158>)
 8003002:	f04f 32ff 	mov.w	r2, #4294967295
 8003006:	601a      	str	r2, [r3, #0]
					break;
 8003008:	e03f      	b.n	800308a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800300a:	4b31      	ldr	r3, [pc, #196]	; (80030d0 <xTaskIncrementTick+0x14c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	429a      	cmp	r2, r3
 8003020:	d203      	bcs.n	800302a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003022:	4a2e      	ldr	r2, [pc, #184]	; (80030dc <xTaskIncrementTick+0x158>)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003028:	e02f      	b.n	800308a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	3304      	adds	r3, #4
 800302e:	4618      	mov	r0, r3
 8003030:	f7fe fefc 	bl	8001e2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003038:	2b00      	cmp	r3, #0
 800303a:	d004      	beq.n	8003046 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	3318      	adds	r3, #24
 8003040:	4618      	mov	r0, r3
 8003042:	f7fe fef3 	bl	8001e2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800304a:	4b25      	ldr	r3, [pc, #148]	; (80030e0 <xTaskIncrementTick+0x15c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d903      	bls.n	800305a <xTaskIncrementTick+0xd6>
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003056:	4a22      	ldr	r2, [pc, #136]	; (80030e0 <xTaskIncrementTick+0x15c>)
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800305e:	4613      	mov	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4a1f      	ldr	r2, [pc, #124]	; (80030e4 <xTaskIncrementTick+0x160>)
 8003068:	441a      	add	r2, r3
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	3304      	adds	r3, #4
 800306e:	4619      	mov	r1, r3
 8003070:	4610      	mov	r0, r2
 8003072:	f7fe fe7e 	bl	8001d72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307a:	4b1b      	ldr	r3, [pc, #108]	; (80030e8 <xTaskIncrementTick+0x164>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003080:	429a      	cmp	r2, r3
 8003082:	d3b8      	bcc.n	8002ff6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003084:	2301      	movs	r3, #1
 8003086:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003088:	e7b5      	b.n	8002ff6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800308a:	4b17      	ldr	r3, [pc, #92]	; (80030e8 <xTaskIncrementTick+0x164>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003090:	4914      	ldr	r1, [pc, #80]	; (80030e4 <xTaskIncrementTick+0x160>)
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d907      	bls.n	80030b2 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80030a2:	2301      	movs	r3, #1
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	e004      	b.n	80030b2 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80030a8:	4b10      	ldr	r3, [pc, #64]	; (80030ec <xTaskIncrementTick+0x168>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3301      	adds	r3, #1
 80030ae:	4a0f      	ldr	r2, [pc, #60]	; (80030ec <xTaskIncrementTick+0x168>)
 80030b0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80030b2:	4b0f      	ldr	r3, [pc, #60]	; (80030f0 <xTaskIncrementTick+0x16c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80030ba:	2301      	movs	r3, #1
 80030bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80030be:	697b      	ldr	r3, [r7, #20]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3718      	adds	r7, #24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	20000be4 	.word	0x20000be4
 80030cc:	20000bc0 	.word	0x20000bc0
 80030d0:	20000b74 	.word	0x20000b74
 80030d4:	20000b78 	.word	0x20000b78
 80030d8:	20000bd4 	.word	0x20000bd4
 80030dc:	20000bdc 	.word	0x20000bdc
 80030e0:	20000bc4 	.word	0x20000bc4
 80030e4:	200006ec 	.word	0x200006ec
 80030e8:	200006e8 	.word	0x200006e8
 80030ec:	20000bcc 	.word	0x20000bcc
 80030f0:	20000bd0 	.word	0x20000bd0

080030f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80030fa:	4b27      	ldr	r3, [pc, #156]	; (8003198 <vTaskSwitchContext+0xa4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003102:	4b26      	ldr	r3, [pc, #152]	; (800319c <vTaskSwitchContext+0xa8>)
 8003104:	2201      	movs	r2, #1
 8003106:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003108:	e040      	b.n	800318c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800310a:	4b24      	ldr	r3, [pc, #144]	; (800319c <vTaskSwitchContext+0xa8>)
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003110:	4b23      	ldr	r3, [pc, #140]	; (80031a0 <vTaskSwitchContext+0xac>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	e00f      	b.n	8003138 <vTaskSwitchContext+0x44>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d109      	bne.n	8003132 <vTaskSwitchContext+0x3e>
 800311e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003122:	f383 8811 	msr	BASEPRI, r3
 8003126:	f3bf 8f6f 	isb	sy
 800312a:	f3bf 8f4f 	dsb	sy
 800312e:	607b      	str	r3, [r7, #4]
 8003130:	e7fe      	b.n	8003130 <vTaskSwitchContext+0x3c>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	3b01      	subs	r3, #1
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	491a      	ldr	r1, [pc, #104]	; (80031a4 <vTaskSwitchContext+0xb0>)
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0e5      	beq.n	8003118 <vTaskSwitchContext+0x24>
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	4613      	mov	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4a13      	ldr	r2, [pc, #76]	; (80031a4 <vTaskSwitchContext+0xb0>)
 8003158:	4413      	add	r3, r2
 800315a:	60bb      	str	r3, [r7, #8]
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	605a      	str	r2, [r3, #4]
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	3308      	adds	r3, #8
 800316e:	429a      	cmp	r2, r3
 8003170:	d104      	bne.n	800317c <vTaskSwitchContext+0x88>
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	605a      	str	r2, [r3, #4]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	4a09      	ldr	r2, [pc, #36]	; (80031a8 <vTaskSwitchContext+0xb4>)
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	4a06      	ldr	r2, [pc, #24]	; (80031a0 <vTaskSwitchContext+0xac>)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6013      	str	r3, [r2, #0]
}
 800318c:	bf00      	nop
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	20000be4 	.word	0x20000be4
 800319c:	20000bd0 	.word	0x20000bd0
 80031a0:	20000bc4 	.word	0x20000bc4
 80031a4:	200006ec 	.word	0x200006ec
 80031a8:	200006e8 	.word	0x200006e8

080031ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d109      	bne.n	80031d0 <vTaskPlaceOnEventList+0x24>
 80031bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c0:	f383 8811 	msr	BASEPRI, r3
 80031c4:	f3bf 8f6f 	isb	sy
 80031c8:	f3bf 8f4f 	dsb	sy
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	e7fe      	b.n	80031ce <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80031d0:	4b07      	ldr	r3, [pc, #28]	; (80031f0 <vTaskPlaceOnEventList+0x44>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	3318      	adds	r3, #24
 80031d6:	4619      	mov	r1, r3
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7fe fdee 	bl	8001dba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80031de:	2101      	movs	r1, #1
 80031e0:	6838      	ldr	r0, [r7, #0]
 80031e2:	f000 fa71 	bl	80036c8 <prvAddCurrentTaskToDelayedList>
}
 80031e6:	bf00      	nop
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	200006e8 	.word	0x200006e8

080031f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d109      	bne.n	800321a <vTaskPlaceOnEventListRestricted+0x26>
 8003206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320a:	f383 8811 	msr	BASEPRI, r3
 800320e:	f3bf 8f6f 	isb	sy
 8003212:	f3bf 8f4f 	dsb	sy
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	e7fe      	b.n	8003218 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800321a:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <vTaskPlaceOnEventListRestricted+0x50>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	3318      	adds	r3, #24
 8003220:	4619      	mov	r1, r3
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f7fe fda5 	bl	8001d72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d002      	beq.n	8003234 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800322e:	f04f 33ff 	mov.w	r3, #4294967295
 8003232:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	68b8      	ldr	r0, [r7, #8]
 8003238:	f000 fa46 	bl	80036c8 <prvAddCurrentTaskToDelayedList>
	}
 800323c:	bf00      	nop
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	200006e8 	.word	0x200006e8

08003248 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d109      	bne.n	8003272 <xTaskRemoveFromEventList+0x2a>
 800325e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003262:	f383 8811 	msr	BASEPRI, r3
 8003266:	f3bf 8f6f 	isb	sy
 800326a:	f3bf 8f4f 	dsb	sy
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	e7fe      	b.n	8003270 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	3318      	adds	r3, #24
 8003276:	4618      	mov	r0, r3
 8003278:	f7fe fdd8 	bl	8001e2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800327c:	4b1d      	ldr	r3, [pc, #116]	; (80032f4 <xTaskRemoveFromEventList+0xac>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d11d      	bne.n	80032c0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	3304      	adds	r3, #4
 8003288:	4618      	mov	r0, r3
 800328a:	f7fe fdcf 	bl	8001e2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003292:	4b19      	ldr	r3, [pc, #100]	; (80032f8 <xTaskRemoveFromEventList+0xb0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d903      	bls.n	80032a2 <xTaskRemoveFromEventList+0x5a>
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329e:	4a16      	ldr	r2, [pc, #88]	; (80032f8 <xTaskRemoveFromEventList+0xb0>)
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4a13      	ldr	r2, [pc, #76]	; (80032fc <xTaskRemoveFromEventList+0xb4>)
 80032b0:	441a      	add	r2, r3
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	3304      	adds	r3, #4
 80032b6:	4619      	mov	r1, r3
 80032b8:	4610      	mov	r0, r2
 80032ba:	f7fe fd5a 	bl	8001d72 <vListInsertEnd>
 80032be:	e005      	b.n	80032cc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	3318      	adds	r3, #24
 80032c4:	4619      	mov	r1, r3
 80032c6:	480e      	ldr	r0, [pc, #56]	; (8003300 <xTaskRemoveFromEventList+0xb8>)
 80032c8:	f7fe fd53 	bl	8001d72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d0:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <xTaskRemoveFromEventList+0xbc>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d905      	bls.n	80032e6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80032da:	2301      	movs	r3, #1
 80032dc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80032de:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <xTaskRemoveFromEventList+0xc0>)
 80032e0:	2201      	movs	r2, #1
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	e001      	b.n	80032ea <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80032e6:	2300      	movs	r3, #0
 80032e8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80032ea:	697b      	ldr	r3, [r7, #20]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	20000be4 	.word	0x20000be4
 80032f8:	20000bc4 	.word	0x20000bc4
 80032fc:	200006ec 	.word	0x200006ec
 8003300:	20000b7c 	.word	0x20000b7c
 8003304:	200006e8 	.word	0x200006e8
 8003308:	20000bd0 	.word	0x20000bd0

0800330c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003314:	4b06      	ldr	r3, [pc, #24]	; (8003330 <vTaskInternalSetTimeOutState+0x24>)
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800331c:	4b05      	ldr	r3, [pc, #20]	; (8003334 <vTaskInternalSetTimeOutState+0x28>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	605a      	str	r2, [r3, #4]
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	20000bd4 	.word	0x20000bd4
 8003334:	20000bc0 	.word	0x20000bc0

08003338 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b088      	sub	sp, #32
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d109      	bne.n	800335c <xTaskCheckForTimeOut+0x24>
 8003348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334c:	f383 8811 	msr	BASEPRI, r3
 8003350:	f3bf 8f6f 	isb	sy
 8003354:	f3bf 8f4f 	dsb	sy
 8003358:	613b      	str	r3, [r7, #16]
 800335a:	e7fe      	b.n	800335a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d109      	bne.n	8003376 <xTaskCheckForTimeOut+0x3e>
 8003362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003366:	f383 8811 	msr	BASEPRI, r3
 800336a:	f3bf 8f6f 	isb	sy
 800336e:	f3bf 8f4f 	dsb	sy
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	e7fe      	b.n	8003374 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003376:	f000 fe69 	bl	800404c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800337a:	4b1d      	ldr	r3, [pc, #116]	; (80033f0 <xTaskCheckForTimeOut+0xb8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003392:	d102      	bne.n	800339a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003394:	2300      	movs	r3, #0
 8003396:	61fb      	str	r3, [r7, #28]
 8003398:	e023      	b.n	80033e2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	4b15      	ldr	r3, [pc, #84]	; (80033f4 <xTaskCheckForTimeOut+0xbc>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d007      	beq.n	80033b6 <xTaskCheckForTimeOut+0x7e>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d302      	bcc.n	80033b6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80033b0:	2301      	movs	r3, #1
 80033b2:	61fb      	str	r3, [r7, #28]
 80033b4:	e015      	b.n	80033e2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d20b      	bcs.n	80033d8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	1ad2      	subs	r2, r2, r3
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7ff ff9d 	bl	800330c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80033d2:	2300      	movs	r3, #0
 80033d4:	61fb      	str	r3, [r7, #28]
 80033d6:	e004      	b.n	80033e2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80033de:	2301      	movs	r3, #1
 80033e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80033e2:	f000 fe61 	bl	80040a8 <vPortExitCritical>

	return xReturn;
 80033e6:	69fb      	ldr	r3, [r7, #28]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3720      	adds	r7, #32
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	20000bc0 	.word	0x20000bc0
 80033f4:	20000bd4 	.word	0x20000bd4

080033f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80033fc:	4b03      	ldr	r3, [pc, #12]	; (800340c <vTaskMissedYield+0x14>)
 80033fe:	2201      	movs	r2, #1
 8003400:	601a      	str	r2, [r3, #0]
}
 8003402:	bf00      	nop
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	20000bd0 	.word	0x20000bd0

08003410 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003418:	f000 f852 	bl	80034c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800341c:	4b06      	ldr	r3, [pc, #24]	; (8003438 <prvIdleTask+0x28>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d9f9      	bls.n	8003418 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003424:	4b05      	ldr	r3, [pc, #20]	; (800343c <prvIdleTask+0x2c>)
 8003426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	f3bf 8f4f 	dsb	sy
 8003430:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003434:	e7f0      	b.n	8003418 <prvIdleTask+0x8>
 8003436:	bf00      	nop
 8003438:	200006ec 	.word	0x200006ec
 800343c:	e000ed04 	.word	0xe000ed04

08003440 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003446:	2300      	movs	r3, #0
 8003448:	607b      	str	r3, [r7, #4]
 800344a:	e00c      	b.n	8003466 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4a12      	ldr	r2, [pc, #72]	; (80034a0 <prvInitialiseTaskLists+0x60>)
 8003458:	4413      	add	r3, r2
 800345a:	4618      	mov	r0, r3
 800345c:	f7fe fc5c 	bl	8001d18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3301      	adds	r3, #1
 8003464:	607b      	str	r3, [r7, #4]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b37      	cmp	r3, #55	; 0x37
 800346a:	d9ef      	bls.n	800344c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800346c:	480d      	ldr	r0, [pc, #52]	; (80034a4 <prvInitialiseTaskLists+0x64>)
 800346e:	f7fe fc53 	bl	8001d18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003472:	480d      	ldr	r0, [pc, #52]	; (80034a8 <prvInitialiseTaskLists+0x68>)
 8003474:	f7fe fc50 	bl	8001d18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003478:	480c      	ldr	r0, [pc, #48]	; (80034ac <prvInitialiseTaskLists+0x6c>)
 800347a:	f7fe fc4d 	bl	8001d18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800347e:	480c      	ldr	r0, [pc, #48]	; (80034b0 <prvInitialiseTaskLists+0x70>)
 8003480:	f7fe fc4a 	bl	8001d18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003484:	480b      	ldr	r0, [pc, #44]	; (80034b4 <prvInitialiseTaskLists+0x74>)
 8003486:	f7fe fc47 	bl	8001d18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800348a:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <prvInitialiseTaskLists+0x78>)
 800348c:	4a05      	ldr	r2, [pc, #20]	; (80034a4 <prvInitialiseTaskLists+0x64>)
 800348e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003490:	4b0a      	ldr	r3, [pc, #40]	; (80034bc <prvInitialiseTaskLists+0x7c>)
 8003492:	4a05      	ldr	r2, [pc, #20]	; (80034a8 <prvInitialiseTaskLists+0x68>)
 8003494:	601a      	str	r2, [r3, #0]
}
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	200006ec 	.word	0x200006ec
 80034a4:	20000b4c 	.word	0x20000b4c
 80034a8:	20000b60 	.word	0x20000b60
 80034ac:	20000b7c 	.word	0x20000b7c
 80034b0:	20000b90 	.word	0x20000b90
 80034b4:	20000ba8 	.word	0x20000ba8
 80034b8:	20000b74 	.word	0x20000b74
 80034bc:	20000b78 	.word	0x20000b78

080034c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034c6:	e019      	b.n	80034fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80034c8:	f000 fdc0 	bl	800404c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034cc:	4b0f      	ldr	r3, [pc, #60]	; (800350c <prvCheckTasksWaitingTermination+0x4c>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3304      	adds	r3, #4
 80034d8:	4618      	mov	r0, r3
 80034da:	f7fe fca7 	bl	8001e2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80034de:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <prvCheckTasksWaitingTermination+0x50>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	4a0a      	ldr	r2, [pc, #40]	; (8003510 <prvCheckTasksWaitingTermination+0x50>)
 80034e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80034e8:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <prvCheckTasksWaitingTermination+0x54>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	3b01      	subs	r3, #1
 80034ee:	4a09      	ldr	r2, [pc, #36]	; (8003514 <prvCheckTasksWaitingTermination+0x54>)
 80034f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80034f2:	f000 fdd9 	bl	80040a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f80e 	bl	8003518 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034fc:	4b05      	ldr	r3, [pc, #20]	; (8003514 <prvCheckTasksWaitingTermination+0x54>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1e1      	bne.n	80034c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003504:	bf00      	nop
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	20000b90 	.word	0x20000b90
 8003510:	20000bbc 	.word	0x20000bbc
 8003514:	20000ba4 	.word	0x20000ba4

08003518 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003526:	2b00      	cmp	r3, #0
 8003528:	d108      	bne.n	800353c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352e:	4618      	mov	r0, r3
 8003530:	f000 ff68 	bl	8004404 <vPortFree>
				vPortFree( pxTCB );
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 ff65 	bl	8004404 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800353a:	e017      	b.n	800356c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003542:	2b01      	cmp	r3, #1
 8003544:	d103      	bne.n	800354e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 ff5c 	bl	8004404 <vPortFree>
	}
 800354c:	e00e      	b.n	800356c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003554:	2b02      	cmp	r3, #2
 8003556:	d009      	beq.n	800356c <prvDeleteTCB+0x54>
 8003558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355c:	f383 8811 	msr	BASEPRI, r3
 8003560:	f3bf 8f6f 	isb	sy
 8003564:	f3bf 8f4f 	dsb	sy
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	e7fe      	b.n	800356a <prvDeleteTCB+0x52>
	}
 800356c:	bf00      	nop
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800357a:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <prvResetNextTaskUnblockTime+0x38>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d104      	bne.n	800358e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003584:	4b0a      	ldr	r3, [pc, #40]	; (80035b0 <prvResetNextTaskUnblockTime+0x3c>)
 8003586:	f04f 32ff 	mov.w	r2, #4294967295
 800358a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800358c:	e008      	b.n	80035a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800358e:	4b07      	ldr	r3, [pc, #28]	; (80035ac <prvResetNextTaskUnblockTime+0x38>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	4a04      	ldr	r2, [pc, #16]	; (80035b0 <prvResetNextTaskUnblockTime+0x3c>)
 800359e:	6013      	str	r3, [r2, #0]
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	20000b74 	.word	0x20000b74
 80035b0:	20000bdc 	.word	0x20000bdc

080035b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80035ba:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <xTaskGetSchedulerState+0x34>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d102      	bne.n	80035c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80035c2:	2301      	movs	r3, #1
 80035c4:	607b      	str	r3, [r7, #4]
 80035c6:	e008      	b.n	80035da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035c8:	4b08      	ldr	r3, [pc, #32]	; (80035ec <xTaskGetSchedulerState+0x38>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d102      	bne.n	80035d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80035d0:	2302      	movs	r3, #2
 80035d2:	607b      	str	r3, [r7, #4]
 80035d4:	e001      	b.n	80035da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80035d6:	2300      	movs	r3, #0
 80035d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80035da:	687b      	ldr	r3, [r7, #4]
	}
 80035dc:	4618      	mov	r0, r3
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	20000bc8 	.word	0x20000bc8
 80035ec:	20000be4 	.word	0x20000be4

080035f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80035fc:	2300      	movs	r3, #0
 80035fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d054      	beq.n	80036b0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003606:	4b2d      	ldr	r3, [pc, #180]	; (80036bc <xTaskPriorityDisinherit+0xcc>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	429a      	cmp	r2, r3
 800360e:	d009      	beq.n	8003624 <xTaskPriorityDisinherit+0x34>
 8003610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003614:	f383 8811 	msr	BASEPRI, r3
 8003618:	f3bf 8f6f 	isb	sy
 800361c:	f3bf 8f4f 	dsb	sy
 8003620:	60fb      	str	r3, [r7, #12]
 8003622:	e7fe      	b.n	8003622 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003628:	2b00      	cmp	r3, #0
 800362a:	d109      	bne.n	8003640 <xTaskPriorityDisinherit+0x50>
 800362c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003630:	f383 8811 	msr	BASEPRI, r3
 8003634:	f3bf 8f6f 	isb	sy
 8003638:	f3bf 8f4f 	dsb	sy
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	e7fe      	b.n	800363e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003644:	1e5a      	subs	r2, r3, #1
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003652:	429a      	cmp	r2, r3
 8003654:	d02c      	beq.n	80036b0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800365a:	2b00      	cmp	r3, #0
 800365c:	d128      	bne.n	80036b0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	3304      	adds	r3, #4
 8003662:	4618      	mov	r0, r3
 8003664:	f7fe fbe2 	bl	8001e2c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003680:	4b0f      	ldr	r3, [pc, #60]	; (80036c0 <xTaskPriorityDisinherit+0xd0>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d903      	bls.n	8003690 <xTaskPriorityDisinherit+0xa0>
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368c:	4a0c      	ldr	r2, [pc, #48]	; (80036c0 <xTaskPriorityDisinherit+0xd0>)
 800368e:	6013      	str	r3, [r2, #0]
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003694:	4613      	mov	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4413      	add	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4a09      	ldr	r2, [pc, #36]	; (80036c4 <xTaskPriorityDisinherit+0xd4>)
 800369e:	441a      	add	r2, r3
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	3304      	adds	r3, #4
 80036a4:	4619      	mov	r1, r3
 80036a6:	4610      	mov	r0, r2
 80036a8:	f7fe fb63 	bl	8001d72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80036ac:	2301      	movs	r3, #1
 80036ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80036b0:	697b      	ldr	r3, [r7, #20]
	}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	200006e8 	.word	0x200006e8
 80036c0:	20000bc4 	.word	0x20000bc4
 80036c4:	200006ec 	.word	0x200006ec

080036c8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80036d2:	4b21      	ldr	r3, [pc, #132]	; (8003758 <prvAddCurrentTaskToDelayedList+0x90>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036d8:	4b20      	ldr	r3, [pc, #128]	; (800375c <prvAddCurrentTaskToDelayedList+0x94>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	3304      	adds	r3, #4
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fe fba4 	bl	8001e2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ea:	d10a      	bne.n	8003702 <prvAddCurrentTaskToDelayedList+0x3a>
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d007      	beq.n	8003702 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036f2:	4b1a      	ldr	r3, [pc, #104]	; (800375c <prvAddCurrentTaskToDelayedList+0x94>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	3304      	adds	r3, #4
 80036f8:	4619      	mov	r1, r3
 80036fa:	4819      	ldr	r0, [pc, #100]	; (8003760 <prvAddCurrentTaskToDelayedList+0x98>)
 80036fc:	f7fe fb39 	bl	8001d72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003700:	e026      	b.n	8003750 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4413      	add	r3, r2
 8003708:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800370a:	4b14      	ldr	r3, [pc, #80]	; (800375c <prvAddCurrentTaskToDelayedList+0x94>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	429a      	cmp	r2, r3
 8003718:	d209      	bcs.n	800372e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800371a:	4b12      	ldr	r3, [pc, #72]	; (8003764 <prvAddCurrentTaskToDelayedList+0x9c>)
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	4b0f      	ldr	r3, [pc, #60]	; (800375c <prvAddCurrentTaskToDelayedList+0x94>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3304      	adds	r3, #4
 8003724:	4619      	mov	r1, r3
 8003726:	4610      	mov	r0, r2
 8003728:	f7fe fb47 	bl	8001dba <vListInsert>
}
 800372c:	e010      	b.n	8003750 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800372e:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	4b0a      	ldr	r3, [pc, #40]	; (800375c <prvAddCurrentTaskToDelayedList+0x94>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	3304      	adds	r3, #4
 8003738:	4619      	mov	r1, r3
 800373a:	4610      	mov	r0, r2
 800373c:	f7fe fb3d 	bl	8001dba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003740:	4b0a      	ldr	r3, [pc, #40]	; (800376c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	429a      	cmp	r2, r3
 8003748:	d202      	bcs.n	8003750 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800374a:	4a08      	ldr	r2, [pc, #32]	; (800376c <prvAddCurrentTaskToDelayedList+0xa4>)
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	6013      	str	r3, [r2, #0]
}
 8003750:	bf00      	nop
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	20000bc0 	.word	0x20000bc0
 800375c:	200006e8 	.word	0x200006e8
 8003760:	20000ba8 	.word	0x20000ba8
 8003764:	20000b78 	.word	0x20000b78
 8003768:	20000b74 	.word	0x20000b74
 800376c:	20000bdc 	.word	0x20000bdc

08003770 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b08a      	sub	sp, #40	; 0x28
 8003774:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003776:	2300      	movs	r3, #0
 8003778:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800377a:	f000 faff 	bl	8003d7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800377e:	4b1c      	ldr	r3, [pc, #112]	; (80037f0 <xTimerCreateTimerTask+0x80>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d021      	beq.n	80037ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003786:	2300      	movs	r3, #0
 8003788:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800378a:	2300      	movs	r3, #0
 800378c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800378e:	1d3a      	adds	r2, r7, #4
 8003790:	f107 0108 	add.w	r1, r7, #8
 8003794:	f107 030c 	add.w	r3, r7, #12
 8003798:	4618      	mov	r0, r3
 800379a:	f7fe faa3 	bl	8001ce4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	9202      	str	r2, [sp, #8]
 80037a6:	9301      	str	r3, [sp, #4]
 80037a8:	2302      	movs	r3, #2
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	2300      	movs	r3, #0
 80037ae:	460a      	mov	r2, r1
 80037b0:	4910      	ldr	r1, [pc, #64]	; (80037f4 <xTimerCreateTimerTask+0x84>)
 80037b2:	4811      	ldr	r0, [pc, #68]	; (80037f8 <xTimerCreateTimerTask+0x88>)
 80037b4:	f7ff f8f6 	bl	80029a4 <xTaskCreateStatic>
 80037b8:	4602      	mov	r2, r0
 80037ba:	4b10      	ldr	r3, [pc, #64]	; (80037fc <xTimerCreateTimerTask+0x8c>)
 80037bc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80037be:	4b0f      	ldr	r3, [pc, #60]	; (80037fc <xTimerCreateTimerTask+0x8c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80037c6:	2301      	movs	r3, #1
 80037c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d109      	bne.n	80037e4 <xTimerCreateTimerTask+0x74>
 80037d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d4:	f383 8811 	msr	BASEPRI, r3
 80037d8:	f3bf 8f6f 	isb	sy
 80037dc:	f3bf 8f4f 	dsb	sy
 80037e0:	613b      	str	r3, [r7, #16]
 80037e2:	e7fe      	b.n	80037e2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80037e4:	697b      	ldr	r3, [r7, #20]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3718      	adds	r7, #24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	20000c18 	.word	0x20000c18
 80037f4:	080046e0 	.word	0x080046e0
 80037f8:	08003931 	.word	0x08003931
 80037fc:	20000c1c 	.word	0x20000c1c

08003800 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08a      	sub	sp, #40	; 0x28
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
 800380c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800380e:	2300      	movs	r3, #0
 8003810:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d109      	bne.n	800382c <xTimerGenericCommand+0x2c>
 8003818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381c:	f383 8811 	msr	BASEPRI, r3
 8003820:	f3bf 8f6f 	isb	sy
 8003824:	f3bf 8f4f 	dsb	sy
 8003828:	623b      	str	r3, [r7, #32]
 800382a:	e7fe      	b.n	800382a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800382c:	4b19      	ldr	r3, [pc, #100]	; (8003894 <xTimerGenericCommand+0x94>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d02a      	beq.n	800388a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2b05      	cmp	r3, #5
 8003844:	dc18      	bgt.n	8003878 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003846:	f7ff feb5 	bl	80035b4 <xTaskGetSchedulerState>
 800384a:	4603      	mov	r3, r0
 800384c:	2b02      	cmp	r3, #2
 800384e:	d109      	bne.n	8003864 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003850:	4b10      	ldr	r3, [pc, #64]	; (8003894 <xTimerGenericCommand+0x94>)
 8003852:	6818      	ldr	r0, [r3, #0]
 8003854:	f107 0110 	add.w	r1, r7, #16
 8003858:	2300      	movs	r3, #0
 800385a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800385c:	f7fe fc4e 	bl	80020fc <xQueueGenericSend>
 8003860:	6278      	str	r0, [r7, #36]	; 0x24
 8003862:	e012      	b.n	800388a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003864:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <xTimerGenericCommand+0x94>)
 8003866:	6818      	ldr	r0, [r3, #0]
 8003868:	f107 0110 	add.w	r1, r7, #16
 800386c:	2300      	movs	r3, #0
 800386e:	2200      	movs	r2, #0
 8003870:	f7fe fc44 	bl	80020fc <xQueueGenericSend>
 8003874:	6278      	str	r0, [r7, #36]	; 0x24
 8003876:	e008      	b.n	800388a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003878:	4b06      	ldr	r3, [pc, #24]	; (8003894 <xTimerGenericCommand+0x94>)
 800387a:	6818      	ldr	r0, [r3, #0]
 800387c:	f107 0110 	add.w	r1, r7, #16
 8003880:	2300      	movs	r3, #0
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	f7fe fd34 	bl	80022f0 <xQueueGenericSendFromISR>
 8003888:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800388c:	4618      	mov	r0, r3
 800388e:	3728      	adds	r7, #40	; 0x28
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	20000c18 	.word	0x20000c18

08003898 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b088      	sub	sp, #32
 800389c:	af02      	add	r7, sp, #8
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038a2:	4b22      	ldr	r3, [pc, #136]	; (800392c <prvProcessExpiredTimer+0x94>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	3304      	adds	r3, #4
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7fe fabb 	bl	8001e2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d021      	beq.n	8003908 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	699a      	ldr	r2, [r3, #24]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	18d1      	adds	r1, r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	6978      	ldr	r0, [r7, #20]
 80038d2:	f000 f8d1 	bl	8003a78 <prvInsertTimerInActiveList>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d01e      	beq.n	800391a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80038dc:	2300      	movs	r3, #0
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	2300      	movs	r3, #0
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	2100      	movs	r1, #0
 80038e6:	6978      	ldr	r0, [r7, #20]
 80038e8:	f7ff ff8a 	bl	8003800 <xTimerGenericCommand>
 80038ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d112      	bne.n	800391a <prvProcessExpiredTimer+0x82>
 80038f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f8:	f383 8811 	msr	BASEPRI, r3
 80038fc:	f3bf 8f6f 	isb	sy
 8003900:	f3bf 8f4f 	dsb	sy
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	e7fe      	b.n	8003906 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800390e:	f023 0301 	bic.w	r3, r3, #1
 8003912:	b2da      	uxtb	r2, r3
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	6978      	ldr	r0, [r7, #20]
 8003920:	4798      	blx	r3
}
 8003922:	bf00      	nop
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	20000c10 	.word	0x20000c10

08003930 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003938:	f107 0308 	add.w	r3, r7, #8
 800393c:	4618      	mov	r0, r3
 800393e:	f000 f857 	bl	80039f0 <prvGetNextExpireTime>
 8003942:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	4619      	mov	r1, r3
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 f803 	bl	8003954 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800394e:	f000 f8d5 	bl	8003afc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003952:	e7f1      	b.n	8003938 <prvTimerTask+0x8>

08003954 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800395e:	f7ff fa57 	bl	8002e10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003962:	f107 0308 	add.w	r3, r7, #8
 8003966:	4618      	mov	r0, r3
 8003968:	f000 f866 	bl	8003a38 <prvSampleTimeNow>
 800396c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d130      	bne.n	80039d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10a      	bne.n	8003990 <prvProcessTimerOrBlockTask+0x3c>
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	429a      	cmp	r2, r3
 8003980:	d806      	bhi.n	8003990 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003982:	f7ff fa53 	bl	8002e2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003986:	68f9      	ldr	r1, [r7, #12]
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7ff ff85 	bl	8003898 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800398e:	e024      	b.n	80039da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d008      	beq.n	80039a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003996:	4b13      	ldr	r3, [pc, #76]	; (80039e4 <prvProcessTimerOrBlockTask+0x90>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <prvProcessTimerOrBlockTask+0x50>
 80039a0:	2301      	movs	r3, #1
 80039a2:	e000      	b.n	80039a6 <prvProcessTimerOrBlockTask+0x52>
 80039a4:	2300      	movs	r3, #0
 80039a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80039a8:	4b0f      	ldr	r3, [pc, #60]	; (80039e8 <prvProcessTimerOrBlockTask+0x94>)
 80039aa:	6818      	ldr	r0, [r3, #0]
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	4619      	mov	r1, r3
 80039b6:	f7fe ffc1 	bl	800293c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80039ba:	f7ff fa37 	bl	8002e2c <xTaskResumeAll>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10a      	bne.n	80039da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80039c4:	4b09      	ldr	r3, [pc, #36]	; (80039ec <prvProcessTimerOrBlockTask+0x98>)
 80039c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	f3bf 8f6f 	isb	sy
}
 80039d4:	e001      	b.n	80039da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80039d6:	f7ff fa29 	bl	8002e2c <xTaskResumeAll>
}
 80039da:	bf00      	nop
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	20000c14 	.word	0x20000c14
 80039e8:	20000c18 	.word	0x20000c18
 80039ec:	e000ed04 	.word	0xe000ed04

080039f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80039f8:	4b0e      	ldr	r3, [pc, #56]	; (8003a34 <prvGetNextExpireTime+0x44>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <prvGetNextExpireTime+0x16>
 8003a02:	2201      	movs	r2, #1
 8003a04:	e000      	b.n	8003a08 <prvGetNextExpireTime+0x18>
 8003a06:	2200      	movs	r2, #0
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d105      	bne.n	8003a20 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a14:	4b07      	ldr	r3, [pc, #28]	; (8003a34 <prvGetNextExpireTime+0x44>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	60fb      	str	r3, [r7, #12]
 8003a1e:	e001      	b.n	8003a24 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003a24:	68fb      	ldr	r3, [r7, #12]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	20000c10 	.word	0x20000c10

08003a38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003a40:	f7ff fa90 	bl	8002f64 <xTaskGetTickCount>
 8003a44:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003a46:	4b0b      	ldr	r3, [pc, #44]	; (8003a74 <prvSampleTimeNow+0x3c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d205      	bcs.n	8003a5c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003a50:	f000 f930 	bl	8003cb4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	e002      	b.n	8003a62 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003a62:	4a04      	ldr	r2, [pc, #16]	; (8003a74 <prvSampleTimeNow+0x3c>)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003a68:	68fb      	ldr	r3, [r7, #12]
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	20000c20 	.word	0x20000c20

08003a78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003a86:	2300      	movs	r3, #0
 8003a88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d812      	bhi.n	8003ac4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	1ad2      	subs	r2, r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d302      	bcc.n	8003ab2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003aac:	2301      	movs	r3, #1
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	e01b      	b.n	8003aea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003ab2:	4b10      	ldr	r3, [pc, #64]	; (8003af4 <prvInsertTimerInActiveList+0x7c>)
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	3304      	adds	r3, #4
 8003aba:	4619      	mov	r1, r3
 8003abc:	4610      	mov	r0, r2
 8003abe:	f7fe f97c 	bl	8001dba <vListInsert>
 8003ac2:	e012      	b.n	8003aea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d206      	bcs.n	8003ada <prvInsertTimerInActiveList+0x62>
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d302      	bcc.n	8003ada <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	617b      	str	r3, [r7, #20]
 8003ad8:	e007      	b.n	8003aea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ada:	4b07      	ldr	r3, [pc, #28]	; (8003af8 <prvInsertTimerInActiveList+0x80>)
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	f7fe f968 	bl	8001dba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003aea:	697b      	ldr	r3, [r7, #20]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3718      	adds	r7, #24
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	20000c14 	.word	0x20000c14
 8003af8:	20000c10 	.word	0x20000c10

08003afc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08e      	sub	sp, #56	; 0x38
 8003b00:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b02:	e0c6      	b.n	8003c92 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	da17      	bge.n	8003b3a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003b0a:	1d3b      	adds	r3, r7, #4
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d109      	bne.n	8003b2a <prvProcessReceivedCommands+0x2e>
 8003b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1a:	f383 8811 	msr	BASEPRI, r3
 8003b1e:	f3bf 8f6f 	isb	sy
 8003b22:	f3bf 8f4f 	dsb	sy
 8003b26:	61fb      	str	r3, [r7, #28]
 8003b28:	e7fe      	b.n	8003b28 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b30:	6850      	ldr	r0, [r2, #4]
 8003b32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b34:	6892      	ldr	r2, [r2, #8]
 8003b36:	4611      	mov	r1, r2
 8003b38:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f2c0 80a7 	blt.w	8003c90 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d004      	beq.n	8003b58 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b50:	3304      	adds	r3, #4
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fe f96a 	bl	8001e2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b58:	463b      	mov	r3, r7
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff ff6c 	bl	8003a38 <prvSampleTimeNow>
 8003b60:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b09      	cmp	r3, #9
 8003b66:	f200 8094 	bhi.w	8003c92 <prvProcessReceivedCommands+0x196>
 8003b6a:	a201      	add	r2, pc, #4	; (adr r2, 8003b70 <prvProcessReceivedCommands+0x74>)
 8003b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b70:	08003b99 	.word	0x08003b99
 8003b74:	08003b99 	.word	0x08003b99
 8003b78:	08003b99 	.word	0x08003b99
 8003b7c:	08003c0b 	.word	0x08003c0b
 8003b80:	08003c1f 	.word	0x08003c1f
 8003b84:	08003c67 	.word	0x08003c67
 8003b88:	08003b99 	.word	0x08003b99
 8003b8c:	08003b99 	.word	0x08003b99
 8003b90:	08003c0b 	.word	0x08003c0b
 8003b94:	08003c1f 	.word	0x08003c1f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b9e:	f043 0301 	orr.w	r3, r3, #1
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	18d1      	adds	r1, r2, r3
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bb8:	f7ff ff5e 	bl	8003a78 <prvInsertTimerInActiveList>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d067      	beq.n	8003c92 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bc8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d05c      	beq.n	8003c92 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	441a      	add	r2, r3
 8003be0:	2300      	movs	r3, #0
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	2300      	movs	r3, #0
 8003be6:	2100      	movs	r1, #0
 8003be8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bea:	f7ff fe09 	bl	8003800 <xTimerGenericCommand>
 8003bee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d14d      	bne.n	8003c92 <prvProcessReceivedCommands+0x196>
 8003bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfa:	f383 8811 	msr	BASEPRI, r3
 8003bfe:	f3bf 8f6f 	isb	sy
 8003c02:	f3bf 8f4f 	dsb	sy
 8003c06:	61bb      	str	r3, [r7, #24]
 8003c08:	e7fe      	b.n	8003c08 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c10:	f023 0301 	bic.w	r3, r3, #1
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003c1c:	e039      	b.n	8003c92 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c24:	f043 0301 	orr.w	r3, r3, #1
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c34:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d109      	bne.n	8003c52 <prvProcessReceivedCommands+0x156>
 8003c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c42:	f383 8811 	msr	BASEPRI, r3
 8003c46:	f3bf 8f6f 	isb	sy
 8003c4a:	f3bf 8f4f 	dsb	sy
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	e7fe      	b.n	8003c50 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c54:	699a      	ldr	r2, [r3, #24]
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	18d1      	adds	r1, r2, r3
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c60:	f7ff ff0a 	bl	8003a78 <prvInsertTimerInActiveList>
					break;
 8003c64:	e015      	b.n	8003c92 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d103      	bne.n	8003c7c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8003c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c76:	f000 fbc5 	bl	8004404 <vPortFree>
 8003c7a:	e00a      	b.n	8003c92 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c82:	f023 0301 	bic.w	r3, r3, #1
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003c8e:	e000      	b.n	8003c92 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003c90:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c92:	4b07      	ldr	r3, [pc, #28]	; (8003cb0 <prvProcessReceivedCommands+0x1b4>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	1d39      	adds	r1, r7, #4
 8003c98:	2200      	movs	r2, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fe fbbc 	bl	8002418 <xQueueReceive>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f47f af2e 	bne.w	8003b04 <prvProcessReceivedCommands+0x8>
	}
}
 8003ca8:	bf00      	nop
 8003caa:	3730      	adds	r7, #48	; 0x30
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	20000c18 	.word	0x20000c18

08003cb4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003cba:	e047      	b.n	8003d4c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003cbc:	4b2d      	ldr	r3, [pc, #180]	; (8003d74 <prvSwitchTimerLists+0xc0>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cc6:	4b2b      	ldr	r3, [pc, #172]	; (8003d74 <prvSwitchTimerLists+0xc0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7fe f8a9 	bl	8001e2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d02d      	beq.n	8003d4c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d90e      	bls.n	8003d20 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d0e:	4b19      	ldr	r3, [pc, #100]	; (8003d74 <prvSwitchTimerLists+0xc0>)
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	3304      	adds	r3, #4
 8003d16:	4619      	mov	r1, r3
 8003d18:	4610      	mov	r0, r2
 8003d1a:	f7fe f84e 	bl	8001dba <vListInsert>
 8003d1e:	e015      	b.n	8003d4c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003d20:	2300      	movs	r3, #0
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	2300      	movs	r3, #0
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	2100      	movs	r1, #0
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f7ff fd68 	bl	8003800 <xTimerGenericCommand>
 8003d30:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d109      	bne.n	8003d4c <prvSwitchTimerLists+0x98>
 8003d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3c:	f383 8811 	msr	BASEPRI, r3
 8003d40:	f3bf 8f6f 	isb	sy
 8003d44:	f3bf 8f4f 	dsb	sy
 8003d48:	603b      	str	r3, [r7, #0]
 8003d4a:	e7fe      	b.n	8003d4a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003d4c:	4b09      	ldr	r3, [pc, #36]	; (8003d74 <prvSwitchTimerLists+0xc0>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1b2      	bne.n	8003cbc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003d56:	4b07      	ldr	r3, [pc, #28]	; (8003d74 <prvSwitchTimerLists+0xc0>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003d5c:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <prvSwitchTimerLists+0xc4>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a04      	ldr	r2, [pc, #16]	; (8003d74 <prvSwitchTimerLists+0xc0>)
 8003d62:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003d64:	4a04      	ldr	r2, [pc, #16]	; (8003d78 <prvSwitchTimerLists+0xc4>)
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	6013      	str	r3, [r2, #0]
}
 8003d6a:	bf00      	nop
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20000c10 	.word	0x20000c10
 8003d78:	20000c14 	.word	0x20000c14

08003d7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003d82:	f000 f963 	bl	800404c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003d86:	4b15      	ldr	r3, [pc, #84]	; (8003ddc <prvCheckForValidListAndQueue+0x60>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d120      	bne.n	8003dd0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003d8e:	4814      	ldr	r0, [pc, #80]	; (8003de0 <prvCheckForValidListAndQueue+0x64>)
 8003d90:	f7fd ffc2 	bl	8001d18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003d94:	4813      	ldr	r0, [pc, #76]	; (8003de4 <prvCheckForValidListAndQueue+0x68>)
 8003d96:	f7fd ffbf 	bl	8001d18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003d9a:	4b13      	ldr	r3, [pc, #76]	; (8003de8 <prvCheckForValidListAndQueue+0x6c>)
 8003d9c:	4a10      	ldr	r2, [pc, #64]	; (8003de0 <prvCheckForValidListAndQueue+0x64>)
 8003d9e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003da0:	4b12      	ldr	r3, [pc, #72]	; (8003dec <prvCheckForValidListAndQueue+0x70>)
 8003da2:	4a10      	ldr	r2, [pc, #64]	; (8003de4 <prvCheckForValidListAndQueue+0x68>)
 8003da4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003da6:	2300      	movs	r3, #0
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	4b11      	ldr	r3, [pc, #68]	; (8003df0 <prvCheckForValidListAndQueue+0x74>)
 8003dac:	4a11      	ldr	r2, [pc, #68]	; (8003df4 <prvCheckForValidListAndQueue+0x78>)
 8003dae:	2110      	movs	r1, #16
 8003db0:	200a      	movs	r0, #10
 8003db2:	f7fe f8cd 	bl	8001f50 <xQueueGenericCreateStatic>
 8003db6:	4602      	mov	r2, r0
 8003db8:	4b08      	ldr	r3, [pc, #32]	; (8003ddc <prvCheckForValidListAndQueue+0x60>)
 8003dba:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003dbc:	4b07      	ldr	r3, [pc, #28]	; (8003ddc <prvCheckForValidListAndQueue+0x60>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d005      	beq.n	8003dd0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003dc4:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <prvCheckForValidListAndQueue+0x60>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	490b      	ldr	r1, [pc, #44]	; (8003df8 <prvCheckForValidListAndQueue+0x7c>)
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fe fd8e 	bl	80028ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003dd0:	f000 f96a 	bl	80040a8 <vPortExitCritical>
}
 8003dd4:	bf00      	nop
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	20000c18 	.word	0x20000c18
 8003de0:	20000be8 	.word	0x20000be8
 8003de4:	20000bfc 	.word	0x20000bfc
 8003de8:	20000c10 	.word	0x20000c10
 8003dec:	20000c14 	.word	0x20000c14
 8003df0:	20000cc4 	.word	0x20000cc4
 8003df4:	20000c24 	.word	0x20000c24
 8003df8:	080046e8 	.word	0x080046e8

08003dfc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	3b04      	subs	r3, #4
 8003e0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	3b04      	subs	r3, #4
 8003e1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f023 0201 	bic.w	r2, r3, #1
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	3b04      	subs	r3, #4
 8003e2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003e2c:	4a0c      	ldr	r2, [pc, #48]	; (8003e60 <pxPortInitialiseStack+0x64>)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	3b14      	subs	r3, #20
 8003e36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	3b04      	subs	r3, #4
 8003e42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f06f 0202 	mvn.w	r2, #2
 8003e4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	3b20      	subs	r3, #32
 8003e50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003e52:	68fb      	ldr	r3, [r7, #12]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	08003e65 	.word	0x08003e65

08003e64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003e6e:	4b11      	ldr	r3, [pc, #68]	; (8003eb4 <prvTaskExitError+0x50>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e76:	d009      	beq.n	8003e8c <prvTaskExitError+0x28>
 8003e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7c:	f383 8811 	msr	BASEPRI, r3
 8003e80:	f3bf 8f6f 	isb	sy
 8003e84:	f3bf 8f4f 	dsb	sy
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	e7fe      	b.n	8003e8a <prvTaskExitError+0x26>
 8003e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e90:	f383 8811 	msr	BASEPRI, r3
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003e9e:	bf00      	nop
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0fc      	beq.n	8003ea0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003ea6:	bf00      	nop
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	2000000c 	.word	0x2000000c
	...

08003ec0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003ec0:	4b07      	ldr	r3, [pc, #28]	; (8003ee0 <pxCurrentTCBConst2>)
 8003ec2:	6819      	ldr	r1, [r3, #0]
 8003ec4:	6808      	ldr	r0, [r1, #0]
 8003ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eca:	f380 8809 	msr	PSP, r0
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	f04f 0000 	mov.w	r0, #0
 8003ed6:	f380 8811 	msr	BASEPRI, r0
 8003eda:	4770      	bx	lr
 8003edc:	f3af 8000 	nop.w

08003ee0 <pxCurrentTCBConst2>:
 8003ee0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ee4:	bf00      	nop
 8003ee6:	bf00      	nop

08003ee8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003ee8:	4808      	ldr	r0, [pc, #32]	; (8003f0c <prvPortStartFirstTask+0x24>)
 8003eea:	6800      	ldr	r0, [r0, #0]
 8003eec:	6800      	ldr	r0, [r0, #0]
 8003eee:	f380 8808 	msr	MSP, r0
 8003ef2:	f04f 0000 	mov.w	r0, #0
 8003ef6:	f380 8814 	msr	CONTROL, r0
 8003efa:	b662      	cpsie	i
 8003efc:	b661      	cpsie	f
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	f3bf 8f6f 	isb	sy
 8003f06:	df00      	svc	0
 8003f08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003f0a:	bf00      	nop
 8003f0c:	e000ed08 	.word	0xe000ed08

08003f10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003f16:	4b44      	ldr	r3, [pc, #272]	; (8004028 <xPortStartScheduler+0x118>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a44      	ldr	r2, [pc, #272]	; (800402c <xPortStartScheduler+0x11c>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d109      	bne.n	8003f34 <xPortStartScheduler+0x24>
 8003f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	613b      	str	r3, [r7, #16]
 8003f32:	e7fe      	b.n	8003f32 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f34:	4b3c      	ldr	r3, [pc, #240]	; (8004028 <xPortStartScheduler+0x118>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a3d      	ldr	r2, [pc, #244]	; (8004030 <xPortStartScheduler+0x120>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d109      	bne.n	8003f52 <xPortStartScheduler+0x42>
 8003f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f42:	f383 8811 	msr	BASEPRI, r3
 8003f46:	f3bf 8f6f 	isb	sy
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	60fb      	str	r3, [r7, #12]
 8003f50:	e7fe      	b.n	8003f50 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f52:	4b38      	ldr	r3, [pc, #224]	; (8004034 <xPortStartScheduler+0x124>)
 8003f54:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	22ff      	movs	r2, #255	; 0xff
 8003f62:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f6c:	78fb      	ldrb	r3, [r7, #3]
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	4b30      	ldr	r3, [pc, #192]	; (8004038 <xPortStartScheduler+0x128>)
 8003f78:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f7a:	4b30      	ldr	r3, [pc, #192]	; (800403c <xPortStartScheduler+0x12c>)
 8003f7c:	2207      	movs	r2, #7
 8003f7e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f80:	e009      	b.n	8003f96 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003f82:	4b2e      	ldr	r3, [pc, #184]	; (800403c <xPortStartScheduler+0x12c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	4a2c      	ldr	r2, [pc, #176]	; (800403c <xPortStartScheduler+0x12c>)
 8003f8a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f8c:	78fb      	ldrb	r3, [r7, #3]
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f96:	78fb      	ldrb	r3, [r7, #3]
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f9e:	2b80      	cmp	r3, #128	; 0x80
 8003fa0:	d0ef      	beq.n	8003f82 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003fa2:	4b26      	ldr	r3, [pc, #152]	; (800403c <xPortStartScheduler+0x12c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f1c3 0307 	rsb	r3, r3, #7
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	d009      	beq.n	8003fc2 <xPortStartScheduler+0xb2>
 8003fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb2:	f383 8811 	msr	BASEPRI, r3
 8003fb6:	f3bf 8f6f 	isb	sy
 8003fba:	f3bf 8f4f 	dsb	sy
 8003fbe:	60bb      	str	r3, [r7, #8]
 8003fc0:	e7fe      	b.n	8003fc0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003fc2:	4b1e      	ldr	r3, [pc, #120]	; (800403c <xPortStartScheduler+0x12c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	021b      	lsls	r3, r3, #8
 8003fc8:	4a1c      	ldr	r2, [pc, #112]	; (800403c <xPortStartScheduler+0x12c>)
 8003fca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003fcc:	4b1b      	ldr	r3, [pc, #108]	; (800403c <xPortStartScheduler+0x12c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fd4:	4a19      	ldr	r2, [pc, #100]	; (800403c <xPortStartScheduler+0x12c>)
 8003fd6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003fe0:	4b17      	ldr	r3, [pc, #92]	; (8004040 <xPortStartScheduler+0x130>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a16      	ldr	r2, [pc, #88]	; (8004040 <xPortStartScheduler+0x130>)
 8003fe6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003fec:	4b14      	ldr	r3, [pc, #80]	; (8004040 <xPortStartScheduler+0x130>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a13      	ldr	r2, [pc, #76]	; (8004040 <xPortStartScheduler+0x130>)
 8003ff2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003ff6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003ff8:	f000 f8d6 	bl	80041a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003ffc:	4b11      	ldr	r3, [pc, #68]	; (8004044 <xPortStartScheduler+0x134>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004002:	f000 f8f5 	bl	80041f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004006:	4b10      	ldr	r3, [pc, #64]	; (8004048 <xPortStartScheduler+0x138>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a0f      	ldr	r2, [pc, #60]	; (8004048 <xPortStartScheduler+0x138>)
 800400c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004010:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004012:	f7ff ff69 	bl	8003ee8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004016:	f7ff f86d 	bl	80030f4 <vTaskSwitchContext>
	prvTaskExitError();
 800401a:	f7ff ff23 	bl	8003e64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	e000ed00 	.word	0xe000ed00
 800402c:	410fc271 	.word	0x410fc271
 8004030:	410fc270 	.word	0x410fc270
 8004034:	e000e400 	.word	0xe000e400
 8004038:	20000d14 	.word	0x20000d14
 800403c:	20000d18 	.word	0x20000d18
 8004040:	e000ed20 	.word	0xe000ed20
 8004044:	2000000c 	.word	0x2000000c
 8004048:	e000ef34 	.word	0xe000ef34

0800404c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004064:	4b0e      	ldr	r3, [pc, #56]	; (80040a0 <vPortEnterCritical+0x54>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	3301      	adds	r3, #1
 800406a:	4a0d      	ldr	r2, [pc, #52]	; (80040a0 <vPortEnterCritical+0x54>)
 800406c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800406e:	4b0c      	ldr	r3, [pc, #48]	; (80040a0 <vPortEnterCritical+0x54>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d10e      	bne.n	8004094 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004076:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <vPortEnterCritical+0x58>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d009      	beq.n	8004094 <vPortEnterCritical+0x48>
 8004080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	603b      	str	r3, [r7, #0]
 8004092:	e7fe      	b.n	8004092 <vPortEnterCritical+0x46>
	}
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	2000000c 	.word	0x2000000c
 80040a4:	e000ed04 	.word	0xe000ed04

080040a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80040ae:	4b11      	ldr	r3, [pc, #68]	; (80040f4 <vPortExitCritical+0x4c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d109      	bne.n	80040ca <vPortExitCritical+0x22>
 80040b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ba:	f383 8811 	msr	BASEPRI, r3
 80040be:	f3bf 8f6f 	isb	sy
 80040c2:	f3bf 8f4f 	dsb	sy
 80040c6:	607b      	str	r3, [r7, #4]
 80040c8:	e7fe      	b.n	80040c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80040ca:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <vPortExitCritical+0x4c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	4a08      	ldr	r2, [pc, #32]	; (80040f4 <vPortExitCritical+0x4c>)
 80040d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80040d4:	4b07      	ldr	r3, [pc, #28]	; (80040f4 <vPortExitCritical+0x4c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d104      	bne.n	80040e6 <vPortExitCritical+0x3e>
 80040dc:	2300      	movs	r3, #0
 80040de:	603b      	str	r3, [r7, #0]
	__asm volatile
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	2000000c 	.word	0x2000000c
	...

08004100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004100:	f3ef 8009 	mrs	r0, PSP
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	4b15      	ldr	r3, [pc, #84]	; (8004160 <pxCurrentTCBConst>)
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	f01e 0f10 	tst.w	lr, #16
 8004110:	bf08      	it	eq
 8004112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800411a:	6010      	str	r0, [r2, #0]
 800411c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004120:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004124:	f380 8811 	msr	BASEPRI, r0
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f7fe ffe0 	bl	80030f4 <vTaskSwitchContext>
 8004134:	f04f 0000 	mov.w	r0, #0
 8004138:	f380 8811 	msr	BASEPRI, r0
 800413c:	bc09      	pop	{r0, r3}
 800413e:	6819      	ldr	r1, [r3, #0]
 8004140:	6808      	ldr	r0, [r1, #0]
 8004142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004146:	f01e 0f10 	tst.w	lr, #16
 800414a:	bf08      	it	eq
 800414c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004150:	f380 8809 	msr	PSP, r0
 8004154:	f3bf 8f6f 	isb	sy
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	f3af 8000 	nop.w

08004160 <pxCurrentTCBConst>:
 8004160:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004164:	bf00      	nop
 8004166:	bf00      	nop

08004168 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
	__asm volatile
 800416e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004172:	f383 8811 	msr	BASEPRI, r3
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004180:	f7fe ff00 	bl	8002f84 <xTaskIncrementTick>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800418a:	4b06      	ldr	r3, [pc, #24]	; (80041a4 <xPortSysTickHandler+0x3c>)
 800418c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	2300      	movs	r3, #0
 8004194:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800419c:	bf00      	nop
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	e000ed04 	.word	0xe000ed04

080041a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80041ac:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <vPortSetupTimerInterrupt+0x34>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80041b2:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <vPortSetupTimerInterrupt+0x38>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80041b8:	4b0a      	ldr	r3, [pc, #40]	; (80041e4 <vPortSetupTimerInterrupt+0x3c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a0a      	ldr	r2, [pc, #40]	; (80041e8 <vPortSetupTimerInterrupt+0x40>)
 80041be:	fba2 2303 	umull	r2, r3, r2, r3
 80041c2:	099b      	lsrs	r3, r3, #6
 80041c4:	4a09      	ldr	r2, [pc, #36]	; (80041ec <vPortSetupTimerInterrupt+0x44>)
 80041c6:	3b01      	subs	r3, #1
 80041c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80041ca:	4b04      	ldr	r3, [pc, #16]	; (80041dc <vPortSetupTimerInterrupt+0x34>)
 80041cc:	2207      	movs	r2, #7
 80041ce:	601a      	str	r2, [r3, #0]
}
 80041d0:	bf00      	nop
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	e000e010 	.word	0xe000e010
 80041e0:	e000e018 	.word	0xe000e018
 80041e4:	20000000 	.word	0x20000000
 80041e8:	10624dd3 	.word	0x10624dd3
 80041ec:	e000e014 	.word	0xe000e014

080041f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80041f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004200 <vPortEnableVFP+0x10>
 80041f4:	6801      	ldr	r1, [r0, #0]
 80041f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80041fa:	6001      	str	r1, [r0, #0]
 80041fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80041fe:	bf00      	nop
 8004200:	e000ed88 	.word	0xe000ed88

08004204 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800420a:	f3ef 8305 	mrs	r3, IPSR
 800420e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2b0f      	cmp	r3, #15
 8004214:	d913      	bls.n	800423e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004216:	4a16      	ldr	r2, [pc, #88]	; (8004270 <vPortValidateInterruptPriority+0x6c>)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4413      	add	r3, r2
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004220:	4b14      	ldr	r3, [pc, #80]	; (8004274 <vPortValidateInterruptPriority+0x70>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	7afa      	ldrb	r2, [r7, #11]
 8004226:	429a      	cmp	r2, r3
 8004228:	d209      	bcs.n	800423e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800422a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	607b      	str	r3, [r7, #4]
 800423c:	e7fe      	b.n	800423c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800423e:	4b0e      	ldr	r3, [pc, #56]	; (8004278 <vPortValidateInterruptPriority+0x74>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004246:	4b0d      	ldr	r3, [pc, #52]	; (800427c <vPortValidateInterruptPriority+0x78>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d909      	bls.n	8004262 <vPortValidateInterruptPriority+0x5e>
 800424e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004252:	f383 8811 	msr	BASEPRI, r3
 8004256:	f3bf 8f6f 	isb	sy
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	603b      	str	r3, [r7, #0]
 8004260:	e7fe      	b.n	8004260 <vPortValidateInterruptPriority+0x5c>
	}
 8004262:	bf00      	nop
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	e000e3f0 	.word	0xe000e3f0
 8004274:	20000d14 	.word	0x20000d14
 8004278:	e000ed0c 	.word	0xe000ed0c
 800427c:	20000d18 	.word	0x20000d18

08004280 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b08a      	sub	sp, #40	; 0x28
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004288:	2300      	movs	r3, #0
 800428a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800428c:	f7fe fdc0 	bl	8002e10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004290:	4b57      	ldr	r3, [pc, #348]	; (80043f0 <pvPortMalloc+0x170>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004298:	f000 f90c 	bl	80044b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800429c:	4b55      	ldr	r3, [pc, #340]	; (80043f4 <pvPortMalloc+0x174>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4013      	ands	r3, r2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f040 808c 	bne.w	80043c2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d01c      	beq.n	80042ea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80042b0:	2208      	movs	r2, #8
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4413      	add	r3, r2
 80042b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d013      	beq.n	80042ea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f023 0307 	bic.w	r3, r3, #7
 80042c8:	3308      	adds	r3, #8
 80042ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d009      	beq.n	80042ea <pvPortMalloc+0x6a>
 80042d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042da:	f383 8811 	msr	BASEPRI, r3
 80042de:	f3bf 8f6f 	isb	sy
 80042e2:	f3bf 8f4f 	dsb	sy
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	e7fe      	b.n	80042e8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d068      	beq.n	80043c2 <pvPortMalloc+0x142>
 80042f0:	4b41      	ldr	r3, [pc, #260]	; (80043f8 <pvPortMalloc+0x178>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d863      	bhi.n	80043c2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80042fa:	4b40      	ldr	r3, [pc, #256]	; (80043fc <pvPortMalloc+0x17c>)
 80042fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80042fe:	4b3f      	ldr	r3, [pc, #252]	; (80043fc <pvPortMalloc+0x17c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004304:	e004      	b.n	8004310 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	429a      	cmp	r2, r3
 8004318:	d903      	bls.n	8004322 <pvPortMalloc+0xa2>
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1f1      	bne.n	8004306 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004322:	4b33      	ldr	r3, [pc, #204]	; (80043f0 <pvPortMalloc+0x170>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004328:	429a      	cmp	r2, r3
 800432a:	d04a      	beq.n	80043c2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2208      	movs	r2, #8
 8004332:	4413      	add	r3, r2
 8004334:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	6a3b      	ldr	r3, [r7, #32]
 800433c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	1ad2      	subs	r2, r2, r3
 8004346:	2308      	movs	r3, #8
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	429a      	cmp	r2, r3
 800434c:	d91e      	bls.n	800438c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800434e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4413      	add	r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	2b00      	cmp	r3, #0
 800435e:	d009      	beq.n	8004374 <pvPortMalloc+0xf4>
 8004360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004364:	f383 8811 	msr	BASEPRI, r3
 8004368:	f3bf 8f6f 	isb	sy
 800436c:	f3bf 8f4f 	dsb	sy
 8004370:	613b      	str	r3, [r7, #16]
 8004372:	e7fe      	b.n	8004372 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	1ad2      	subs	r2, r2, r3
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004386:	69b8      	ldr	r0, [r7, #24]
 8004388:	f000 f8f6 	bl	8004578 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800438c:	4b1a      	ldr	r3, [pc, #104]	; (80043f8 <pvPortMalloc+0x178>)
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	4a18      	ldr	r2, [pc, #96]	; (80043f8 <pvPortMalloc+0x178>)
 8004398:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800439a:	4b17      	ldr	r3, [pc, #92]	; (80043f8 <pvPortMalloc+0x178>)
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	4b18      	ldr	r3, [pc, #96]	; (8004400 <pvPortMalloc+0x180>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d203      	bcs.n	80043ae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80043a6:	4b14      	ldr	r3, [pc, #80]	; (80043f8 <pvPortMalloc+0x178>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a15      	ldr	r2, [pc, #84]	; (8004400 <pvPortMalloc+0x180>)
 80043ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	4b10      	ldr	r3, [pc, #64]	; (80043f4 <pvPortMalloc+0x174>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	431a      	orrs	r2, r3
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80043c2:	f7fe fd33 	bl	8002e2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	f003 0307 	and.w	r3, r3, #7
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d009      	beq.n	80043e4 <pvPortMalloc+0x164>
 80043d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d4:	f383 8811 	msr	BASEPRI, r3
 80043d8:	f3bf 8f6f 	isb	sy
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	e7fe      	b.n	80043e2 <pvPortMalloc+0x162>
	return pvReturn;
 80043e4:	69fb      	ldr	r3, [r7, #28]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3728      	adds	r7, #40	; 0x28
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	20004924 	.word	0x20004924
 80043f4:	20004930 	.word	0x20004930
 80043f8:	20004928 	.word	0x20004928
 80043fc:	2000491c 	.word	0x2000491c
 8004400:	2000492c 	.word	0x2000492c

08004404 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d046      	beq.n	80044a4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004416:	2308      	movs	r3, #8
 8004418:	425b      	negs	r3, r3
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	4413      	add	r3, r2
 800441e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	4b20      	ldr	r3, [pc, #128]	; (80044ac <vPortFree+0xa8>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4013      	ands	r3, r2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d109      	bne.n	8004446 <vPortFree+0x42>
 8004432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	60fb      	str	r3, [r7, #12]
 8004444:	e7fe      	b.n	8004444 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d009      	beq.n	8004462 <vPortFree+0x5e>
 800444e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	60bb      	str	r3, [r7, #8]
 8004460:	e7fe      	b.n	8004460 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	4b11      	ldr	r3, [pc, #68]	; (80044ac <vPortFree+0xa8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4013      	ands	r3, r2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d019      	beq.n	80044a4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d115      	bne.n	80044a4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <vPortFree+0xa8>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	43db      	mvns	r3, r3
 8004482:	401a      	ands	r2, r3
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004488:	f7fe fcc2 	bl	8002e10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	4b07      	ldr	r3, [pc, #28]	; (80044b0 <vPortFree+0xac>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4413      	add	r3, r2
 8004496:	4a06      	ldr	r2, [pc, #24]	; (80044b0 <vPortFree+0xac>)
 8004498:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800449a:	6938      	ldr	r0, [r7, #16]
 800449c:	f000 f86c 	bl	8004578 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80044a0:	f7fe fcc4 	bl	8002e2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80044a4:	bf00      	nop
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	20004930 	.word	0x20004930
 80044b0:	20004928 	.word	0x20004928

080044b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80044ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80044be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80044c0:	4b27      	ldr	r3, [pc, #156]	; (8004560 <prvHeapInit+0xac>)
 80044c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00c      	beq.n	80044e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	3307      	adds	r3, #7
 80044d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f023 0307 	bic.w	r3, r3, #7
 80044da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	4a1f      	ldr	r2, [pc, #124]	; (8004560 <prvHeapInit+0xac>)
 80044e4:	4413      	add	r3, r2
 80044e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80044ec:	4a1d      	ldr	r2, [pc, #116]	; (8004564 <prvHeapInit+0xb0>)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80044f2:	4b1c      	ldr	r3, [pc, #112]	; (8004564 <prvHeapInit+0xb0>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	4413      	add	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004500:	2208      	movs	r2, #8
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	1a9b      	subs	r3, r3, r2
 8004506:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f023 0307 	bic.w	r3, r3, #7
 800450e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4a15      	ldr	r2, [pc, #84]	; (8004568 <prvHeapInit+0xb4>)
 8004514:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004516:	4b14      	ldr	r3, [pc, #80]	; (8004568 <prvHeapInit+0xb4>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2200      	movs	r2, #0
 800451c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800451e:	4b12      	ldr	r3, [pc, #72]	; (8004568 <prvHeapInit+0xb4>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	1ad2      	subs	r2, r2, r3
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004534:	4b0c      	ldr	r3, [pc, #48]	; (8004568 <prvHeapInit+0xb4>)
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	4a0a      	ldr	r2, [pc, #40]	; (800456c <prvHeapInit+0xb8>)
 8004542:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	4a09      	ldr	r2, [pc, #36]	; (8004570 <prvHeapInit+0xbc>)
 800454a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800454c:	4b09      	ldr	r3, [pc, #36]	; (8004574 <prvHeapInit+0xc0>)
 800454e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004552:	601a      	str	r2, [r3, #0]
}
 8004554:	bf00      	nop
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	20000d1c 	.word	0x20000d1c
 8004564:	2000491c 	.word	0x2000491c
 8004568:	20004924 	.word	0x20004924
 800456c:	2000492c 	.word	0x2000492c
 8004570:	20004928 	.word	0x20004928
 8004574:	20004930 	.word	0x20004930

08004578 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004580:	4b28      	ldr	r3, [pc, #160]	; (8004624 <prvInsertBlockIntoFreeList+0xac>)
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	e002      	b.n	800458c <prvInsertBlockIntoFreeList+0x14>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	429a      	cmp	r2, r3
 8004594:	d8f7      	bhi.n	8004586 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	4413      	add	r3, r2
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d108      	bne.n	80045ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	441a      	add	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	441a      	add	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d118      	bne.n	8004600 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	4b15      	ldr	r3, [pc, #84]	; (8004628 <prvInsertBlockIntoFreeList+0xb0>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d00d      	beq.n	80045f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	441a      	add	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	e008      	b.n	8004608 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80045f6:	4b0c      	ldr	r3, [pc, #48]	; (8004628 <prvInsertBlockIntoFreeList+0xb0>)
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	e003      	b.n	8004608 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	429a      	cmp	r2, r3
 800460e:	d002      	beq.n	8004616 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004616:	bf00      	nop
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	2000491c 	.word	0x2000491c
 8004628:	20004924 	.word	0x20004924

0800462c <__libc_init_array>:
 800462c:	b570      	push	{r4, r5, r6, lr}
 800462e:	4e0d      	ldr	r6, [pc, #52]	; (8004664 <__libc_init_array+0x38>)
 8004630:	4c0d      	ldr	r4, [pc, #52]	; (8004668 <__libc_init_array+0x3c>)
 8004632:	1ba4      	subs	r4, r4, r6
 8004634:	10a4      	asrs	r4, r4, #2
 8004636:	2500      	movs	r5, #0
 8004638:	42a5      	cmp	r5, r4
 800463a:	d109      	bne.n	8004650 <__libc_init_array+0x24>
 800463c:	4e0b      	ldr	r6, [pc, #44]	; (800466c <__libc_init_array+0x40>)
 800463e:	4c0c      	ldr	r4, [pc, #48]	; (8004670 <__libc_init_array+0x44>)
 8004640:	f000 f82c 	bl	800469c <_init>
 8004644:	1ba4      	subs	r4, r4, r6
 8004646:	10a4      	asrs	r4, r4, #2
 8004648:	2500      	movs	r5, #0
 800464a:	42a5      	cmp	r5, r4
 800464c:	d105      	bne.n	800465a <__libc_init_array+0x2e>
 800464e:	bd70      	pop	{r4, r5, r6, pc}
 8004650:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004654:	4798      	blx	r3
 8004656:	3501      	adds	r5, #1
 8004658:	e7ee      	b.n	8004638 <__libc_init_array+0xc>
 800465a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800465e:	4798      	blx	r3
 8004660:	3501      	adds	r5, #1
 8004662:	e7f2      	b.n	800464a <__libc_init_array+0x1e>
 8004664:	08004768 	.word	0x08004768
 8004668:	08004768 	.word	0x08004768
 800466c:	08004768 	.word	0x08004768
 8004670:	0800476c 	.word	0x0800476c

08004674 <memcpy>:
 8004674:	b510      	push	{r4, lr}
 8004676:	1e43      	subs	r3, r0, #1
 8004678:	440a      	add	r2, r1
 800467a:	4291      	cmp	r1, r2
 800467c:	d100      	bne.n	8004680 <memcpy+0xc>
 800467e:	bd10      	pop	{r4, pc}
 8004680:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004684:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004688:	e7f7      	b.n	800467a <memcpy+0x6>

0800468a <memset>:
 800468a:	4402      	add	r2, r0
 800468c:	4603      	mov	r3, r0
 800468e:	4293      	cmp	r3, r2
 8004690:	d100      	bne.n	8004694 <memset+0xa>
 8004692:	4770      	bx	lr
 8004694:	f803 1b01 	strb.w	r1, [r3], #1
 8004698:	e7f9      	b.n	800468e <memset+0x4>
	...

0800469c <_init>:
 800469c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469e:	bf00      	nop
 80046a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046a2:	bc08      	pop	{r3}
 80046a4:	469e      	mov	lr, r3
 80046a6:	4770      	bx	lr

080046a8 <_fini>:
 80046a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046aa:	bf00      	nop
 80046ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ae:	bc08      	pop	{r3}
 80046b0:	469e      	mov	lr, r3
 80046b2:	4770      	bx	lr
