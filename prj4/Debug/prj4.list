
prj4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004704  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080048b4  080048b4  000148b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800496c  0800496c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800496c  0800496c  0001496c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004974  08004974  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004974  08004974  00014974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004978  08004978  00014978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800497c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049b0  20000010  0800498c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200049c0  0800498c  000249c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001050a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002186  00000000  00000000  0003054a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b78  00000000  00000000  000326d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a80  00000000  00000000  00033248  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000023b1  00000000  00000000  00033cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a431  00000000  00000000  00036079  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7221  00000000  00000000  000404aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001176cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e18  00000000  00000000  00117748  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800489c 	.word	0x0800489c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	0800489c 	.word	0x0800489c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 fa66 	bl	80009c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f84e 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f8ac 	bl	8000658 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000500:	f001 f9a6 	bl	8001850 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  myQueue1 = xQueueCreate(10, sizeof(unsigned long));
 8000504:	2200      	movs	r2, #0
 8000506:	2104      	movs	r1, #4
 8000508:	200a      	movs	r0, #10
 800050a:	f001 fca2 	bl	8001e52 <xQueueGenericCreate>
 800050e:	4602      	mov	r2, r0
 8000510:	4b15      	ldr	r3, [pc, #84]	; (8000568 <main+0x78>)
 8000512:	601a      	str	r2, [r3, #0]
  myQueue2 = xQueueCreate(10, sizeof(unsigned long));
 8000514:	2200      	movs	r2, #0
 8000516:	2104      	movs	r1, #4
 8000518:	200a      	movs	r0, #10
 800051a:	f001 fc9a 	bl	8001e52 <xQueueGenericCreate>
 800051e:	4602      	mov	r2, r0
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <main+0x7c>)
 8000522:	601a      	str	r2, [r3, #0]
  myMutex = xSemaphoreCreateMutex();
 8000524:	2001      	movs	r0, #1
 8000526:	f001 fd10 	bl	8001f4a <xQueueCreateMutex>
 800052a:	4602      	mov	r2, r0
 800052c:	4b10      	ldr	r3, [pc, #64]	; (8000570 <main+0x80>)
 800052e:	601a      	str	r2, [r3, #0]
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000530:	4a10      	ldr	r2, [pc, #64]	; (8000574 <main+0x84>)
 8000532:	2100      	movs	r1, #0
 8000534:	4810      	ldr	r0, [pc, #64]	; (8000578 <main+0x88>)
 8000536:	f001 f9f5 	bl	8001924 <osThreadNew>
 800053a:	4602      	mov	r2, r0
 800053c:	4b0f      	ldr	r3, [pc, #60]	; (800057c <main+0x8c>)
 800053e:	601a      	str	r2, [r3, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000540:	4a0f      	ldr	r2, [pc, #60]	; (8000580 <main+0x90>)
 8000542:	2100      	movs	r1, #0
 8000544:	480f      	ldr	r0, [pc, #60]	; (8000584 <main+0x94>)
 8000546:	f001 f9ed 	bl	8001924 <osThreadNew>
 800054a:	4602      	mov	r2, r0
 800054c:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <main+0x98>)
 800054e:	601a      	str	r2, [r3, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000550:	4a0e      	ldr	r2, [pc, #56]	; (800058c <main+0x9c>)
 8000552:	2100      	movs	r1, #0
 8000554:	480e      	ldr	r0, [pc, #56]	; (8000590 <main+0xa0>)
 8000556:	f001 f9e5 	bl	8001924 <osThreadNew>
 800055a:	4602      	mov	r2, r0
 800055c:	4b0d      	ldr	r3, [pc, #52]	; (8000594 <main+0xa4>)
 800055e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000560:	f001 f9aa 	bl	80018b8 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000564:	e7fe      	b.n	8000564 <main+0x74>
 8000566:	bf00      	nop
 8000568:	20004970 	.word	0x20004970
 800056c:	20004974 	.word	0x20004974
 8000570:	20004968 	.word	0x20004968
 8000574:	080048f0 	.word	0x080048f0
 8000578:	080006c1 	.word	0x080006c1
 800057c:	20004940 	.word	0x20004940
 8000580:	08004914 	.word	0x08004914
 8000584:	08000765 	.word	0x08000765
 8000588:	2000496c 	.word	0x2000496c
 800058c:	08004938 	.word	0x08004938
 8000590:	080007f9 	.word	0x080007f9
 8000594:	20004978 	.word	0x20004978

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	; 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	2230      	movs	r2, #48	; 0x30
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f004 f96f 	bl	800488a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	4b23      	ldr	r3, [pc, #140]	; (8000650 <SystemClock_Config+0xb8>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	4a22      	ldr	r2, [pc, #136]	; (8000650 <SystemClock_Config+0xb8>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	; 0x40
 80005cc:	4b20      	ldr	r3, [pc, #128]	; (8000650 <SystemClock_Config+0xb8>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	4b1d      	ldr	r3, [pc, #116]	; (8000654 <SystemClock_Config+0xbc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005e4:	4a1b      	ldr	r2, [pc, #108]	; (8000654 <SystemClock_Config+0xbc>)
 80005e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4b19      	ldr	r3, [pc, #100]	; (8000654 <SystemClock_Config+0xbc>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f8:	2302      	movs	r3, #2
 80005fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000600:	2310      	movs	r3, #16
 8000602:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000604:	2300      	movs	r3, #0
 8000606:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000608:	f107 0320 	add.w	r3, r7, #32
 800060c:	4618      	mov	r0, r3
 800060e:	f000 fd0f 	bl	8001030 <HAL_RCC_OscConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000618:	f000 f938 	bl	800088c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061c:	230f      	movs	r3, #15
 800061e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f000 ff6a 	bl	8001510 <HAL_RCC_ClockConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000642:	f000 f923 	bl	800088c <Error_Handler>
  }
}
 8000646:	bf00      	nop
 8000648:	3750      	adds	r7, #80	; 0x50
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_GPIO_Init+0x60>)
 8000672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000674:	4a10      	ldr	r2, [pc, #64]	; (80006b8 <MX_GPIO_Init+0x60>)
 8000676:	f043 0302 	orr.w	r3, r3, #2
 800067a:	6313      	str	r3, [r2, #48]	; 0x30
 800067c:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_GPIO_Init+0x60>)
 800067e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000680:	f003 0302 	and.w	r3, r3, #2
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	f244 0181 	movw	r1, #16513	; 0x4081
 800068e:	480b      	ldr	r0, [pc, #44]	; (80006bc <MX_GPIO_Init+0x64>)
 8000690:	f000 fc9a 	bl	8000fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8000694:	f244 0381 	movw	r3, #16513	; 0x4081
 8000698:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	2301      	movs	r3, #1
 800069c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	4619      	mov	r1, r3
 80006aa:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_GPIO_Init+0x64>)
 80006ac:	f000 fae2 	bl	8000c74 <HAL_GPIO_Init>

}
 80006b0:	bf00      	nop
 80006b2:	3718      	adds	r7, #24
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40020400 	.word	0x40020400

080006c0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	if (uxQueueSpacesAvailable(myQueue1) && uxQueueSpacesAvailable(myQueue2)) {
 80006c8:	4b23      	ldr	r3, [pc, #140]	; (8000758 <StartDefaultTask+0x98>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 ffc7 	bl	8002660 <uxQueueSpacesAvailable>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d013      	beq.n	8000700 <StartDefaultTask+0x40>
 80006d8:	4b20      	ldr	r3, [pc, #128]	; (800075c <StartDefaultTask+0x9c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 ffbf 	bl	8002660 <uxQueueSpacesAvailable>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d00b      	beq.n	8000700 <StartDefaultTask+0x40>
		counter = 0x1+counter;
 80006e8:	4b1d      	ldr	r3, [pc, #116]	; (8000760 <StartDefaultTask+0xa0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	4a1c      	ldr	r2, [pc, #112]	; (8000760 <StartDefaultTask+0xa0>)
 80006f0:	6013      	str	r3, [r2, #0]
		xQueueSend(myQueue1, &counter, 0);
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <StartDefaultTask+0x98>)
 80006f4:	6818      	ldr	r0, [r3, #0]
 80006f6:	2300      	movs	r3, #0
 80006f8:	2200      	movs	r2, #0
 80006fa:	4919      	ldr	r1, [pc, #100]	; (8000760 <StartDefaultTask+0xa0>)
 80006fc:	f001 fc3e 	bl	8001f7c <xQueueGenericSend>
	}

	osDelay(1000);
 8000700:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000704:	f001 f9b4 	bl	8001a70 <osDelay>
	if (uxQueueSpacesAvailable(myQueue1) && uxQueueSpacesAvailable(myQueue2)) {
 8000708:	4b13      	ldr	r3, [pc, #76]	; (8000758 <StartDefaultTask+0x98>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4618      	mov	r0, r3
 800070e:	f001 ffa7 	bl	8002660 <uxQueueSpacesAvailable>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d01a      	beq.n	800074e <StartDefaultTask+0x8e>
 8000718:	4b10      	ldr	r3, [pc, #64]	; (800075c <StartDefaultTask+0x9c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4618      	mov	r0, r3
 800071e:	f001 ff9f 	bl	8002660 <uxQueueSpacesAvailable>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d012      	beq.n	800074e <StartDefaultTask+0x8e>
		counter = 0x1+counter;
 8000728:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <StartDefaultTask+0xa0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	3301      	adds	r3, #1
 800072e:	4a0c      	ldr	r2, [pc, #48]	; (8000760 <StartDefaultTask+0xa0>)
 8000730:	6013      	str	r3, [r2, #0]
		xQueueSend(myQueue1, &counter, 0);
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <StartDefaultTask+0x98>)
 8000734:	6818      	ldr	r0, [r3, #0]
 8000736:	2300      	movs	r3, #0
 8000738:	2200      	movs	r2, #0
 800073a:	4909      	ldr	r1, [pc, #36]	; (8000760 <StartDefaultTask+0xa0>)
 800073c:	f001 fc1e 	bl	8001f7c <xQueueGenericSend>
		xQueueSend(myQueue2, &counter, 0);
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <StartDefaultTask+0x9c>)
 8000742:	6818      	ldr	r0, [r3, #0]
 8000744:	2300      	movs	r3, #0
 8000746:	2200      	movs	r2, #0
 8000748:	4905      	ldr	r1, [pc, #20]	; (8000760 <StartDefaultTask+0xa0>)
 800074a:	f001 fc17 	bl	8001f7c <xQueueGenericSend>
	}
	osDelay(1000);
 800074e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000752:	f001 f98d 	bl	8001a70 <osDelay>
	if (uxQueueSpacesAvailable(myQueue1) && uxQueueSpacesAvailable(myQueue2)) {
 8000756:	e7b7      	b.n	80006c8 <StartDefaultTask+0x8>
 8000758:	20004970 	.word	0x20004970
 800075c:	20004974 	.word	0x20004974
 8000760:	2000002c 	.word	0x2000002c

08000764 <StartTask02>:
  }
}

void StartTask02(void *argument)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	int i;
	xQueueReceive(myQueue1, &queue1_c, 10);
 800076c:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <StartTask02+0x84>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	220a      	movs	r2, #10
 8000772:	491e      	ldr	r1, [pc, #120]	; (80007ec <StartTask02+0x88>)
 8000774:	4618      	mov	r0, r3
 8000776:	f001 fd8f 	bl	8002298 <xQueueReceive>
	for (i=0; i<queue1_c; i++) {
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	e02d      	b.n	80007dc <StartTask02+0x78>
		xSemaphoreTake(myMutex, portMAX_DELAY);
 8000780:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <StartTask02+0x8c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f04f 31ff 	mov.w	r1, #4294967295
 8000788:	4618      	mov	r0, r3
 800078a:	f001 fe61 	bl	8002450 <xQueueSemaphoreTake>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800078e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000792:	4818      	ldr	r0, [pc, #96]	; (80007f4 <StartTask02+0x90>)
 8000794:	f000 fc31 	bl	8000ffa <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000798:	2180      	movs	r1, #128	; 0x80
 800079a:	4816      	ldr	r0, [pc, #88]	; (80007f4 <StartTask02+0x90>)
 800079c:	f000 fc2d 	bl	8000ffa <HAL_GPIO_TogglePin>
		osDelay(300);
 80007a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007a4:	f001 f964 	bl	8001a70 <osDelay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80007a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ac:	4811      	ldr	r0, [pc, #68]	; (80007f4 <StartTask02+0x90>)
 80007ae:	f000 fc24 	bl	8000ffa <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80007b2:	2180      	movs	r1, #128	; 0x80
 80007b4:	480f      	ldr	r0, [pc, #60]	; (80007f4 <StartTask02+0x90>)
 80007b6:	f000 fc20 	bl	8000ffa <HAL_GPIO_TogglePin>
		osDelay(300);
 80007ba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007be:	f001 f957 	bl	8001a70 <osDelay>
		xSemaphoreGive(myMutex);
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <StartTask02+0x8c>)
 80007c4:	6818      	ldr	r0, [r3, #0]
 80007c6:	2300      	movs	r3, #0
 80007c8:	2200      	movs	r2, #0
 80007ca:	2100      	movs	r1, #0
 80007cc:	f001 fbd6 	bl	8001f7c <xQueueGenericSend>
		osDelay(1);
 80007d0:	2001      	movs	r0, #1
 80007d2:	f001 f94d 	bl	8001a70 <osDelay>
	for (i=0; i<queue1_c; i++) {
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	3301      	adds	r3, #1
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	4b03      	ldr	r3, [pc, #12]	; (80007ec <StartTask02+0x88>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	68fa      	ldr	r2, [r7, #12]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	dbcc      	blt.n	8000780 <StartTask02+0x1c>
  {
 80007e6:	e7c1      	b.n	800076c <StartTask02+0x8>
 80007e8:	20004970 	.word	0x20004970
 80007ec:	20000030 	.word	0x20000030
 80007f0:	20004968 	.word	0x20004968
 80007f4:	40020400 	.word	0x40020400

080007f8 <StartTask03>:
	}
  }
}

void StartTask03(void *argument)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	int j;
	xQueueReceive(myQueue2, &queue2_c, 10);
 8000800:	4b1e      	ldr	r3, [pc, #120]	; (800087c <StartTask03+0x84>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	220a      	movs	r2, #10
 8000806:	491e      	ldr	r1, [pc, #120]	; (8000880 <StartTask03+0x88>)
 8000808:	4618      	mov	r0, r3
 800080a:	f001 fd45 	bl	8002298 <xQueueReceive>
	for (j=0; j<queue2_c; j++) {
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	e02d      	b.n	8000870 <StartTask03+0x78>
		xSemaphoreTake(myMutex, portMAX_DELAY);
 8000814:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <StartTask03+0x8c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f04f 31ff 	mov.w	r1, #4294967295
 800081c:	4618      	mov	r0, r3
 800081e:	f001 fe17 	bl	8002450 <xQueueSemaphoreTake>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000822:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000826:	4818      	ldr	r0, [pc, #96]	; (8000888 <StartTask03+0x90>)
 8000828:	f000 fbe7 	bl	8000ffa <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800082c:	2101      	movs	r1, #1
 800082e:	4816      	ldr	r0, [pc, #88]	; (8000888 <StartTask03+0x90>)
 8000830:	f000 fbe3 	bl	8000ffa <HAL_GPIO_TogglePin>
		osDelay(300);
 8000834:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000838:	f001 f91a 	bl	8001a70 <osDelay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800083c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000840:	4811      	ldr	r0, [pc, #68]	; (8000888 <StartTask03+0x90>)
 8000842:	f000 fbda 	bl	8000ffa <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000846:	2101      	movs	r1, #1
 8000848:	480f      	ldr	r0, [pc, #60]	; (8000888 <StartTask03+0x90>)
 800084a:	f000 fbd6 	bl	8000ffa <HAL_GPIO_TogglePin>
		osDelay(300);
 800084e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000852:	f001 f90d 	bl	8001a70 <osDelay>
		xSemaphoreGive(myMutex);
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <StartTask03+0x8c>)
 8000858:	6818      	ldr	r0, [r3, #0]
 800085a:	2300      	movs	r3, #0
 800085c:	2200      	movs	r2, #0
 800085e:	2100      	movs	r1, #0
 8000860:	f001 fb8c 	bl	8001f7c <xQueueGenericSend>
		osDelay(1);
 8000864:	2001      	movs	r0, #1
 8000866:	f001 f903 	bl	8001a70 <osDelay>
	for (j=0; j<queue2_c; j++) {
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	3301      	adds	r3, #1
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	4b03      	ldr	r3, [pc, #12]	; (8000880 <StartTask03+0x88>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	68fa      	ldr	r2, [r7, #12]
 8000876:	429a      	cmp	r2, r3
 8000878:	dbcc      	blt.n	8000814 <StartTask03+0x1c>
  {
 800087a:	e7c1      	b.n	8000800 <StartTask03+0x8>
 800087c:	20004974 	.word	0x20004974
 8000880:	20000034 	.word	0x20000034
 8000884:	20004968 	.word	0x20004968
 8000888:	40020400 	.word	0x40020400

0800088c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
	...

0800089c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <HAL_MspInit+0x54>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	4a11      	ldr	r2, [pc, #68]	; (80008f0 <HAL_MspInit+0x54>)
 80008ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b0:	6453      	str	r3, [r2, #68]	; 0x44
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <HAL_MspInit+0x54>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <HAL_MspInit+0x54>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	4a0a      	ldr	r2, [pc, #40]	; (80008f0 <HAL_MspInit+0x54>)
 80008c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008cc:	6413      	str	r3, [r2, #64]	; 0x40
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <HAL_MspInit+0x54>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	210f      	movs	r1, #15
 80008de:	f06f 0001 	mvn.w	r0, #1
 80008e2:	f000 f99e 	bl	8000c22 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800

080008f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <HardFault_Handler+0x4>

08000908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <MemManage_Handler+0x4>

0800090e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <BusFault_Handler+0x4>

08000914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <UsageFault_Handler+0x4>

0800091a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800092c:	f000 f89c 	bl	8000a68 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000930:	f002 fe44 	bl	80035bc <xTaskGetSchedulerState>
 8000934:	4603      	mov	r3, r0
 8000936:	2b01      	cmp	r3, #1
 8000938:	d001      	beq.n	800093e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800093a:	f003 fd15 	bl	8004368 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <SystemInit+0x28>)
 800094a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800094e:	4a07      	ldr	r2, [pc, #28]	; (800096c <SystemInit+0x28>)
 8000950:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000954:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000958:	4b04      	ldr	r3, [pc, #16]	; (800096c <SystemInit+0x28>)
 800095a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800095e:	609a      	str	r2, [r3, #8]
#endif
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000970:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009a8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000974:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000976:	e003      	b.n	8000980 <LoopCopyDataInit>

08000978 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800097a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800097c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800097e:	3104      	adds	r1, #4

08000980 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000980:	480b      	ldr	r0, [pc, #44]	; (80009b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000984:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000986:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000988:	d3f6      	bcc.n	8000978 <CopyDataInit>
  ldr  r2, =_sbss
 800098a:	4a0b      	ldr	r2, [pc, #44]	; (80009b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800098c:	e002      	b.n	8000994 <LoopFillZerobss>

0800098e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800098e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000990:	f842 3b04 	str.w	r3, [r2], #4

08000994 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000996:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000998:	d3f9      	bcc.n	800098e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800099a:	f7ff ffd3 	bl	8000944 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800099e:	f003 ff45 	bl	800482c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009a2:	f7ff fda5 	bl	80004f0 <main>
  bx  lr    
 80009a6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80009a8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80009ac:	0800497c 	.word	0x0800497c
  ldr  r0, =_sdata
 80009b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80009b4:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80009b8:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80009bc:	200049c0 	.word	0x200049c0

080009c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009c0:	e7fe      	b.n	80009c0 <ADC_IRQHandler>
	...

080009c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009c8:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <HAL_Init+0x40>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a0d      	ldr	r2, [pc, #52]	; (8000a04 <HAL_Init+0x40>)
 80009ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009d4:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <HAL_Init+0x40>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <HAL_Init+0x40>)
 80009da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <HAL_Init+0x40>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <HAL_Init+0x40>)
 80009e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ec:	2003      	movs	r0, #3
 80009ee:	f000 f90d 	bl	8000c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009f2:	200f      	movs	r0, #15
 80009f4:	f000 f808 	bl	8000a08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009f8:	f7ff ff50 	bl	800089c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009fc:	2300      	movs	r3, #0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023c00 	.word	0x40023c00

08000a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <HAL_InitTick+0x54>)
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <HAL_InitTick+0x58>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 f917 	bl	8000c5a <HAL_SYSTICK_Config>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
 8000a34:	e00e      	b.n	8000a54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b0f      	cmp	r3, #15
 8000a3a:	d80a      	bhi.n	8000a52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	f000 f8ed 	bl	8000c22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a48:	4a06      	ldr	r2, [pc, #24]	; (8000a64 <HAL_InitTick+0x5c>)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	e000      	b.n	8000a54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000000 	.word	0x20000000
 8000a60:	20000008 	.word	0x20000008
 8000a64:	20000004 	.word	0x20000004

08000a68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_IncTick+0x20>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	461a      	mov	r2, r3
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_IncTick+0x24>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4413      	add	r3, r2
 8000a78:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <HAL_IncTick+0x24>)
 8000a7a:	6013      	str	r3, [r2, #0]
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	2000497c 	.word	0x2000497c

08000a90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  return uwTick;
 8000a94:	4b03      	ldr	r3, [pc, #12]	; (8000aa4 <HAL_GetTick+0x14>)
 8000a96:	681b      	ldr	r3, [r3, #0]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	2000497c 	.word	0x2000497c

08000aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f003 0307 	and.w	r3, r3, #7
 8000ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <__NVIC_SetPriorityGrouping+0x44>)
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000abe:	68ba      	ldr	r2, [r7, #8]
 8000ac0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ada:	4a04      	ldr	r2, [pc, #16]	; (8000aec <__NVIC_SetPriorityGrouping+0x44>)
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	60d3      	str	r3, [r2, #12]
}
 8000ae0:	bf00      	nop
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af4:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <__NVIC_GetPriorityGrouping+0x18>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	0a1b      	lsrs	r3, r3, #8
 8000afa:	f003 0307 	and.w	r3, r3, #7
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	6039      	str	r1, [r7, #0]
 8000b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	db0a      	blt.n	8000b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	490c      	ldr	r1, [pc, #48]	; (8000b58 <__NVIC_SetPriority+0x4c>)
 8000b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2a:	0112      	lsls	r2, r2, #4
 8000b2c:	b2d2      	uxtb	r2, r2
 8000b2e:	440b      	add	r3, r1
 8000b30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b34:	e00a      	b.n	8000b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	4908      	ldr	r1, [pc, #32]	; (8000b5c <__NVIC_SetPriority+0x50>)
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	f003 030f 	and.w	r3, r3, #15
 8000b42:	3b04      	subs	r3, #4
 8000b44:	0112      	lsls	r2, r2, #4
 8000b46:	b2d2      	uxtb	r2, r2
 8000b48:	440b      	add	r3, r1
 8000b4a:	761a      	strb	r2, [r3, #24]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000e100 	.word	0xe000e100
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b089      	sub	sp, #36	; 0x24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	f1c3 0307 	rsb	r3, r3, #7
 8000b7a:	2b04      	cmp	r3, #4
 8000b7c:	bf28      	it	cs
 8000b7e:	2304      	movcs	r3, #4
 8000b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3304      	adds	r3, #4
 8000b86:	2b06      	cmp	r3, #6
 8000b88:	d902      	bls.n	8000b90 <NVIC_EncodePriority+0x30>
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3b03      	subs	r3, #3
 8000b8e:	e000      	b.n	8000b92 <NVIC_EncodePriority+0x32>
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	f04f 32ff 	mov.w	r2, #4294967295
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	43da      	mvns	r2, r3
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	401a      	ands	r2, r3
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb2:	43d9      	mvns	r1, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb8:	4313      	orrs	r3, r2
         );
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3724      	adds	r7, #36	; 0x24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
	...

08000bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bd8:	d301      	bcc.n	8000bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e00f      	b.n	8000bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bde:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <SysTick_Config+0x40>)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000be6:	210f      	movs	r1, #15
 8000be8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bec:	f7ff ff8e 	bl	8000b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <SysTick_Config+0x40>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bf6:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <SysTick_Config+0x40>)
 8000bf8:	2207      	movs	r2, #7
 8000bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	e000e010 	.word	0xe000e010

08000c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f7ff ff47 	bl	8000aa8 <__NVIC_SetPriorityGrouping>
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b086      	sub	sp, #24
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	4603      	mov	r3, r0
 8000c2a:	60b9      	str	r1, [r7, #8]
 8000c2c:	607a      	str	r2, [r7, #4]
 8000c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c34:	f7ff ff5c 	bl	8000af0 <__NVIC_GetPriorityGrouping>
 8000c38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	68b9      	ldr	r1, [r7, #8]
 8000c3e:	6978      	ldr	r0, [r7, #20]
 8000c40:	f7ff ff8e 	bl	8000b60 <NVIC_EncodePriority>
 8000c44:	4602      	mov	r2, r0
 8000c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ff5d 	bl	8000b0c <__NVIC_SetPriority>
}
 8000c52:	bf00      	nop
 8000c54:	3718      	adds	r7, #24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff ffb0 	bl	8000bc8 <SysTick_Config>
 8000c68:	4603      	mov	r3, r0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b089      	sub	sp, #36	; 0x24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
 8000c8e:	e177      	b.n	8000f80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c90:	2201      	movs	r2, #1
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	f040 8166 	bne.w	8000f7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d00b      	beq.n	8000cce <HAL_GPIO_Init+0x5a>
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d007      	beq.n	8000cce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cc2:	2b11      	cmp	r3, #17
 8000cc4:	d003      	beq.n	8000cce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	2b12      	cmp	r3, #18
 8000ccc:	d130      	bne.n	8000d30 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	2203      	movs	r2, #3
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	68da      	ldr	r2, [r3, #12]
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d04:	2201      	movs	r2, #1
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4013      	ands	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	091b      	lsrs	r3, r3, #4
 8000d1a:	f003 0201 	and.w	r2, r3, #1
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	689a      	ldr	r2, [r3, #8]
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d003      	beq.n	8000d70 <HAL_GPIO_Init+0xfc>
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2b12      	cmp	r3, #18
 8000d6e:	d123      	bne.n	8000db8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	08da      	lsrs	r2, r3, #3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3208      	adds	r2, #8
 8000d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	f003 0307 	and.w	r3, r3, #7
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	220f      	movs	r2, #15
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4013      	ands	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	691a      	ldr	r2, [r3, #16]
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	08da      	lsrs	r2, r3, #3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3208      	adds	r2, #8
 8000db2:	69b9      	ldr	r1, [r7, #24]
 8000db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 0203 	and.w	r2, r3, #3
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	f000 80c0 	beq.w	8000f7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b65      	ldr	r3, [pc, #404]	; (8000f94 <HAL_GPIO_Init+0x320>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	4a64      	ldr	r2, [pc, #400]	; (8000f94 <HAL_GPIO_Init+0x320>)
 8000e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e08:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0a:	4b62      	ldr	r3, [pc, #392]	; (8000f94 <HAL_GPIO_Init+0x320>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e16:	4a60      	ldr	r2, [pc, #384]	; (8000f98 <HAL_GPIO_Init+0x324>)
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	089b      	lsrs	r3, r3, #2
 8000e1c:	3302      	adds	r3, #2
 8000e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f003 0303 	and.w	r3, r3, #3
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	220f      	movs	r2, #15
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4013      	ands	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a57      	ldr	r2, [pc, #348]	; (8000f9c <HAL_GPIO_Init+0x328>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d037      	beq.n	8000eb2 <HAL_GPIO_Init+0x23e>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a56      	ldr	r2, [pc, #344]	; (8000fa0 <HAL_GPIO_Init+0x32c>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d031      	beq.n	8000eae <HAL_GPIO_Init+0x23a>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a55      	ldr	r2, [pc, #340]	; (8000fa4 <HAL_GPIO_Init+0x330>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d02b      	beq.n	8000eaa <HAL_GPIO_Init+0x236>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a54      	ldr	r2, [pc, #336]	; (8000fa8 <HAL_GPIO_Init+0x334>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d025      	beq.n	8000ea6 <HAL_GPIO_Init+0x232>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a53      	ldr	r2, [pc, #332]	; (8000fac <HAL_GPIO_Init+0x338>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d01f      	beq.n	8000ea2 <HAL_GPIO_Init+0x22e>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a52      	ldr	r2, [pc, #328]	; (8000fb0 <HAL_GPIO_Init+0x33c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d019      	beq.n	8000e9e <HAL_GPIO_Init+0x22a>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a51      	ldr	r2, [pc, #324]	; (8000fb4 <HAL_GPIO_Init+0x340>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d013      	beq.n	8000e9a <HAL_GPIO_Init+0x226>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a50      	ldr	r2, [pc, #320]	; (8000fb8 <HAL_GPIO_Init+0x344>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d00d      	beq.n	8000e96 <HAL_GPIO_Init+0x222>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a4f      	ldr	r2, [pc, #316]	; (8000fbc <HAL_GPIO_Init+0x348>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d007      	beq.n	8000e92 <HAL_GPIO_Init+0x21e>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a4e      	ldr	r2, [pc, #312]	; (8000fc0 <HAL_GPIO_Init+0x34c>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d101      	bne.n	8000e8e <HAL_GPIO_Init+0x21a>
 8000e8a:	2309      	movs	r3, #9
 8000e8c:	e012      	b.n	8000eb4 <HAL_GPIO_Init+0x240>
 8000e8e:	230a      	movs	r3, #10
 8000e90:	e010      	b.n	8000eb4 <HAL_GPIO_Init+0x240>
 8000e92:	2308      	movs	r3, #8
 8000e94:	e00e      	b.n	8000eb4 <HAL_GPIO_Init+0x240>
 8000e96:	2307      	movs	r3, #7
 8000e98:	e00c      	b.n	8000eb4 <HAL_GPIO_Init+0x240>
 8000e9a:	2306      	movs	r3, #6
 8000e9c:	e00a      	b.n	8000eb4 <HAL_GPIO_Init+0x240>
 8000e9e:	2305      	movs	r3, #5
 8000ea0:	e008      	b.n	8000eb4 <HAL_GPIO_Init+0x240>
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	e006      	b.n	8000eb4 <HAL_GPIO_Init+0x240>
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e004      	b.n	8000eb4 <HAL_GPIO_Init+0x240>
 8000eaa:	2302      	movs	r3, #2
 8000eac:	e002      	b.n	8000eb4 <HAL_GPIO_Init+0x240>
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e000      	b.n	8000eb4 <HAL_GPIO_Init+0x240>
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	69fa      	ldr	r2, [r7, #28]
 8000eb6:	f002 0203 	and.w	r2, r2, #3
 8000eba:	0092      	lsls	r2, r2, #2
 8000ebc:	4093      	lsls	r3, r2
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ec4:	4934      	ldr	r1, [pc, #208]	; (8000f98 <HAL_GPIO_Init+0x324>)
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	089b      	lsrs	r3, r3, #2
 8000eca:	3302      	adds	r3, #2
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ed2:	4b3c      	ldr	r3, [pc, #240]	; (8000fc4 <HAL_GPIO_Init+0x350>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	43db      	mvns	r3, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ef6:	4a33      	ldr	r2, [pc, #204]	; (8000fc4 <HAL_GPIO_Init+0x350>)
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000efc:	4b31      	ldr	r3, [pc, #196]	; (8000fc4 <HAL_GPIO_Init+0x350>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d003      	beq.n	8000f20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f20:	4a28      	ldr	r2, [pc, #160]	; (8000fc4 <HAL_GPIO_Init+0x350>)
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f26:	4b27      	ldr	r3, [pc, #156]	; (8000fc4 <HAL_GPIO_Init+0x350>)
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f4a:	4a1e      	ldr	r2, [pc, #120]	; (8000fc4 <HAL_GPIO_Init+0x350>)
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f50:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <HAL_GPIO_Init+0x350>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f74:	4a13      	ldr	r2, [pc, #76]	; (8000fc4 <HAL_GPIO_Init+0x350>)
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	61fb      	str	r3, [r7, #28]
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	2b0f      	cmp	r3, #15
 8000f84:	f67f ae84 	bls.w	8000c90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f88:	bf00      	nop
 8000f8a:	3724      	adds	r7, #36	; 0x24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40013800 	.word	0x40013800
 8000f9c:	40020000 	.word	0x40020000
 8000fa0:	40020400 	.word	0x40020400
 8000fa4:	40020800 	.word	0x40020800
 8000fa8:	40020c00 	.word	0x40020c00
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	40021400 	.word	0x40021400
 8000fb4:	40021800 	.word	0x40021800
 8000fb8:	40021c00 	.word	0x40021c00
 8000fbc:	40022000 	.word	0x40022000
 8000fc0:	40022400 	.word	0x40022400
 8000fc4:	40013c00 	.word	0x40013c00

08000fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	807b      	strh	r3, [r7, #2]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fd8:	787b      	ldrb	r3, [r7, #1]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fde:	887a      	ldrh	r2, [r7, #2]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fe4:	e003      	b.n	8000fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fe6:	887b      	ldrh	r3, [r7, #2]
 8000fe8:	041a      	lsls	r2, r3, #16
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	619a      	str	r2, [r3, #24]
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	460b      	mov	r3, r1
 8001004:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	695a      	ldr	r2, [r3, #20]
 800100a:	887b      	ldrh	r3, [r7, #2]
 800100c:	401a      	ands	r2, r3
 800100e:	887b      	ldrh	r3, [r7, #2]
 8001010:	429a      	cmp	r2, r3
 8001012:	d104      	bne.n	800101e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001014:	887b      	ldrh	r3, [r7, #2]
 8001016:	041a      	lsls	r2, r3, #16
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800101c:	e002      	b.n	8001024 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800101e:	887a      	ldrh	r2, [r7, #2]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	619a      	str	r2, [r3, #24]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d101      	bne.n	8001042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e25b      	b.n	80014fa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	2b00      	cmp	r3, #0
 800104c:	d075      	beq.n	800113a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800104e:	4ba3      	ldr	r3, [pc, #652]	; (80012dc <HAL_RCC_OscConfig+0x2ac>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f003 030c 	and.w	r3, r3, #12
 8001056:	2b04      	cmp	r3, #4
 8001058:	d00c      	beq.n	8001074 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800105a:	4ba0      	ldr	r3, [pc, #640]	; (80012dc <HAL_RCC_OscConfig+0x2ac>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001062:	2b08      	cmp	r3, #8
 8001064:	d112      	bne.n	800108c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001066:	4b9d      	ldr	r3, [pc, #628]	; (80012dc <HAL_RCC_OscConfig+0x2ac>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800106e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001072:	d10b      	bne.n	800108c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001074:	4b99      	ldr	r3, [pc, #612]	; (80012dc <HAL_RCC_OscConfig+0x2ac>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d05b      	beq.n	8001138 <HAL_RCC_OscConfig+0x108>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d157      	bne.n	8001138 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e236      	b.n	80014fa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001094:	d106      	bne.n	80010a4 <HAL_RCC_OscConfig+0x74>
 8001096:	4b91      	ldr	r3, [pc, #580]	; (80012dc <HAL_RCC_OscConfig+0x2ac>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a90      	ldr	r2, [pc, #576]	; (80012dc <HAL_RCC_OscConfig+0x2ac>)
 800109c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	e01d      	b.n	80010e0 <HAL_RCC_OscConfig+0xb0>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010ac:	d10c      	bne.n	80010c8 <HAL_RCC_OscConfig+0x98>
 80010ae:	4b8b      	ldr	r3, [pc, #556]	; (80012dc <HAL_RCC_OscConfig+0x2ac>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a8a      	ldr	r2, [pc, #552]	; (80012dc <HAL_RCC_OscConfig+0x2ac>)
 80010b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b8:	6013      	str	r3, [r2, #0]
 80010ba:	4b88      	ldr	r3, [pc, #544]	; (80012dc <HAL_RCC_OscConfig+0x2ac>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a87      	ldr	r2, [pc, #540]	; (80012dc <HAL_RCC_OscConfig+0x2ac>)
 80010c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	e00b      	b.n	80010e0 <HAL_RCC_OscConfig+0xb0>
 80010c8:	4b84      	ldr	r3, [pc, #528]	; (80012dc <HAL_RCC_OscConfig+0x2ac>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a83      	ldr	r2, [pc, #524]	; (80012dc <HAL_RCC_OscConfig+0x2ac>)
 80010ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	4b81      	ldr	r3, [pc, #516]	; (80012dc <HAL_RCC_OscConfig+0x2ac>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a80      	ldr	r2, [pc, #512]	; (80012dc <HAL_RCC_OscConfig+0x2ac>)
 80010da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d013      	beq.n	8001110 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e8:	f7ff fcd2 	bl	8000a90 <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010f0:	f7ff fcce 	bl	8000a90 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b64      	cmp	r3, #100	; 0x64
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e1fb      	b.n	80014fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001102:	4b76      	ldr	r3, [pc, #472]	; (80012dc <HAL_RCC_OscConfig+0x2ac>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0f0      	beq.n	80010f0 <HAL_RCC_OscConfig+0xc0>
 800110e:	e014      	b.n	800113a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001110:	f7ff fcbe 	bl	8000a90 <HAL_GetTick>
 8001114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001118:	f7ff fcba 	bl	8000a90 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b64      	cmp	r3, #100	; 0x64
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e1e7      	b.n	80014fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800112a:	4b6c      	ldr	r3, [pc, #432]	; (80012dc <HAL_RCC_OscConfig+0x2ac>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1f0      	bne.n	8001118 <HAL_RCC_OscConfig+0xe8>
 8001136:	e000      	b.n	800113a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d063      	beq.n	800120e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001146:	4b65      	ldr	r3, [pc, #404]	; (80012dc <HAL_RCC_OscConfig+0x2ac>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f003 030c 	and.w	r3, r3, #12
 800114e:	2b00      	cmp	r3, #0
 8001150:	d00b      	beq.n	800116a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001152:	4b62      	ldr	r3, [pc, #392]	; (80012dc <HAL_RCC_OscConfig+0x2ac>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800115a:	2b08      	cmp	r3, #8
 800115c:	d11c      	bne.n	8001198 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800115e:	4b5f      	ldr	r3, [pc, #380]	; (80012dc <HAL_RCC_OscConfig+0x2ac>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d116      	bne.n	8001198 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116a:	4b5c      	ldr	r3, [pc, #368]	; (80012dc <HAL_RCC_OscConfig+0x2ac>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d005      	beq.n	8001182 <HAL_RCC_OscConfig+0x152>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d001      	beq.n	8001182 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e1bb      	b.n	80014fa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001182:	4b56      	ldr	r3, [pc, #344]	; (80012dc <HAL_RCC_OscConfig+0x2ac>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	4952      	ldr	r1, [pc, #328]	; (80012dc <HAL_RCC_OscConfig+0x2ac>)
 8001192:	4313      	orrs	r3, r2
 8001194:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001196:	e03a      	b.n	800120e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d020      	beq.n	80011e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011a0:	4b4f      	ldr	r3, [pc, #316]	; (80012e0 <HAL_RCC_OscConfig+0x2b0>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a6:	f7ff fc73 	bl	8000a90 <HAL_GetTick>
 80011aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ac:	e008      	b.n	80011c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ae:	f7ff fc6f 	bl	8000a90 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e19c      	b.n	80014fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c0:	4b46      	ldr	r3, [pc, #280]	; (80012dc <HAL_RCC_OscConfig+0x2ac>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d0f0      	beq.n	80011ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011cc:	4b43      	ldr	r3, [pc, #268]	; (80012dc <HAL_RCC_OscConfig+0x2ac>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	691b      	ldr	r3, [r3, #16]
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	4940      	ldr	r1, [pc, #256]	; (80012dc <HAL_RCC_OscConfig+0x2ac>)
 80011dc:	4313      	orrs	r3, r2
 80011de:	600b      	str	r3, [r1, #0]
 80011e0:	e015      	b.n	800120e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011e2:	4b3f      	ldr	r3, [pc, #252]	; (80012e0 <HAL_RCC_OscConfig+0x2b0>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e8:	f7ff fc52 	bl	8000a90 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f0:	f7ff fc4e 	bl	8000a90 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e17b      	b.n	80014fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001202:	4b36      	ldr	r3, [pc, #216]	; (80012dc <HAL_RCC_OscConfig+0x2ac>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f0      	bne.n	80011f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0308 	and.w	r3, r3, #8
 8001216:	2b00      	cmp	r3, #0
 8001218:	d030      	beq.n	800127c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d016      	beq.n	8001250 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001222:	4b30      	ldr	r3, [pc, #192]	; (80012e4 <HAL_RCC_OscConfig+0x2b4>)
 8001224:	2201      	movs	r2, #1
 8001226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001228:	f7ff fc32 	bl	8000a90 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001230:	f7ff fc2e 	bl	8000a90 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e15b      	b.n	80014fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001242:	4b26      	ldr	r3, [pc, #152]	; (80012dc <HAL_RCC_OscConfig+0x2ac>)
 8001244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f0      	beq.n	8001230 <HAL_RCC_OscConfig+0x200>
 800124e:	e015      	b.n	800127c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001250:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <HAL_RCC_OscConfig+0x2b4>)
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001256:	f7ff fc1b 	bl	8000a90 <HAL_GetTick>
 800125a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800125c:	e008      	b.n	8001270 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800125e:	f7ff fc17 	bl	8000a90 <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d901      	bls.n	8001270 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e144      	b.n	80014fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001270:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <HAL_RCC_OscConfig+0x2ac>)
 8001272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1f0      	bne.n	800125e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 80a0 	beq.w	80013ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800128a:	2300      	movs	r3, #0
 800128c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800128e:	4b13      	ldr	r3, [pc, #76]	; (80012dc <HAL_RCC_OscConfig+0x2ac>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10f      	bne.n	80012ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <HAL_RCC_OscConfig+0x2ac>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <HAL_RCC_OscConfig+0x2ac>)
 80012a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a8:	6413      	str	r3, [r2, #64]	; 0x40
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012b6:	2301      	movs	r3, #1
 80012b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <HAL_RCC_OscConfig+0x2b8>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d121      	bne.n	800130a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012c6:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <HAL_RCC_OscConfig+0x2b8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a07      	ldr	r2, [pc, #28]	; (80012e8 <HAL_RCC_OscConfig+0x2b8>)
 80012cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012d2:	f7ff fbdd 	bl	8000a90 <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d8:	e011      	b.n	80012fe <HAL_RCC_OscConfig+0x2ce>
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800
 80012e0:	42470000 	.word	0x42470000
 80012e4:	42470e80 	.word	0x42470e80
 80012e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ec:	f7ff fbd0 	bl	8000a90 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e0fd      	b.n	80014fa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012fe:	4b81      	ldr	r3, [pc, #516]	; (8001504 <HAL_RCC_OscConfig+0x4d4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0f0      	beq.n	80012ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d106      	bne.n	8001320 <HAL_RCC_OscConfig+0x2f0>
 8001312:	4b7d      	ldr	r3, [pc, #500]	; (8001508 <HAL_RCC_OscConfig+0x4d8>)
 8001314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001316:	4a7c      	ldr	r2, [pc, #496]	; (8001508 <HAL_RCC_OscConfig+0x4d8>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6713      	str	r3, [r2, #112]	; 0x70
 800131e:	e01c      	b.n	800135a <HAL_RCC_OscConfig+0x32a>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	2b05      	cmp	r3, #5
 8001326:	d10c      	bne.n	8001342 <HAL_RCC_OscConfig+0x312>
 8001328:	4b77      	ldr	r3, [pc, #476]	; (8001508 <HAL_RCC_OscConfig+0x4d8>)
 800132a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800132c:	4a76      	ldr	r2, [pc, #472]	; (8001508 <HAL_RCC_OscConfig+0x4d8>)
 800132e:	f043 0304 	orr.w	r3, r3, #4
 8001332:	6713      	str	r3, [r2, #112]	; 0x70
 8001334:	4b74      	ldr	r3, [pc, #464]	; (8001508 <HAL_RCC_OscConfig+0x4d8>)
 8001336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001338:	4a73      	ldr	r2, [pc, #460]	; (8001508 <HAL_RCC_OscConfig+0x4d8>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	6713      	str	r3, [r2, #112]	; 0x70
 8001340:	e00b      	b.n	800135a <HAL_RCC_OscConfig+0x32a>
 8001342:	4b71      	ldr	r3, [pc, #452]	; (8001508 <HAL_RCC_OscConfig+0x4d8>)
 8001344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001346:	4a70      	ldr	r2, [pc, #448]	; (8001508 <HAL_RCC_OscConfig+0x4d8>)
 8001348:	f023 0301 	bic.w	r3, r3, #1
 800134c:	6713      	str	r3, [r2, #112]	; 0x70
 800134e:	4b6e      	ldr	r3, [pc, #440]	; (8001508 <HAL_RCC_OscConfig+0x4d8>)
 8001350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001352:	4a6d      	ldr	r2, [pc, #436]	; (8001508 <HAL_RCC_OscConfig+0x4d8>)
 8001354:	f023 0304 	bic.w	r3, r3, #4
 8001358:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d015      	beq.n	800138e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001362:	f7ff fb95 	bl	8000a90 <HAL_GetTick>
 8001366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001368:	e00a      	b.n	8001380 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800136a:	f7ff fb91 	bl	8000a90 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	f241 3288 	movw	r2, #5000	; 0x1388
 8001378:	4293      	cmp	r3, r2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e0bc      	b.n	80014fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001380:	4b61      	ldr	r3, [pc, #388]	; (8001508 <HAL_RCC_OscConfig+0x4d8>)
 8001382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0ee      	beq.n	800136a <HAL_RCC_OscConfig+0x33a>
 800138c:	e014      	b.n	80013b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138e:	f7ff fb7f 	bl	8000a90 <HAL_GetTick>
 8001392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001394:	e00a      	b.n	80013ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001396:	f7ff fb7b 	bl	8000a90 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e0a6      	b.n	80014fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ac:	4b56      	ldr	r3, [pc, #344]	; (8001508 <HAL_RCC_OscConfig+0x4d8>)
 80013ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1ee      	bne.n	8001396 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013b8:	7dfb      	ldrb	r3, [r7, #23]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d105      	bne.n	80013ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013be:	4b52      	ldr	r3, [pc, #328]	; (8001508 <HAL_RCC_OscConfig+0x4d8>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	4a51      	ldr	r2, [pc, #324]	; (8001508 <HAL_RCC_OscConfig+0x4d8>)
 80013c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 8092 	beq.w	80014f8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013d4:	4b4c      	ldr	r3, [pc, #304]	; (8001508 <HAL_RCC_OscConfig+0x4d8>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f003 030c 	and.w	r3, r3, #12
 80013dc:	2b08      	cmp	r3, #8
 80013de:	d05c      	beq.n	800149a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d141      	bne.n	800146c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e8:	4b48      	ldr	r3, [pc, #288]	; (800150c <HAL_RCC_OscConfig+0x4dc>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ee:	f7ff fb4f 	bl	8000a90 <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f6:	f7ff fb4b 	bl	8000a90 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e078      	b.n	80014fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001408:	4b3f      	ldr	r3, [pc, #252]	; (8001508 <HAL_RCC_OscConfig+0x4d8>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1f0      	bne.n	80013f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69da      	ldr	r2, [r3, #28]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	431a      	orrs	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001422:	019b      	lsls	r3, r3, #6
 8001424:	431a      	orrs	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142a:	085b      	lsrs	r3, r3, #1
 800142c:	3b01      	subs	r3, #1
 800142e:	041b      	lsls	r3, r3, #16
 8001430:	431a      	orrs	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001436:	061b      	lsls	r3, r3, #24
 8001438:	4933      	ldr	r1, [pc, #204]	; (8001508 <HAL_RCC_OscConfig+0x4d8>)
 800143a:	4313      	orrs	r3, r2
 800143c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800143e:	4b33      	ldr	r3, [pc, #204]	; (800150c <HAL_RCC_OscConfig+0x4dc>)
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001444:	f7ff fb24 	bl	8000a90 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800144c:	f7ff fb20 	bl	8000a90 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e04d      	b.n	80014fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800145e:	4b2a      	ldr	r3, [pc, #168]	; (8001508 <HAL_RCC_OscConfig+0x4d8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0x41c>
 800146a:	e045      	b.n	80014f8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800146c:	4b27      	ldr	r3, [pc, #156]	; (800150c <HAL_RCC_OscConfig+0x4dc>)
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001472:	f7ff fb0d 	bl	8000a90 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800147a:	f7ff fb09 	bl	8000a90 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e036      	b.n	80014fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800148c:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <HAL_RCC_OscConfig+0x4d8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1f0      	bne.n	800147a <HAL_RCC_OscConfig+0x44a>
 8001498:	e02e      	b.n	80014f8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d101      	bne.n	80014a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e029      	b.n	80014fa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014a6:	4b18      	ldr	r3, [pc, #96]	; (8001508 <HAL_RCC_OscConfig+0x4d8>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d11c      	bne.n	80014f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d115      	bne.n	80014f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80014c8:	68fa      	ldr	r2, [r7, #12]
 80014ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014ce:	4013      	ands	r3, r2
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d10d      	bne.n	80014f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d106      	bne.n	80014f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d001      	beq.n	80014f8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e000      	b.n	80014fa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40007000 	.word	0x40007000
 8001508:	40023800 	.word	0x40023800
 800150c:	42470060 	.word	0x42470060

08001510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d101      	bne.n	8001524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e0cc      	b.n	80016be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001524:	4b68      	ldr	r3, [pc, #416]	; (80016c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 030f 	and.w	r3, r3, #15
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	429a      	cmp	r2, r3
 8001530:	d90c      	bls.n	800154c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001532:	4b65      	ldr	r3, [pc, #404]	; (80016c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800153a:	4b63      	ldr	r3, [pc, #396]	; (80016c8 <HAL_RCC_ClockConfig+0x1b8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 030f 	and.w	r3, r3, #15
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	429a      	cmp	r2, r3
 8001546:	d001      	beq.n	800154c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e0b8      	b.n	80016be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d020      	beq.n	800159a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	2b00      	cmp	r3, #0
 8001562:	d005      	beq.n	8001570 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001564:	4b59      	ldr	r3, [pc, #356]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	4a58      	ldr	r2, [pc, #352]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 800156a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800156e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0308 	and.w	r3, r3, #8
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800157c:	4b53      	ldr	r3, [pc, #332]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	4a52      	ldr	r2, [pc, #328]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 8001582:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001586:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001588:	4b50      	ldr	r3, [pc, #320]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	494d      	ldr	r1, [pc, #308]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 8001596:	4313      	orrs	r3, r2
 8001598:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d044      	beq.n	8001630 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d107      	bne.n	80015be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ae:	4b47      	ldr	r3, [pc, #284]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d119      	bne.n	80015ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e07f      	b.n	80016be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d003      	beq.n	80015ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ca:	2b03      	cmp	r3, #3
 80015cc:	d107      	bne.n	80015de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ce:	4b3f      	ldr	r3, [pc, #252]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d109      	bne.n	80015ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e06f      	b.n	80016be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015de:	4b3b      	ldr	r3, [pc, #236]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e067      	b.n	80016be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015ee:	4b37      	ldr	r3, [pc, #220]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f023 0203 	bic.w	r2, r3, #3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	4934      	ldr	r1, [pc, #208]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 80015fc:	4313      	orrs	r3, r2
 80015fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001600:	f7ff fa46 	bl	8000a90 <HAL_GetTick>
 8001604:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001606:	e00a      	b.n	800161e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001608:	f7ff fa42 	bl	8000a90 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	f241 3288 	movw	r2, #5000	; 0x1388
 8001616:	4293      	cmp	r3, r2
 8001618:	d901      	bls.n	800161e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e04f      	b.n	80016be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800161e:	4b2b      	ldr	r3, [pc, #172]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 020c 	and.w	r2, r3, #12
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	429a      	cmp	r2, r3
 800162e:	d1eb      	bne.n	8001608 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001630:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 030f 	and.w	r3, r3, #15
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	429a      	cmp	r2, r3
 800163c:	d20c      	bcs.n	8001658 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163e:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001646:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	429a      	cmp	r2, r3
 8001652:	d001      	beq.n	8001658 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e032      	b.n	80016be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	2b00      	cmp	r3, #0
 8001662:	d008      	beq.n	8001676 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001664:	4b19      	ldr	r3, [pc, #100]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	4916      	ldr	r1, [pc, #88]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	4313      	orrs	r3, r2
 8001674:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	2b00      	cmp	r3, #0
 8001680:	d009      	beq.n	8001696 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001682:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	490e      	ldr	r1, [pc, #56]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 8001692:	4313      	orrs	r3, r2
 8001694:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001696:	f000 f821 	bl	80016dc <HAL_RCC_GetSysClockFreq>
 800169a:	4601      	mov	r1, r0
 800169c:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	091b      	lsrs	r3, r3, #4
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <HAL_RCC_ClockConfig+0x1c0>)
 80016a8:	5cd3      	ldrb	r3, [r2, r3]
 80016aa:	fa21 f303 	lsr.w	r3, r1, r3
 80016ae:	4a09      	ldr	r2, [pc, #36]	; (80016d4 <HAL_RCC_ClockConfig+0x1c4>)
 80016b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_RCC_ClockConfig+0x1c8>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff f9a6 	bl	8000a08 <HAL_InitTick>

  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40023c00 	.word	0x40023c00
 80016cc:	40023800 	.word	0x40023800
 80016d0:	0800495c 	.word	0x0800495c
 80016d4:	20000000 	.word	0x20000000
 80016d8:	20000004 	.word	0x20000004

080016dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	2300      	movs	r3, #0
 80016ec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016f2:	4b50      	ldr	r3, [pc, #320]	; (8001834 <HAL_RCC_GetSysClockFreq+0x158>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 030c 	and.w	r3, r3, #12
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	d007      	beq.n	800170e <HAL_RCC_GetSysClockFreq+0x32>
 80016fe:	2b08      	cmp	r3, #8
 8001700:	d008      	beq.n	8001714 <HAL_RCC_GetSysClockFreq+0x38>
 8001702:	2b00      	cmp	r3, #0
 8001704:	f040 808d 	bne.w	8001822 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001708:	4b4b      	ldr	r3, [pc, #300]	; (8001838 <HAL_RCC_GetSysClockFreq+0x15c>)
 800170a:	60bb      	str	r3, [r7, #8]
       break;
 800170c:	e08c      	b.n	8001828 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800170e:	4b4b      	ldr	r3, [pc, #300]	; (800183c <HAL_RCC_GetSysClockFreq+0x160>)
 8001710:	60bb      	str	r3, [r7, #8]
      break;
 8001712:	e089      	b.n	8001828 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001714:	4b47      	ldr	r3, [pc, #284]	; (8001834 <HAL_RCC_GetSysClockFreq+0x158>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800171c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800171e:	4b45      	ldr	r3, [pc, #276]	; (8001834 <HAL_RCC_GetSysClockFreq+0x158>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d023      	beq.n	8001772 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800172a:	4b42      	ldr	r3, [pc, #264]	; (8001834 <HAL_RCC_GetSysClockFreq+0x158>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	099b      	lsrs	r3, r3, #6
 8001730:	f04f 0400 	mov.w	r4, #0
 8001734:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	ea03 0501 	and.w	r5, r3, r1
 8001740:	ea04 0602 	and.w	r6, r4, r2
 8001744:	4a3d      	ldr	r2, [pc, #244]	; (800183c <HAL_RCC_GetSysClockFreq+0x160>)
 8001746:	fb02 f106 	mul.w	r1, r2, r6
 800174a:	2200      	movs	r2, #0
 800174c:	fb02 f205 	mul.w	r2, r2, r5
 8001750:	440a      	add	r2, r1
 8001752:	493a      	ldr	r1, [pc, #232]	; (800183c <HAL_RCC_GetSysClockFreq+0x160>)
 8001754:	fba5 0101 	umull	r0, r1, r5, r1
 8001758:	1853      	adds	r3, r2, r1
 800175a:	4619      	mov	r1, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f04f 0400 	mov.w	r4, #0
 8001762:	461a      	mov	r2, r3
 8001764:	4623      	mov	r3, r4
 8001766:	f7fe fd43 	bl	80001f0 <__aeabi_uldivmod>
 800176a:	4603      	mov	r3, r0
 800176c:	460c      	mov	r4, r1
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	e049      	b.n	8001806 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001772:	4b30      	ldr	r3, [pc, #192]	; (8001834 <HAL_RCC_GetSysClockFreq+0x158>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	099b      	lsrs	r3, r3, #6
 8001778:	f04f 0400 	mov.w	r4, #0
 800177c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	ea03 0501 	and.w	r5, r3, r1
 8001788:	ea04 0602 	and.w	r6, r4, r2
 800178c:	4629      	mov	r1, r5
 800178e:	4632      	mov	r2, r6
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	f04f 0400 	mov.w	r4, #0
 8001798:	0154      	lsls	r4, r2, #5
 800179a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800179e:	014b      	lsls	r3, r1, #5
 80017a0:	4619      	mov	r1, r3
 80017a2:	4622      	mov	r2, r4
 80017a4:	1b49      	subs	r1, r1, r5
 80017a6:	eb62 0206 	sbc.w	r2, r2, r6
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	f04f 0400 	mov.w	r4, #0
 80017b2:	0194      	lsls	r4, r2, #6
 80017b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80017b8:	018b      	lsls	r3, r1, #6
 80017ba:	1a5b      	subs	r3, r3, r1
 80017bc:	eb64 0402 	sbc.w	r4, r4, r2
 80017c0:	f04f 0100 	mov.w	r1, #0
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	00e2      	lsls	r2, r4, #3
 80017ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80017ce:	00d9      	lsls	r1, r3, #3
 80017d0:	460b      	mov	r3, r1
 80017d2:	4614      	mov	r4, r2
 80017d4:	195b      	adds	r3, r3, r5
 80017d6:	eb44 0406 	adc.w	r4, r4, r6
 80017da:	f04f 0100 	mov.w	r1, #0
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	02a2      	lsls	r2, r4, #10
 80017e4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80017e8:	0299      	lsls	r1, r3, #10
 80017ea:	460b      	mov	r3, r1
 80017ec:	4614      	mov	r4, r2
 80017ee:	4618      	mov	r0, r3
 80017f0:	4621      	mov	r1, r4
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f04f 0400 	mov.w	r4, #0
 80017f8:	461a      	mov	r2, r3
 80017fa:	4623      	mov	r3, r4
 80017fc:	f7fe fcf8 	bl	80001f0 <__aeabi_uldivmod>
 8001800:	4603      	mov	r3, r0
 8001802:	460c      	mov	r4, r1
 8001804:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_RCC_GetSysClockFreq+0x158>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	3301      	adds	r3, #1
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	fbb2 f3f3 	udiv	r3, r2, r3
 800181e:	60bb      	str	r3, [r7, #8]
      break;
 8001820:	e002      	b.n	8001828 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001822:	4b05      	ldr	r3, [pc, #20]	; (8001838 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001824:	60bb      	str	r3, [r7, #8]
      break;
 8001826:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001828:	68bb      	ldr	r3, [r7, #8]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800
 8001838:	00f42400 	.word	0x00f42400
 800183c:	017d7840 	.word	0x017d7840

08001840 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001856:	f3ef 8305 	mrs	r3, IPSR
 800185a:	60bb      	str	r3, [r7, #8]
  return(result);
 800185c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10f      	bne.n	8001882 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001862:	f3ef 8310 	mrs	r3, PRIMASK
 8001866:	607b      	str	r3, [r7, #4]
  return(result);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d105      	bne.n	800187a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800186e:	f3ef 8311 	mrs	r3, BASEPRI
 8001872:	603b      	str	r3, [r7, #0]
  return(result);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d007      	beq.n	800188a <osKernelInitialize+0x3a>
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <osKernelInitialize+0x64>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b02      	cmp	r3, #2
 8001880:	d103      	bne.n	800188a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001882:	f06f 0305 	mvn.w	r3, #5
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	e00c      	b.n	80018a4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <osKernelInitialize+0x64>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d105      	bne.n	800189e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001892:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <osKernelInitialize+0x64>)
 8001894:	2201      	movs	r2, #1
 8001896:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	e002      	b.n	80018a4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800189e:	f04f 33ff 	mov.w	r3, #4294967295
 80018a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80018a4:	68fb      	ldr	r3, [r7, #12]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20000038 	.word	0x20000038

080018b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80018be:	f3ef 8305 	mrs	r3, IPSR
 80018c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80018c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10f      	bne.n	80018ea <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018ca:	f3ef 8310 	mrs	r3, PRIMASK
 80018ce:	607b      	str	r3, [r7, #4]
  return(result);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d105      	bne.n	80018e2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80018d6:	f3ef 8311 	mrs	r3, BASEPRI
 80018da:	603b      	str	r3, [r7, #0]
  return(result);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d007      	beq.n	80018f2 <osKernelStart+0x3a>
 80018e2:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <osKernelStart+0x68>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d103      	bne.n	80018f2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80018ea:	f06f 0305 	mvn.w	r3, #5
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	e010      	b.n	8001914 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <osKernelStart+0x68>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d109      	bne.n	800190e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80018fa:	f7ff ffa1 	bl	8001840 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <osKernelStart+0x68>)
 8001900:	2202      	movs	r2, #2
 8001902:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001904:	f001 fa24 	bl	8002d50 <vTaskStartScheduler>
      stat = osOK;
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	e002      	b.n	8001914 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800190e:	f04f 33ff 	mov.w	r3, #4294967295
 8001912:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001914:	68fb      	ldr	r3, [r7, #12]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000038 	.word	0x20000038

08001924 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b090      	sub	sp, #64	; 0x40
 8001928:	af04      	add	r7, sp, #16
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001930:	2300      	movs	r3, #0
 8001932:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001934:	f3ef 8305 	mrs	r3, IPSR
 8001938:	61fb      	str	r3, [r7, #28]
  return(result);
 800193a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800193c:	2b00      	cmp	r3, #0
 800193e:	f040 808f 	bne.w	8001a60 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001942:	f3ef 8310 	mrs	r3, PRIMASK
 8001946:	61bb      	str	r3, [r7, #24]
  return(result);
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d105      	bne.n	800195a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800194e:	f3ef 8311 	mrs	r3, BASEPRI
 8001952:	617b      	str	r3, [r7, #20]
  return(result);
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <osThreadNew+0x3e>
 800195a:	4b44      	ldr	r3, [pc, #272]	; (8001a6c <osThreadNew+0x148>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d07e      	beq.n	8001a60 <osThreadNew+0x13c>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d07b      	beq.n	8001a60 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800196c:	2318      	movs	r3, #24
 800196e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8001970:	2300      	movs	r3, #0
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8001974:	f04f 33ff 	mov.w	r3, #4294967295
 8001978:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d045      	beq.n	8001a0c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d002      	beq.n	800198e <osThreadNew+0x6a>
        name = attr->name;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d002      	beq.n	800199c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d008      	beq.n	80019b4 <osThreadNew+0x90>
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	2b38      	cmp	r3, #56	; 0x38
 80019a6:	d805      	bhi.n	80019b4 <osThreadNew+0x90>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <osThreadNew+0x94>
        return (NULL);
 80019b4:	2300      	movs	r3, #0
 80019b6:	e054      	b.n	8001a62 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	089b      	lsrs	r3, r3, #2
 80019c6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00e      	beq.n	80019ee <osThreadNew+0xca>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	2b5b      	cmp	r3, #91	; 0x5b
 80019d6:	d90a      	bls.n	80019ee <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d006      	beq.n	80019ee <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d002      	beq.n	80019ee <osThreadNew+0xca>
        mem = 1;
 80019e8:	2301      	movs	r3, #1
 80019ea:	623b      	str	r3, [r7, #32]
 80019ec:	e010      	b.n	8001a10 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10c      	bne.n	8001a10 <osThreadNew+0xec>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d108      	bne.n	8001a10 <osThreadNew+0xec>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d104      	bne.n	8001a10 <osThreadNew+0xec>
          mem = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	623b      	str	r3, [r7, #32]
 8001a0a:	e001      	b.n	8001a10 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001a10:	6a3b      	ldr	r3, [r7, #32]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d110      	bne.n	8001a38 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001a1e:	9202      	str	r2, [sp, #8]
 8001a20:	9301      	str	r3, [sp, #4]
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f000 ffbd 	bl	80029ac <xTaskCreateStatic>
 8001a32:	4603      	mov	r3, r0
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	e013      	b.n	8001a60 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8001a38:	6a3b      	ldr	r3, [r7, #32]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d110      	bne.n	8001a60 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	f107 0310 	add.w	r3, r7, #16
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f001 f805 	bl	8002a60 <xTaskCreate>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d001      	beq.n	8001a60 <osThreadNew+0x13c>
          hTask = NULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001a60:	693b      	ldr	r3, [r7, #16]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3730      	adds	r7, #48	; 0x30
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000038 	.word	0x20000038

08001a70 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a78:	f3ef 8305 	mrs	r3, IPSR
 8001a7c:	613b      	str	r3, [r7, #16]
  return(result);
 8001a7e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10f      	bne.n	8001aa4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a84:	f3ef 8310 	mrs	r3, PRIMASK
 8001a88:	60fb      	str	r3, [r7, #12]
  return(result);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d105      	bne.n	8001a9c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001a90:	f3ef 8311 	mrs	r3, BASEPRI
 8001a94:	60bb      	str	r3, [r7, #8]
  return(result);
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d007      	beq.n	8001aac <osDelay+0x3c>
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <osDelay+0x58>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d103      	bne.n	8001aac <osDelay+0x3c>
    stat = osErrorISR;
 8001aa4:	f06f 0305 	mvn.w	r3, #5
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	e007      	b.n	8001abc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d002      	beq.n	8001abc <osDelay+0x4c>
      vTaskDelay(ticks);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f001 f916 	bl	8002ce8 <vTaskDelay>
    }
  }

  return (stat);
 8001abc:	697b      	ldr	r3, [r7, #20]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000038 	.word	0x20000038

08001acc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4a07      	ldr	r2, [pc, #28]	; (8001af8 <vApplicationGetIdleTaskMemory+0x2c>)
 8001adc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	4a06      	ldr	r2, [pc, #24]	; (8001afc <vApplicationGetIdleTaskMemory+0x30>)
 8001ae2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2280      	movs	r2, #128	; 0x80
 8001ae8:	601a      	str	r2, [r3, #0]
}
 8001aea:	bf00      	nop
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	2000003c 	.word	0x2000003c
 8001afc:	20000098 	.word	0x20000098

08001b00 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4a07      	ldr	r2, [pc, #28]	; (8001b2c <vApplicationGetTimerTaskMemory+0x2c>)
 8001b10:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	4a06      	ldr	r2, [pc, #24]	; (8001b30 <vApplicationGetTimerTaskMemory+0x30>)
 8001b16:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b1e:	601a      	str	r2, [r3, #0]
}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	20000298 	.word	0x20000298
 8001b30:	200002f4 	.word	0x200002f4

08001b34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f103 0208 	add.w	r2, r3, #8
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f04f 32ff 	mov.w	r2, #4294967295
 8001b4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f103 0208 	add.w	r2, r3, #8
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f103 0208 	add.w	r2, r3, #8
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b085      	sub	sp, #20
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	1c5a      	adds	r2, r3, #1
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	601a      	str	r2, [r3, #0]
}
 8001bca:	bf00      	nop
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b085      	sub	sp, #20
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bec:	d103      	bne.n	8001bf6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	e00c      	b.n	8001c10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3308      	adds	r3, #8
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	e002      	b.n	8001c04 <vListInsert+0x2e>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d2f6      	bcs.n	8001bfe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	1c5a      	adds	r2, r3, #1
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	601a      	str	r2, [r3, #0]
}
 8001c3c:	bf00      	nop
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6892      	ldr	r2, [r2, #8]
 8001c5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6852      	ldr	r2, [r2, #4]
 8001c68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d103      	bne.n	8001c7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	1e5a      	subs	r2, r3, #1
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d109      	bne.n	8001cc4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb4:	f383 8811 	msr	BASEPRI, r3
 8001cb8:	f3bf 8f6f 	isb	sy
 8001cbc:	f3bf 8f4f 	dsb	sy
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	e7fe      	b.n	8001cc2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001cc4:	f002 fac2 	bl	800424c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd0:	68f9      	ldr	r1, [r7, #12]
 8001cd2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001cd4:	fb01 f303 	mul.w	r3, r1, r3
 8001cd8:	441a      	add	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	68f9      	ldr	r1, [r7, #12]
 8001cf8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001cfa:	fb01 f303 	mul.w	r3, r1, r3
 8001cfe:	441a      	add	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	22ff      	movs	r2, #255	; 0xff
 8001d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	22ff      	movs	r2, #255	; 0xff
 8001d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d114      	bne.n	8001d44 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d01a      	beq.n	8001d58 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	3310      	adds	r3, #16
 8001d26:	4618      	mov	r0, r3
 8001d28:	f001 fa92 	bl	8003250 <xTaskRemoveFromEventList>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d012      	beq.n	8001d58 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001d32:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <xQueueGenericReset+0xcc>)
 8001d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	f3bf 8f4f 	dsb	sy
 8001d3e:	f3bf 8f6f 	isb	sy
 8001d42:	e009      	b.n	8001d58 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	3310      	adds	r3, #16
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff fef3 	bl	8001b34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	3324      	adds	r3, #36	; 0x24
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff feee 	bl	8001b34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001d58:	f002 faa6 	bl	80042a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001d5c:	2301      	movs	r3, #1
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	e000ed04 	.word	0xe000ed04

08001d6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08e      	sub	sp, #56	; 0x38
 8001d70:	af02      	add	r7, sp, #8
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
 8001d78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d109      	bne.n	8001d94 <xQueueGenericCreateStatic+0x28>
 8001d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d84:	f383 8811 	msr	BASEPRI, r3
 8001d88:	f3bf 8f6f 	isb	sy
 8001d8c:	f3bf 8f4f 	dsb	sy
 8001d90:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d92:	e7fe      	b.n	8001d92 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d109      	bne.n	8001dae <xQueueGenericCreateStatic+0x42>
 8001d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d9e:	f383 8811 	msr	BASEPRI, r3
 8001da2:	f3bf 8f6f 	isb	sy
 8001da6:	f3bf 8f4f 	dsb	sy
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
 8001dac:	e7fe      	b.n	8001dac <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d002      	beq.n	8001dba <xQueueGenericCreateStatic+0x4e>
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <xQueueGenericCreateStatic+0x52>
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <xQueueGenericCreateStatic+0x54>
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d109      	bne.n	8001dd8 <xQueueGenericCreateStatic+0x6c>
 8001dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dc8:	f383 8811 	msr	BASEPRI, r3
 8001dcc:	f3bf 8f6f 	isb	sy
 8001dd0:	f3bf 8f4f 	dsb	sy
 8001dd4:	623b      	str	r3, [r7, #32]
 8001dd6:	e7fe      	b.n	8001dd6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d102      	bne.n	8001de4 <xQueueGenericCreateStatic+0x78>
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <xQueueGenericCreateStatic+0x7c>
 8001de4:	2301      	movs	r3, #1
 8001de6:	e000      	b.n	8001dea <xQueueGenericCreateStatic+0x7e>
 8001de8:	2300      	movs	r3, #0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d109      	bne.n	8001e02 <xQueueGenericCreateStatic+0x96>
 8001dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df2:	f383 8811 	msr	BASEPRI, r3
 8001df6:	f3bf 8f6f 	isb	sy
 8001dfa:	f3bf 8f4f 	dsb	sy
 8001dfe:	61fb      	str	r3, [r7, #28]
 8001e00:	e7fe      	b.n	8001e00 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001e02:	2350      	movs	r3, #80	; 0x50
 8001e04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	2b50      	cmp	r3, #80	; 0x50
 8001e0a:	d009      	beq.n	8001e20 <xQueueGenericCreateStatic+0xb4>
 8001e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e10:	f383 8811 	msr	BASEPRI, r3
 8001e14:	f3bf 8f6f 	isb	sy
 8001e18:	f3bf 8f4f 	dsb	sy
 8001e1c:	61bb      	str	r3, [r7, #24]
 8001e1e:	e7fe      	b.n	8001e1e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001e20:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00d      	beq.n	8001e48 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001e34:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	68b9      	ldr	r1, [r7, #8]
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f000 f844 	bl	8001ed0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3730      	adds	r7, #48	; 0x30
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b08a      	sub	sp, #40	; 0x28
 8001e56:	af02      	add	r7, sp, #8
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d109      	bne.n	8001e7a <xQueueGenericCreate+0x28>
 8001e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e6a:	f383 8811 	msr	BASEPRI, r3
 8001e6e:	f3bf 8f6f 	isb	sy
 8001e72:	f3bf 8f4f 	dsb	sy
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	e7fe      	b.n	8001e78 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d102      	bne.n	8001e86 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
 8001e84:	e004      	b.n	8001e90 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	fb02 f303 	mul.w	r3, r2, r3
 8001e8e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	3350      	adds	r3, #80	; 0x50
 8001e94:	4618      	mov	r0, r3
 8001e96:	f002 faf3 	bl	8004480 <pvPortMalloc>
 8001e9a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d011      	beq.n	8001ec6 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	3350      	adds	r3, #80	; 0x50
 8001eaa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001eb4:	79fa      	ldrb	r2, [r7, #7]
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	68b9      	ldr	r1, [r7, #8]
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f000 f805 	bl	8001ed0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001ec6:	69bb      	ldr	r3, [r7, #24]
	}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3720      	adds	r7, #32
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
 8001edc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d103      	bne.n	8001eec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	e002      	b.n	8001ef2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001efe:	2101      	movs	r1, #1
 8001f00:	69b8      	ldr	r0, [r7, #24]
 8001f02:	f7ff fecb 	bl	8001c9c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	78fa      	ldrb	r2, [r7, #3]
 8001f0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001f0e:	bf00      	nop
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00e      	beq.n	8001f42 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8001f36:	2300      	movs	r3, #0
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f81d 	bl	8001f7c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	4603      	mov	r3, r0
 8001f52:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8001f54:	2301      	movs	r3, #1
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	2300      	movs	r3, #0
 8001f5a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	6939      	ldr	r1, [r7, #16]
 8001f62:	6978      	ldr	r0, [r7, #20]
 8001f64:	f7ff ff75 	bl	8001e52 <xQueueGenericCreate>
 8001f68:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f7ff ffd3 	bl	8001f16 <prvInitialiseMutex>

		return xNewQueue;
 8001f70:	68fb      	ldr	r3, [r7, #12]
	}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08e      	sub	sp, #56	; 0x38
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
 8001f88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d109      	bne.n	8001fac <xQueueGenericSend+0x30>
 8001f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f9c:	f383 8811 	msr	BASEPRI, r3
 8001fa0:	f3bf 8f6f 	isb	sy
 8001fa4:	f3bf 8f4f 	dsb	sy
 8001fa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001faa:	e7fe      	b.n	8001faa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d103      	bne.n	8001fba <xQueueGenericSend+0x3e>
 8001fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <xQueueGenericSend+0x42>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <xQueueGenericSend+0x44>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d109      	bne.n	8001fd8 <xQueueGenericSend+0x5c>
 8001fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fc8:	f383 8811 	msr	BASEPRI, r3
 8001fcc:	f3bf 8f6f 	isb	sy
 8001fd0:	f3bf 8f4f 	dsb	sy
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd6:	e7fe      	b.n	8001fd6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d103      	bne.n	8001fe6 <xQueueGenericSend+0x6a>
 8001fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d101      	bne.n	8001fea <xQueueGenericSend+0x6e>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <xQueueGenericSend+0x70>
 8001fea:	2300      	movs	r3, #0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d109      	bne.n	8002004 <xQueueGenericSend+0x88>
 8001ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff4:	f383 8811 	msr	BASEPRI, r3
 8001ff8:	f3bf 8f6f 	isb	sy
 8001ffc:	f3bf 8f4f 	dsb	sy
 8002000:	623b      	str	r3, [r7, #32]
 8002002:	e7fe      	b.n	8002002 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002004:	f001 fada 	bl	80035bc <xTaskGetSchedulerState>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d102      	bne.n	8002014 <xQueueGenericSend+0x98>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <xQueueGenericSend+0x9c>
 8002014:	2301      	movs	r3, #1
 8002016:	e000      	b.n	800201a <xQueueGenericSend+0x9e>
 8002018:	2300      	movs	r3, #0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d109      	bne.n	8002032 <xQueueGenericSend+0xb6>
 800201e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002022:	f383 8811 	msr	BASEPRI, r3
 8002026:	f3bf 8f6f 	isb	sy
 800202a:	f3bf 8f4f 	dsb	sy
 800202e:	61fb      	str	r3, [r7, #28]
 8002030:	e7fe      	b.n	8002030 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002032:	f002 f90b 	bl	800424c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800203a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800203c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203e:	429a      	cmp	r2, r3
 8002040:	d302      	bcc.n	8002048 <xQueueGenericSend+0xcc>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	2b02      	cmp	r3, #2
 8002046:	d129      	bne.n	800209c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	68b9      	ldr	r1, [r7, #8]
 800204c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800204e:	f000 fb41 	bl	80026d4 <prvCopyDataToQueue>
 8002052:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	2b00      	cmp	r3, #0
 800205a:	d010      	beq.n	800207e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800205c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800205e:	3324      	adds	r3, #36	; 0x24
 8002060:	4618      	mov	r0, r3
 8002062:	f001 f8f5 	bl	8003250 <xTaskRemoveFromEventList>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d013      	beq.n	8002094 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800206c:	4b3f      	ldr	r3, [pc, #252]	; (800216c <xQueueGenericSend+0x1f0>)
 800206e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	f3bf 8f4f 	dsb	sy
 8002078:	f3bf 8f6f 	isb	sy
 800207c:	e00a      	b.n	8002094 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800207e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002080:	2b00      	cmp	r3, #0
 8002082:	d007      	beq.n	8002094 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002084:	4b39      	ldr	r3, [pc, #228]	; (800216c <xQueueGenericSend+0x1f0>)
 8002086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	f3bf 8f4f 	dsb	sy
 8002090:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002094:	f002 f908 	bl	80042a8 <vPortExitCritical>
				return pdPASS;
 8002098:	2301      	movs	r3, #1
 800209a:	e063      	b.n	8002164 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d103      	bne.n	80020aa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80020a2:	f002 f901 	bl	80042a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	e05c      	b.n	8002164 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80020aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d106      	bne.n	80020be <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80020b0:	f107 0314 	add.w	r3, r7, #20
 80020b4:	4618      	mov	r0, r3
 80020b6:	f001 f92d 	bl	8003314 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80020ba:	2301      	movs	r3, #1
 80020bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80020be:	f002 f8f3 	bl	80042a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80020c2:	f000 fea9 	bl	8002e18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80020c6:	f002 f8c1 	bl	800424c <vPortEnterCritical>
 80020ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80020d0:	b25b      	sxtb	r3, r3
 80020d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d6:	d103      	bne.n	80020e0 <xQueueGenericSend+0x164>
 80020d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020e6:	b25b      	sxtb	r3, r3
 80020e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ec:	d103      	bne.n	80020f6 <xQueueGenericSend+0x17a>
 80020ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80020f6:	f002 f8d7 	bl	80042a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80020fa:	1d3a      	adds	r2, r7, #4
 80020fc:	f107 0314 	add.w	r3, r7, #20
 8002100:	4611      	mov	r1, r2
 8002102:	4618      	mov	r0, r3
 8002104:	f001 f91c 	bl	8003340 <xTaskCheckForTimeOut>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d124      	bne.n	8002158 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800210e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002110:	f000 fbd8 	bl	80028c4 <prvIsQueueFull>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d018      	beq.n	800214c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800211a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800211c:	3310      	adds	r3, #16
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	4611      	mov	r1, r2
 8002122:	4618      	mov	r0, r3
 8002124:	f001 f846 	bl	80031b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002128:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800212a:	f000 fb63 	bl	80027f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800212e:	f000 fe81 	bl	8002e34 <xTaskResumeAll>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	f47f af7c 	bne.w	8002032 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800213a:	4b0c      	ldr	r3, [pc, #48]	; (800216c <xQueueGenericSend+0x1f0>)
 800213c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	f3bf 8f4f 	dsb	sy
 8002146:	f3bf 8f6f 	isb	sy
 800214a:	e772      	b.n	8002032 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800214c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800214e:	f000 fb51 	bl	80027f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002152:	f000 fe6f 	bl	8002e34 <xTaskResumeAll>
 8002156:	e76c      	b.n	8002032 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002158:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800215a:	f000 fb4b 	bl	80027f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800215e:	f000 fe69 	bl	8002e34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002162:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002164:	4618      	mov	r0, r3
 8002166:	3738      	adds	r7, #56	; 0x38
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	e000ed04 	.word	0xe000ed04

08002170 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08e      	sub	sp, #56	; 0x38
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002184:	2b00      	cmp	r3, #0
 8002186:	d109      	bne.n	800219c <xQueueGenericSendFromISR+0x2c>
 8002188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800218c:	f383 8811 	msr	BASEPRI, r3
 8002190:	f3bf 8f6f 	isb	sy
 8002194:	f3bf 8f4f 	dsb	sy
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
 800219a:	e7fe      	b.n	800219a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d103      	bne.n	80021aa <xQueueGenericSendFromISR+0x3a>
 80021a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <xQueueGenericSendFromISR+0x3e>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <xQueueGenericSendFromISR+0x40>
 80021ae:	2300      	movs	r3, #0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d109      	bne.n	80021c8 <xQueueGenericSendFromISR+0x58>
 80021b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b8:	f383 8811 	msr	BASEPRI, r3
 80021bc:	f3bf 8f6f 	isb	sy
 80021c0:	f3bf 8f4f 	dsb	sy
 80021c4:	623b      	str	r3, [r7, #32]
 80021c6:	e7fe      	b.n	80021c6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d103      	bne.n	80021d6 <xQueueGenericSendFromISR+0x66>
 80021ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <xQueueGenericSendFromISR+0x6a>
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <xQueueGenericSendFromISR+0x6c>
 80021da:	2300      	movs	r3, #0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d109      	bne.n	80021f4 <xQueueGenericSendFromISR+0x84>
 80021e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021e4:	f383 8811 	msr	BASEPRI, r3
 80021e8:	f3bf 8f6f 	isb	sy
 80021ec:	f3bf 8f4f 	dsb	sy
 80021f0:	61fb      	str	r3, [r7, #28]
 80021f2:	e7fe      	b.n	80021f2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80021f4:	f002 f906 	bl	8004404 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80021f8:	f3ef 8211 	mrs	r2, BASEPRI
 80021fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002200:	f383 8811 	msr	BASEPRI, r3
 8002204:	f3bf 8f6f 	isb	sy
 8002208:	f3bf 8f4f 	dsb	sy
 800220c:	61ba      	str	r2, [r7, #24]
 800220e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002210:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002212:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002216:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221c:	429a      	cmp	r2, r3
 800221e:	d302      	bcc.n	8002226 <xQueueGenericSendFromISR+0xb6>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	2b02      	cmp	r3, #2
 8002224:	d12c      	bne.n	8002280 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002228:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800222c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	68b9      	ldr	r1, [r7, #8]
 8002234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002236:	f000 fa4d 	bl	80026d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800223a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800223e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002242:	d112      	bne.n	800226a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	2b00      	cmp	r3, #0
 800224a:	d016      	beq.n	800227a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800224c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224e:	3324      	adds	r3, #36	; 0x24
 8002250:	4618      	mov	r0, r3
 8002252:	f000 fffd 	bl	8003250 <xTaskRemoveFromEventList>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00e      	beq.n	800227a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00b      	beq.n	800227a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	e007      	b.n	800227a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800226a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800226e:	3301      	adds	r3, #1
 8002270:	b2db      	uxtb	r3, r3
 8002272:	b25a      	sxtb	r2, r3
 8002274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002276:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800227a:	2301      	movs	r3, #1
 800227c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800227e:	e001      	b.n	8002284 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002280:	2300      	movs	r3, #0
 8002282:	637b      	str	r3, [r7, #52]	; 0x34
 8002284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002286:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800228e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002290:	4618      	mov	r0, r3
 8002292:	3738      	adds	r7, #56	; 0x38
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08c      	sub	sp, #48	; 0x30
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80022a4:	2300      	movs	r3, #0
 80022a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80022ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d109      	bne.n	80022c6 <xQueueReceive+0x2e>
	__asm volatile
 80022b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b6:	f383 8811 	msr	BASEPRI, r3
 80022ba:	f3bf 8f6f 	isb	sy
 80022be:	f3bf 8f4f 	dsb	sy
 80022c2:	623b      	str	r3, [r7, #32]
 80022c4:	e7fe      	b.n	80022c4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d103      	bne.n	80022d4 <xQueueReceive+0x3c>
 80022cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <xQueueReceive+0x40>
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <xQueueReceive+0x42>
 80022d8:	2300      	movs	r3, #0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d109      	bne.n	80022f2 <xQueueReceive+0x5a>
 80022de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e2:	f383 8811 	msr	BASEPRI, r3
 80022e6:	f3bf 8f6f 	isb	sy
 80022ea:	f3bf 8f4f 	dsb	sy
 80022ee:	61fb      	str	r3, [r7, #28]
 80022f0:	e7fe      	b.n	80022f0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80022f2:	f001 f963 	bl	80035bc <xTaskGetSchedulerState>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d102      	bne.n	8002302 <xQueueReceive+0x6a>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <xQueueReceive+0x6e>
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <xQueueReceive+0x70>
 8002306:	2300      	movs	r3, #0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d109      	bne.n	8002320 <xQueueReceive+0x88>
 800230c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002310:	f383 8811 	msr	BASEPRI, r3
 8002314:	f3bf 8f6f 	isb	sy
 8002318:	f3bf 8f4f 	dsb	sy
 800231c:	61bb      	str	r3, [r7, #24]
 800231e:	e7fe      	b.n	800231e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002320:	f001 ff94 	bl	800424c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002328:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	2b00      	cmp	r3, #0
 800232e:	d01f      	beq.n	8002370 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002334:	f000 fa38 	bl	80027a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	1e5a      	subs	r2, r3, #1
 800233c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00f      	beq.n	8002368 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234a:	3310      	adds	r3, #16
 800234c:	4618      	mov	r0, r3
 800234e:	f000 ff7f 	bl	8003250 <xTaskRemoveFromEventList>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d007      	beq.n	8002368 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002358:	4b3c      	ldr	r3, [pc, #240]	; (800244c <xQueueReceive+0x1b4>)
 800235a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	f3bf 8f4f 	dsb	sy
 8002364:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002368:	f001 ff9e 	bl	80042a8 <vPortExitCritical>
				return pdPASS;
 800236c:	2301      	movs	r3, #1
 800236e:	e069      	b.n	8002444 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d103      	bne.n	800237e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002376:	f001 ff97 	bl	80042a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800237a:	2300      	movs	r3, #0
 800237c:	e062      	b.n	8002444 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800237e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002380:	2b00      	cmp	r3, #0
 8002382:	d106      	bne.n	8002392 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002384:	f107 0310 	add.w	r3, r7, #16
 8002388:	4618      	mov	r0, r3
 800238a:	f000 ffc3 	bl	8003314 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800238e:	2301      	movs	r3, #1
 8002390:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002392:	f001 ff89 	bl	80042a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002396:	f000 fd3f 	bl	8002e18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800239a:	f001 ff57 	bl	800424c <vPortEnterCritical>
 800239e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023a4:	b25b      	sxtb	r3, r3
 80023a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023aa:	d103      	bne.n	80023b4 <xQueueReceive+0x11c>
 80023ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023ba:	b25b      	sxtb	r3, r3
 80023bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c0:	d103      	bne.n	80023ca <xQueueReceive+0x132>
 80023c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023ca:	f001 ff6d 	bl	80042a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80023ce:	1d3a      	adds	r2, r7, #4
 80023d0:	f107 0310 	add.w	r3, r7, #16
 80023d4:	4611      	mov	r1, r2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 ffb2 	bl	8003340 <xTaskCheckForTimeOut>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d123      	bne.n	800242a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023e4:	f000 fa58 	bl	8002898 <prvIsQueueEmpty>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d017      	beq.n	800241e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80023ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f0:	3324      	adds	r3, #36	; 0x24
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	4611      	mov	r1, r2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 fedc 	bl	80031b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80023fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023fe:	f000 f9f9 	bl	80027f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002402:	f000 fd17 	bl	8002e34 <xTaskResumeAll>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d189      	bne.n	8002320 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800240c:	4b0f      	ldr	r3, [pc, #60]	; (800244c <xQueueReceive+0x1b4>)
 800240e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	f3bf 8f4f 	dsb	sy
 8002418:	f3bf 8f6f 	isb	sy
 800241c:	e780      	b.n	8002320 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800241e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002420:	f000 f9e8 	bl	80027f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002424:	f000 fd06 	bl	8002e34 <xTaskResumeAll>
 8002428:	e77a      	b.n	8002320 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800242a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800242c:	f000 f9e2 	bl	80027f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002430:	f000 fd00 	bl	8002e34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002434:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002436:	f000 fa2f 	bl	8002898 <prvIsQueueEmpty>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	f43f af6f 	beq.w	8002320 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002442:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002444:	4618      	mov	r0, r3
 8002446:	3730      	adds	r7, #48	; 0x30
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	e000ed04 	.word	0xe000ed04

08002450 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08e      	sub	sp, #56	; 0x38
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800245a:	2300      	movs	r3, #0
 800245c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002462:	2300      	movs	r3, #0
 8002464:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002468:	2b00      	cmp	r3, #0
 800246a:	d109      	bne.n	8002480 <xQueueSemaphoreTake+0x30>
 800246c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002470:	f383 8811 	msr	BASEPRI, r3
 8002474:	f3bf 8f6f 	isb	sy
 8002478:	f3bf 8f4f 	dsb	sy
 800247c:	623b      	str	r3, [r7, #32]
 800247e:	e7fe      	b.n	800247e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	2b00      	cmp	r3, #0
 8002486:	d009      	beq.n	800249c <xQueueSemaphoreTake+0x4c>
 8002488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800248c:	f383 8811 	msr	BASEPRI, r3
 8002490:	f3bf 8f6f 	isb	sy
 8002494:	f3bf 8f4f 	dsb	sy
 8002498:	61fb      	str	r3, [r7, #28]
 800249a:	e7fe      	b.n	800249a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800249c:	f001 f88e 	bl	80035bc <xTaskGetSchedulerState>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d102      	bne.n	80024ac <xQueueSemaphoreTake+0x5c>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <xQueueSemaphoreTake+0x60>
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <xQueueSemaphoreTake+0x62>
 80024b0:	2300      	movs	r3, #0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d109      	bne.n	80024ca <xQueueSemaphoreTake+0x7a>
 80024b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ba:	f383 8811 	msr	BASEPRI, r3
 80024be:	f3bf 8f6f 	isb	sy
 80024c2:	f3bf 8f4f 	dsb	sy
 80024c6:	61bb      	str	r3, [r7, #24]
 80024c8:	e7fe      	b.n	80024c8 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80024ca:	f001 febf 	bl	800424c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80024ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80024d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d024      	beq.n	8002524 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80024da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024dc:	1e5a      	subs	r2, r3, #1
 80024de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80024e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d104      	bne.n	80024f4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80024ea:	f001 f9d9 	bl	80038a0 <pvTaskIncrementMutexHeldCount>
 80024ee:	4602      	mov	r2, r0
 80024f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00f      	beq.n	800251c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fe:	3310      	adds	r3, #16
 8002500:	4618      	mov	r0, r3
 8002502:	f000 fea5 	bl	8003250 <xTaskRemoveFromEventList>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d007      	beq.n	800251c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800250c:	4b53      	ldr	r3, [pc, #332]	; (800265c <xQueueSemaphoreTake+0x20c>)
 800250e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	f3bf 8f4f 	dsb	sy
 8002518:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800251c:	f001 fec4 	bl	80042a8 <vPortExitCritical>
				return pdPASS;
 8002520:	2301      	movs	r3, #1
 8002522:	e096      	b.n	8002652 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d110      	bne.n	800254c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800252a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252c:	2b00      	cmp	r3, #0
 800252e:	d009      	beq.n	8002544 <xQueueSemaphoreTake+0xf4>
 8002530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002534:	f383 8811 	msr	BASEPRI, r3
 8002538:	f3bf 8f6f 	isb	sy
 800253c:	f3bf 8f4f 	dsb	sy
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	e7fe      	b.n	8002542 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002544:	f001 feb0 	bl	80042a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002548:	2300      	movs	r3, #0
 800254a:	e082      	b.n	8002652 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800254c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800254e:	2b00      	cmp	r3, #0
 8002550:	d106      	bne.n	8002560 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002552:	f107 030c 	add.w	r3, r7, #12
 8002556:	4618      	mov	r0, r3
 8002558:	f000 fedc 	bl	8003314 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800255c:	2301      	movs	r3, #1
 800255e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002560:	f001 fea2 	bl	80042a8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002564:	f000 fc58 	bl	8002e18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002568:	f001 fe70 	bl	800424c <vPortEnterCritical>
 800256c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002572:	b25b      	sxtb	r3, r3
 8002574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002578:	d103      	bne.n	8002582 <xQueueSemaphoreTake+0x132>
 800257a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002584:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002588:	b25b      	sxtb	r3, r3
 800258a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258e:	d103      	bne.n	8002598 <xQueueSemaphoreTake+0x148>
 8002590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002598:	f001 fe86 	bl	80042a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800259c:	463a      	mov	r2, r7
 800259e:	f107 030c 	add.w	r3, r7, #12
 80025a2:	4611      	mov	r1, r2
 80025a4:	4618      	mov	r0, r3
 80025a6:	f000 fecb 	bl	8003340 <xTaskCheckForTimeOut>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d132      	bne.n	8002616 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025b2:	f000 f971 	bl	8002898 <prvIsQueueEmpty>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d026      	beq.n	800260a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80025bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d109      	bne.n	80025d8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80025c4:	f001 fe42 	bl	800424c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80025c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f001 f813 	bl	80035f8 <xTaskPriorityInherit>
 80025d2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80025d4:	f001 fe68 	bl	80042a8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80025d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025da:	3324      	adds	r3, #36	; 0x24
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	4611      	mov	r1, r2
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 fde7 	bl	80031b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80025e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025e8:	f000 f904 	bl	80027f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80025ec:	f000 fc22 	bl	8002e34 <xTaskResumeAll>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f47f af69 	bne.w	80024ca <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80025f8:	4b18      	ldr	r3, [pc, #96]	; (800265c <xQueueSemaphoreTake+0x20c>)
 80025fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	f3bf 8f4f 	dsb	sy
 8002604:	f3bf 8f6f 	isb	sy
 8002608:	e75f      	b.n	80024ca <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800260a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800260c:	f000 f8f2 	bl	80027f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002610:	f000 fc10 	bl	8002e34 <xTaskResumeAll>
 8002614:	e759      	b.n	80024ca <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002616:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002618:	f000 f8ec 	bl	80027f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800261c:	f000 fc0a 	bl	8002e34 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002620:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002622:	f000 f939 	bl	8002898 <prvIsQueueEmpty>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	f43f af4e 	beq.w	80024ca <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800262e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00d      	beq.n	8002650 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8002634:	f001 fe0a 	bl	800424c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002638:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800263a:	f000 f833 	bl	80026a4 <prvGetDisinheritPriorityAfterTimeout>
 800263e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002646:	4618      	mov	r0, r3
 8002648:	f001 f8aa 	bl	80037a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800264c:	f001 fe2c 	bl	80042a8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002650:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002652:	4618      	mov	r0, r3
 8002654:	3738      	adds	r7, #56	; 0x38
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	e000ed04 	.word	0xe000ed04

08002660 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d109      	bne.n	8002686 <uxQueueSpacesAvailable+0x26>
 8002672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002676:	f383 8811 	msr	BASEPRI, r3
 800267a:	f3bf 8f6f 	isb	sy
 800267e:	f3bf 8f4f 	dsb	sy
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	e7fe      	b.n	8002684 <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 8002686:	f001 fde1 	bl	800424c <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8002696:	f001 fe07 	bl	80042a8 <vPortExitCritical>

	return uxReturn;
 800269a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d006      	beq.n	80026c2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	e001      	b.n	80026c6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80026c6:	68fb      	ldr	r3, [r7, #12]
	}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10d      	bne.n	800270e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d14d      	bne.n	8002796 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 ffe2 	bl	80036c8 <xTaskPriorityDisinherit>
 8002704:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	e043      	b.n	8002796 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d119      	bne.n	8002748 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6858      	ldr	r0, [r3, #4]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	461a      	mov	r2, r3
 800271e:	68b9      	ldr	r1, [r7, #8]
 8002720:	f002 f8a8 	bl	8004874 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	441a      	add	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	429a      	cmp	r2, r3
 800273c:	d32b      	bcc.n	8002796 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	e026      	b.n	8002796 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	68d8      	ldr	r0, [r3, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	461a      	mov	r2, r3
 8002752:	68b9      	ldr	r1, [r7, #8]
 8002754:	f002 f88e 	bl	8004874 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	68da      	ldr	r2, [r3, #12]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	425b      	negs	r3, r3
 8002762:	441a      	add	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d207      	bcs.n	8002784 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	425b      	negs	r3, r3
 800277e:	441a      	add	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b02      	cmp	r3, #2
 8002788:	d105      	bne.n	8002796 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	3b01      	subs	r3, #1
 8002794:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1c5a      	adds	r2, r3, #1
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800279e:	697b      	ldr	r3, [r7, #20]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d018      	beq.n	80027ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	441a      	add	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68da      	ldr	r2, [r3, #12]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d303      	bcc.n	80027dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68d9      	ldr	r1, [r3, #12]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	461a      	mov	r2, r3
 80027e6:	6838      	ldr	r0, [r7, #0]
 80027e8:	f002 f844 	bl	8004874 <memcpy>
	}
}
 80027ec:	bf00      	nop
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80027fc:	f001 fd26 	bl	800424c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002806:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002808:	e011      	b.n	800282e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	2b00      	cmp	r3, #0
 8002810:	d012      	beq.n	8002838 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3324      	adds	r3, #36	; 0x24
 8002816:	4618      	mov	r0, r3
 8002818:	f000 fd1a 	bl	8003250 <xTaskRemoveFromEventList>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002822:	f000 fded 	bl	8003400 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002826:	7bfb      	ldrb	r3, [r7, #15]
 8002828:	3b01      	subs	r3, #1
 800282a:	b2db      	uxtb	r3, r3
 800282c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800282e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002832:	2b00      	cmp	r3, #0
 8002834:	dce9      	bgt.n	800280a <prvUnlockQueue+0x16>
 8002836:	e000      	b.n	800283a <prvUnlockQueue+0x46>
					break;
 8002838:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	22ff      	movs	r2, #255	; 0xff
 800283e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002842:	f001 fd31 	bl	80042a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002846:	f001 fd01 	bl	800424c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002850:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002852:	e011      	b.n	8002878 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d012      	beq.n	8002882 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3310      	adds	r3, #16
 8002860:	4618      	mov	r0, r3
 8002862:	f000 fcf5 	bl	8003250 <xTaskRemoveFromEventList>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800286c:	f000 fdc8 	bl	8003400 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002870:	7bbb      	ldrb	r3, [r7, #14]
 8002872:	3b01      	subs	r3, #1
 8002874:	b2db      	uxtb	r3, r3
 8002876:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002878:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800287c:	2b00      	cmp	r3, #0
 800287e:	dce9      	bgt.n	8002854 <prvUnlockQueue+0x60>
 8002880:	e000      	b.n	8002884 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002882:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	22ff      	movs	r2, #255	; 0xff
 8002888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800288c:	f001 fd0c 	bl	80042a8 <vPortExitCritical>
}
 8002890:	bf00      	nop
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80028a0:	f001 fcd4 	bl	800424c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d102      	bne.n	80028b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80028ac:	2301      	movs	r3, #1
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	e001      	b.n	80028b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80028b6:	f001 fcf7 	bl	80042a8 <vPortExitCritical>

	return xReturn;
 80028ba:	68fb      	ldr	r3, [r7, #12]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80028cc:	f001 fcbe 	bl	800424c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d8:	429a      	cmp	r2, r3
 80028da:	d102      	bne.n	80028e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80028dc:	2301      	movs	r3, #1
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	e001      	b.n	80028e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80028e6:	f001 fcdf 	bl	80042a8 <vPortExitCritical>

	return xReturn;
 80028ea:	68fb      	ldr	r3, [r7, #12]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	e014      	b.n	800292e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002904:	4a0e      	ldr	r2, [pc, #56]	; (8002940 <vQueueAddToRegistry+0x4c>)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10b      	bne.n	8002928 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002910:	490b      	ldr	r1, [pc, #44]	; (8002940 <vQueueAddToRegistry+0x4c>)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800291a:	4a09      	ldr	r2, [pc, #36]	; (8002940 <vQueueAddToRegistry+0x4c>)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4413      	add	r3, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002926:	e005      	b.n	8002934 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	3301      	adds	r3, #1
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2b07      	cmp	r3, #7
 8002932:	d9e7      	bls.n	8002904 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002934:	bf00      	nop
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	20004980 	.word	0x20004980

08002944 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002954:	f001 fc7a 	bl	800424c <vPortEnterCritical>
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800295e:	b25b      	sxtb	r3, r3
 8002960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002964:	d103      	bne.n	800296e <vQueueWaitForMessageRestricted+0x2a>
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002974:	b25b      	sxtb	r3, r3
 8002976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297a:	d103      	bne.n	8002984 <vQueueWaitForMessageRestricted+0x40>
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002984:	f001 fc90 	bl	80042a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298c:	2b00      	cmp	r3, #0
 800298e:	d106      	bne.n	800299e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	3324      	adds	r3, #36	; 0x24
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	68b9      	ldr	r1, [r7, #8]
 8002998:	4618      	mov	r0, r3
 800299a:	f000 fc2f 	bl	80031fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800299e:	6978      	ldr	r0, [r7, #20]
 80029a0:	f7ff ff28 	bl	80027f4 <prvUnlockQueue>
	}
 80029a4:	bf00      	nop
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08e      	sub	sp, #56	; 0x38
 80029b0:	af04      	add	r7, sp, #16
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
 80029b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80029ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d109      	bne.n	80029d4 <xTaskCreateStatic+0x28>
 80029c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c4:	f383 8811 	msr	BASEPRI, r3
 80029c8:	f3bf 8f6f 	isb	sy
 80029cc:	f3bf 8f4f 	dsb	sy
 80029d0:	623b      	str	r3, [r7, #32]
 80029d2:	e7fe      	b.n	80029d2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80029d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d109      	bne.n	80029ee <xTaskCreateStatic+0x42>
 80029da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029de:	f383 8811 	msr	BASEPRI, r3
 80029e2:	f3bf 8f6f 	isb	sy
 80029e6:	f3bf 8f4f 	dsb	sy
 80029ea:	61fb      	str	r3, [r7, #28]
 80029ec:	e7fe      	b.n	80029ec <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80029ee:	235c      	movs	r3, #92	; 0x5c
 80029f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	2b5c      	cmp	r3, #92	; 0x5c
 80029f6:	d009      	beq.n	8002a0c <xTaskCreateStatic+0x60>
 80029f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029fc:	f383 8811 	msr	BASEPRI, r3
 8002a00:	f3bf 8f6f 	isb	sy
 8002a04:	f3bf 8f4f 	dsb	sy
 8002a08:	61bb      	str	r3, [r7, #24]
 8002a0a:	e7fe      	b.n	8002a0a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002a0c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d01e      	beq.n	8002a52 <xTaskCreateStatic+0xa6>
 8002a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d01b      	beq.n	8002a52 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a22:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	9303      	str	r3, [sp, #12]
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	9302      	str	r3, [sp, #8]
 8002a34:	f107 0314 	add.w	r3, r7, #20
 8002a38:	9301      	str	r3, [sp, #4]
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	68b9      	ldr	r1, [r7, #8]
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 f850 	bl	8002aea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a4c:	f000 f8dc 	bl	8002c08 <prvAddNewTaskToReadyList>
 8002a50:	e001      	b.n	8002a56 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002a56:	697b      	ldr	r3, [r7, #20]
	}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3728      	adds	r7, #40	; 0x28
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08c      	sub	sp, #48	; 0x30
 8002a64:	af04      	add	r7, sp, #16
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	603b      	str	r3, [r7, #0]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002a70:	88fb      	ldrh	r3, [r7, #6]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4618      	mov	r0, r3
 8002a76:	f001 fd03 	bl	8004480 <pvPortMalloc>
 8002a7a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00e      	beq.n	8002aa0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002a82:	205c      	movs	r0, #92	; 0x5c
 8002a84:	f001 fcfc 	bl	8004480 <pvPortMalloc>
 8002a88:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	631a      	str	r2, [r3, #48]	; 0x30
 8002a96:	e005      	b.n	8002aa4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002a98:	6978      	ldr	r0, [r7, #20]
 8002a9a:	f001 fdb3 	bl	8004604 <vPortFree>
 8002a9e:	e001      	b.n	8002aa4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d017      	beq.n	8002ada <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ab2:	88fa      	ldrh	r2, [r7, #6]
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	9303      	str	r3, [sp, #12]
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	9302      	str	r3, [sp, #8]
 8002abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002abe:	9301      	str	r3, [sp, #4]
 8002ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	68b9      	ldr	r1, [r7, #8]
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f80e 	bl	8002aea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ace:	69f8      	ldr	r0, [r7, #28]
 8002ad0:	f000 f89a 	bl	8002c08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	61bb      	str	r3, [r7, #24]
 8002ad8:	e002      	b.n	8002ae0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ada:	f04f 33ff 	mov.w	r3, #4294967295
 8002ade:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002ae0:	69bb      	ldr	r3, [r7, #24]
	}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3720      	adds	r7, #32
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b088      	sub	sp, #32
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	60f8      	str	r0, [r7, #12]
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607a      	str	r2, [r7, #4]
 8002af6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	461a      	mov	r2, r3
 8002b02:	21a5      	movs	r1, #165	; 0xa5
 8002b04:	f001 fec1 	bl	800488a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b12:	3b01      	subs	r3, #1
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	f023 0307 	bic.w	r3, r3, #7
 8002b20:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d009      	beq.n	8002b40 <prvInitialiseNewTask+0x56>
 8002b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b30:	f383 8811 	msr	BASEPRI, r3
 8002b34:	f3bf 8f6f 	isb	sy
 8002b38:	f3bf 8f4f 	dsb	sy
 8002b3c:	617b      	str	r3, [r7, #20]
 8002b3e:	e7fe      	b.n	8002b3e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d01f      	beq.n	8002b86 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b46:	2300      	movs	r3, #0
 8002b48:	61fb      	str	r3, [r7, #28]
 8002b4a:	e012      	b.n	8002b72 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	4413      	add	r3, r2
 8002b52:	7819      	ldrb	r1, [r3, #0]
 8002b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	4413      	add	r3, r2
 8002b5a:	3334      	adds	r3, #52	; 0x34
 8002b5c:	460a      	mov	r2, r1
 8002b5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	4413      	add	r3, r2
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d006      	beq.n	8002b7a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	61fb      	str	r3, [r7, #28]
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	2b0f      	cmp	r3, #15
 8002b76:	d9e9      	bls.n	8002b4c <prvInitialiseNewTask+0x62>
 8002b78:	e000      	b.n	8002b7c <prvInitialiseNewTask+0x92>
			{
				break;
 8002b7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b84:	e003      	b.n	8002b8e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b90:	2b37      	cmp	r3, #55	; 0x37
 8002b92:	d901      	bls.n	8002b98 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b94:	2337      	movs	r3, #55	; 0x37
 8002b96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ba2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bac:	3304      	adds	r3, #4
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fe ffe0 	bl	8001b74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb6:	3318      	adds	r3, #24
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7fe ffdb 	bl	8001b74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	68f9      	ldr	r1, [r7, #12]
 8002be6:	69b8      	ldr	r0, [r7, #24]
 8002be8:	f001 fa08 	bl	8003ffc <pxPortInitialiseStack>
 8002bec:	4602      	mov	r2, r0
 8002bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002bfe:	bf00      	nop
 8002c00:	3720      	adds	r7, #32
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002c10:	f001 fb1c 	bl	800424c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002c14:	4b2d      	ldr	r3, [pc, #180]	; (8002ccc <prvAddNewTaskToReadyList+0xc4>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	4a2c      	ldr	r2, [pc, #176]	; (8002ccc <prvAddNewTaskToReadyList+0xc4>)
 8002c1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002c1e:	4b2c      	ldr	r3, [pc, #176]	; (8002cd0 <prvAddNewTaskToReadyList+0xc8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d109      	bne.n	8002c3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002c26:	4a2a      	ldr	r2, [pc, #168]	; (8002cd0 <prvAddNewTaskToReadyList+0xc8>)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c2c:	4b27      	ldr	r3, [pc, #156]	; (8002ccc <prvAddNewTaskToReadyList+0xc4>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d110      	bne.n	8002c56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002c34:	f000 fc08 	bl	8003448 <prvInitialiseTaskLists>
 8002c38:	e00d      	b.n	8002c56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002c3a:	4b26      	ldr	r3, [pc, #152]	; (8002cd4 <prvAddNewTaskToReadyList+0xcc>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d109      	bne.n	8002c56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c42:	4b23      	ldr	r3, [pc, #140]	; (8002cd0 <prvAddNewTaskToReadyList+0xc8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d802      	bhi.n	8002c56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002c50:	4a1f      	ldr	r2, [pc, #124]	; (8002cd0 <prvAddNewTaskToReadyList+0xc8>)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002c56:	4b20      	ldr	r3, [pc, #128]	; (8002cd8 <prvAddNewTaskToReadyList+0xd0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	4a1e      	ldr	r2, [pc, #120]	; (8002cd8 <prvAddNewTaskToReadyList+0xd0>)
 8002c5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002c60:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <prvAddNewTaskToReadyList+0xd0>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c6c:	4b1b      	ldr	r3, [pc, #108]	; (8002cdc <prvAddNewTaskToReadyList+0xd4>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d903      	bls.n	8002c7c <prvAddNewTaskToReadyList+0x74>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c78:	4a18      	ldr	r2, [pc, #96]	; (8002cdc <prvAddNewTaskToReadyList+0xd4>)
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4a15      	ldr	r2, [pc, #84]	; (8002ce0 <prvAddNewTaskToReadyList+0xd8>)
 8002c8a:	441a      	add	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3304      	adds	r3, #4
 8002c90:	4619      	mov	r1, r3
 8002c92:	4610      	mov	r0, r2
 8002c94:	f7fe ff7b 	bl	8001b8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002c98:	f001 fb06 	bl	80042a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002c9c:	4b0d      	ldr	r3, [pc, #52]	; (8002cd4 <prvAddNewTaskToReadyList+0xcc>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00e      	beq.n	8002cc2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ca4:	4b0a      	ldr	r3, [pc, #40]	; (8002cd0 <prvAddNewTaskToReadyList+0xc8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d207      	bcs.n	8002cc2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002cb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <prvAddNewTaskToReadyList+0xdc>)
 8002cb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	f3bf 8f4f 	dsb	sy
 8002cbe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002cc2:	bf00      	nop
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	20000bc8 	.word	0x20000bc8
 8002cd0:	200006f4 	.word	0x200006f4
 8002cd4:	20000bd4 	.word	0x20000bd4
 8002cd8:	20000be4 	.word	0x20000be4
 8002cdc:	20000bd0 	.word	0x20000bd0
 8002ce0:	200006f8 	.word	0x200006f8
 8002ce4:	e000ed04 	.word	0xe000ed04

08002ce8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d016      	beq.n	8002d28 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002cfa:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <vTaskDelay+0x60>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d009      	beq.n	8002d16 <vTaskDelay+0x2e>
 8002d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d06:	f383 8811 	msr	BASEPRI, r3
 8002d0a:	f3bf 8f6f 	isb	sy
 8002d0e:	f3bf 8f4f 	dsb	sy
 8002d12:	60bb      	str	r3, [r7, #8]
 8002d14:	e7fe      	b.n	8002d14 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002d16:	f000 f87f 	bl	8002e18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 fdd3 	bl	80038c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002d22:	f000 f887 	bl	8002e34 <xTaskResumeAll>
 8002d26:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d107      	bne.n	8002d3e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002d2e:	4b07      	ldr	r3, [pc, #28]	; (8002d4c <vTaskDelay+0x64>)
 8002d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	f3bf 8f4f 	dsb	sy
 8002d3a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002d3e:	bf00      	nop
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	20000bf0 	.word	0x20000bf0
 8002d4c:	e000ed04 	.word	0xe000ed04

08002d50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08a      	sub	sp, #40	; 0x28
 8002d54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002d5e:	463a      	mov	r2, r7
 8002d60:	1d39      	adds	r1, r7, #4
 8002d62:	f107 0308 	add.w	r3, r7, #8
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fe feb0 	bl	8001acc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002d6c:	6839      	ldr	r1, [r7, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	9202      	str	r2, [sp, #8]
 8002d74:	9301      	str	r3, [sp, #4]
 8002d76:	2300      	movs	r3, #0
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	460a      	mov	r2, r1
 8002d7e:	4920      	ldr	r1, [pc, #128]	; (8002e00 <vTaskStartScheduler+0xb0>)
 8002d80:	4820      	ldr	r0, [pc, #128]	; (8002e04 <vTaskStartScheduler+0xb4>)
 8002d82:	f7ff fe13 	bl	80029ac <xTaskCreateStatic>
 8002d86:	4602      	mov	r2, r0
 8002d88:	4b1f      	ldr	r3, [pc, #124]	; (8002e08 <vTaskStartScheduler+0xb8>)
 8002d8a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002d8c:	4b1e      	ldr	r3, [pc, #120]	; (8002e08 <vTaskStartScheduler+0xb8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d002      	beq.n	8002d9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002d94:	2301      	movs	r3, #1
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	e001      	b.n	8002d9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d102      	bne.n	8002daa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002da4:	f000 fde4 	bl	8003970 <xTimerCreateTimerTask>
 8002da8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d115      	bne.n	8002ddc <vTaskStartScheduler+0x8c>
 8002db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db4:	f383 8811 	msr	BASEPRI, r3
 8002db8:	f3bf 8f6f 	isb	sy
 8002dbc:	f3bf 8f4f 	dsb	sy
 8002dc0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002dc2:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <vTaskStartScheduler+0xbc>)
 8002dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002dca:	4b11      	ldr	r3, [pc, #68]	; (8002e10 <vTaskStartScheduler+0xc0>)
 8002dcc:	2201      	movs	r2, #1
 8002dce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002dd0:	4b10      	ldr	r3, [pc, #64]	; (8002e14 <vTaskStartScheduler+0xc4>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002dd6:	f001 f99b 	bl	8004110 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002dda:	e00d      	b.n	8002df8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de2:	d109      	bne.n	8002df8 <vTaskStartScheduler+0xa8>
 8002de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de8:	f383 8811 	msr	BASEPRI, r3
 8002dec:	f3bf 8f6f 	isb	sy
 8002df0:	f3bf 8f4f 	dsb	sy
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	e7fe      	b.n	8002df6 <vTaskStartScheduler+0xa6>
}
 8002df8:	bf00      	nop
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	080048d8 	.word	0x080048d8
 8002e04:	08003419 	.word	0x08003419
 8002e08:	20000bec 	.word	0x20000bec
 8002e0c:	20000be8 	.word	0x20000be8
 8002e10:	20000bd4 	.word	0x20000bd4
 8002e14:	20000bcc 	.word	0x20000bcc

08002e18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002e1c:	4b04      	ldr	r3, [pc, #16]	; (8002e30 <vTaskSuspendAll+0x18>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	3301      	adds	r3, #1
 8002e22:	4a03      	ldr	r2, [pc, #12]	; (8002e30 <vTaskSuspendAll+0x18>)
 8002e24:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002e26:	bf00      	nop
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	20000bf0 	.word	0x20000bf0

08002e34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002e42:	4b41      	ldr	r3, [pc, #260]	; (8002f48 <xTaskResumeAll+0x114>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d109      	bne.n	8002e5e <xTaskResumeAll+0x2a>
 8002e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4e:	f383 8811 	msr	BASEPRI, r3
 8002e52:	f3bf 8f6f 	isb	sy
 8002e56:	f3bf 8f4f 	dsb	sy
 8002e5a:	603b      	str	r3, [r7, #0]
 8002e5c:	e7fe      	b.n	8002e5c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002e5e:	f001 f9f5 	bl	800424c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002e62:	4b39      	ldr	r3, [pc, #228]	; (8002f48 <xTaskResumeAll+0x114>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	3b01      	subs	r3, #1
 8002e68:	4a37      	ldr	r2, [pc, #220]	; (8002f48 <xTaskResumeAll+0x114>)
 8002e6a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e6c:	4b36      	ldr	r3, [pc, #216]	; (8002f48 <xTaskResumeAll+0x114>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d162      	bne.n	8002f3a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e74:	4b35      	ldr	r3, [pc, #212]	; (8002f4c <xTaskResumeAll+0x118>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d05e      	beq.n	8002f3a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e7c:	e02f      	b.n	8002ede <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e7e:	4b34      	ldr	r3, [pc, #208]	; (8002f50 <xTaskResumeAll+0x11c>)
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	3318      	adds	r3, #24
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fe fedc 	bl	8001c48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	3304      	adds	r3, #4
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fe fed7 	bl	8001c48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e9e:	4b2d      	ldr	r3, [pc, #180]	; (8002f54 <xTaskResumeAll+0x120>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d903      	bls.n	8002eae <xTaskResumeAll+0x7a>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eaa:	4a2a      	ldr	r2, [pc, #168]	; (8002f54 <xTaskResumeAll+0x120>)
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4a27      	ldr	r2, [pc, #156]	; (8002f58 <xTaskResumeAll+0x124>)
 8002ebc:	441a      	add	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	f7fe fe62 	bl	8001b8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ece:	4b23      	ldr	r3, [pc, #140]	; (8002f5c <xTaskResumeAll+0x128>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d302      	bcc.n	8002ede <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002ed8:	4b21      	ldr	r3, [pc, #132]	; (8002f60 <xTaskResumeAll+0x12c>)
 8002eda:	2201      	movs	r2, #1
 8002edc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ede:	4b1c      	ldr	r3, [pc, #112]	; (8002f50 <xTaskResumeAll+0x11c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1cb      	bne.n	8002e7e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002eec:	f000 fb46 	bl	800357c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002ef0:	4b1c      	ldr	r3, [pc, #112]	; (8002f64 <xTaskResumeAll+0x130>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d010      	beq.n	8002f1e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002efc:	f000 f846 	bl	8002f8c <xTaskIncrementTick>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d002      	beq.n	8002f0c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002f06:	4b16      	ldr	r3, [pc, #88]	; (8002f60 <xTaskResumeAll+0x12c>)
 8002f08:	2201      	movs	r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1f1      	bne.n	8002efc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002f18:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <xTaskResumeAll+0x130>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002f1e:	4b10      	ldr	r3, [pc, #64]	; (8002f60 <xTaskResumeAll+0x12c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d009      	beq.n	8002f3a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002f26:	2301      	movs	r3, #1
 8002f28:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002f2a:	4b0f      	ldr	r3, [pc, #60]	; (8002f68 <xTaskResumeAll+0x134>)
 8002f2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	f3bf 8f4f 	dsb	sy
 8002f36:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002f3a:	f001 f9b5 	bl	80042a8 <vPortExitCritical>

	return xAlreadyYielded;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	20000bf0 	.word	0x20000bf0
 8002f4c:	20000bc8 	.word	0x20000bc8
 8002f50:	20000b88 	.word	0x20000b88
 8002f54:	20000bd0 	.word	0x20000bd0
 8002f58:	200006f8 	.word	0x200006f8
 8002f5c:	200006f4 	.word	0x200006f4
 8002f60:	20000bdc 	.word	0x20000bdc
 8002f64:	20000bd8 	.word	0x20000bd8
 8002f68:	e000ed04 	.word	0xe000ed04

08002f6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002f72:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <xTaskGetTickCount+0x1c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002f78:	687b      	ldr	r3, [r7, #4]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	20000bcc 	.word	0x20000bcc

08002f8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002f92:	2300      	movs	r3, #0
 8002f94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f96:	4b4e      	ldr	r3, [pc, #312]	; (80030d0 <xTaskIncrementTick+0x144>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f040 8088 	bne.w	80030b0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002fa0:	4b4c      	ldr	r3, [pc, #304]	; (80030d4 <xTaskIncrementTick+0x148>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002fa8:	4a4a      	ldr	r2, [pc, #296]	; (80030d4 <xTaskIncrementTick+0x148>)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d11f      	bne.n	8002ff4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002fb4:	4b48      	ldr	r3, [pc, #288]	; (80030d8 <xTaskIncrementTick+0x14c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d009      	beq.n	8002fd2 <xTaskIncrementTick+0x46>
 8002fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc2:	f383 8811 	msr	BASEPRI, r3
 8002fc6:	f3bf 8f6f 	isb	sy
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	603b      	str	r3, [r7, #0]
 8002fd0:	e7fe      	b.n	8002fd0 <xTaskIncrementTick+0x44>
 8002fd2:	4b41      	ldr	r3, [pc, #260]	; (80030d8 <xTaskIncrementTick+0x14c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	4b40      	ldr	r3, [pc, #256]	; (80030dc <xTaskIncrementTick+0x150>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a3e      	ldr	r2, [pc, #248]	; (80030d8 <xTaskIncrementTick+0x14c>)
 8002fde:	6013      	str	r3, [r2, #0]
 8002fe0:	4a3e      	ldr	r2, [pc, #248]	; (80030dc <xTaskIncrementTick+0x150>)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	4b3e      	ldr	r3, [pc, #248]	; (80030e0 <xTaskIncrementTick+0x154>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	3301      	adds	r3, #1
 8002fec:	4a3c      	ldr	r2, [pc, #240]	; (80030e0 <xTaskIncrementTick+0x154>)
 8002fee:	6013      	str	r3, [r2, #0]
 8002ff0:	f000 fac4 	bl	800357c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002ff4:	4b3b      	ldr	r3, [pc, #236]	; (80030e4 <xTaskIncrementTick+0x158>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d349      	bcc.n	8003092 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ffe:	4b36      	ldr	r3, [pc, #216]	; (80030d8 <xTaskIncrementTick+0x14c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d104      	bne.n	8003012 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003008:	4b36      	ldr	r3, [pc, #216]	; (80030e4 <xTaskIncrementTick+0x158>)
 800300a:	f04f 32ff 	mov.w	r2, #4294967295
 800300e:	601a      	str	r2, [r3, #0]
					break;
 8003010:	e03f      	b.n	8003092 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003012:	4b31      	ldr	r3, [pc, #196]	; (80030d8 <xTaskIncrementTick+0x14c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	429a      	cmp	r2, r3
 8003028:	d203      	bcs.n	8003032 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800302a:	4a2e      	ldr	r2, [pc, #184]	; (80030e4 <xTaskIncrementTick+0x158>)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003030:	e02f      	b.n	8003092 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	3304      	adds	r3, #4
 8003036:	4618      	mov	r0, r3
 8003038:	f7fe fe06 	bl	8001c48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	2b00      	cmp	r3, #0
 8003042:	d004      	beq.n	800304e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	3318      	adds	r3, #24
 8003048:	4618      	mov	r0, r3
 800304a:	f7fe fdfd 	bl	8001c48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003052:	4b25      	ldr	r3, [pc, #148]	; (80030e8 <xTaskIncrementTick+0x15c>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d903      	bls.n	8003062 <xTaskIncrementTick+0xd6>
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305e:	4a22      	ldr	r2, [pc, #136]	; (80030e8 <xTaskIncrementTick+0x15c>)
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4a1f      	ldr	r2, [pc, #124]	; (80030ec <xTaskIncrementTick+0x160>)
 8003070:	441a      	add	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	3304      	adds	r3, #4
 8003076:	4619      	mov	r1, r3
 8003078:	4610      	mov	r0, r2
 800307a:	f7fe fd88 	bl	8001b8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003082:	4b1b      	ldr	r3, [pc, #108]	; (80030f0 <xTaskIncrementTick+0x164>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003088:	429a      	cmp	r2, r3
 800308a:	d3b8      	bcc.n	8002ffe <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800308c:	2301      	movs	r3, #1
 800308e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003090:	e7b5      	b.n	8002ffe <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003092:	4b17      	ldr	r3, [pc, #92]	; (80030f0 <xTaskIncrementTick+0x164>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003098:	4914      	ldr	r1, [pc, #80]	; (80030ec <xTaskIncrementTick+0x160>)
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d907      	bls.n	80030ba <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80030aa:	2301      	movs	r3, #1
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	e004      	b.n	80030ba <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80030b0:	4b10      	ldr	r3, [pc, #64]	; (80030f4 <xTaskIncrementTick+0x168>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	3301      	adds	r3, #1
 80030b6:	4a0f      	ldr	r2, [pc, #60]	; (80030f4 <xTaskIncrementTick+0x168>)
 80030b8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80030ba:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <xTaskIncrementTick+0x16c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80030c2:	2301      	movs	r3, #1
 80030c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80030c6:	697b      	ldr	r3, [r7, #20]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	20000bf0 	.word	0x20000bf0
 80030d4:	20000bcc 	.word	0x20000bcc
 80030d8:	20000b80 	.word	0x20000b80
 80030dc:	20000b84 	.word	0x20000b84
 80030e0:	20000be0 	.word	0x20000be0
 80030e4:	20000be8 	.word	0x20000be8
 80030e8:	20000bd0 	.word	0x20000bd0
 80030ec:	200006f8 	.word	0x200006f8
 80030f0:	200006f4 	.word	0x200006f4
 80030f4:	20000bd8 	.word	0x20000bd8
 80030f8:	20000bdc 	.word	0x20000bdc

080030fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003102:	4b27      	ldr	r3, [pc, #156]	; (80031a0 <vTaskSwitchContext+0xa4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800310a:	4b26      	ldr	r3, [pc, #152]	; (80031a4 <vTaskSwitchContext+0xa8>)
 800310c:	2201      	movs	r2, #1
 800310e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003110:	e040      	b.n	8003194 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003112:	4b24      	ldr	r3, [pc, #144]	; (80031a4 <vTaskSwitchContext+0xa8>)
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003118:	4b23      	ldr	r3, [pc, #140]	; (80031a8 <vTaskSwitchContext+0xac>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	e00f      	b.n	8003140 <vTaskSwitchContext+0x44>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d109      	bne.n	800313a <vTaskSwitchContext+0x3e>
 8003126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800312a:	f383 8811 	msr	BASEPRI, r3
 800312e:	f3bf 8f6f 	isb	sy
 8003132:	f3bf 8f4f 	dsb	sy
 8003136:	607b      	str	r3, [r7, #4]
 8003138:	e7fe      	b.n	8003138 <vTaskSwitchContext+0x3c>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	3b01      	subs	r3, #1
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	491a      	ldr	r1, [pc, #104]	; (80031ac <vTaskSwitchContext+0xb0>)
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0e5      	beq.n	8003120 <vTaskSwitchContext+0x24>
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	4613      	mov	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4a13      	ldr	r2, [pc, #76]	; (80031ac <vTaskSwitchContext+0xb0>)
 8003160:	4413      	add	r3, r2
 8003162:	60bb      	str	r3, [r7, #8]
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	605a      	str	r2, [r3, #4]
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	3308      	adds	r3, #8
 8003176:	429a      	cmp	r2, r3
 8003178:	d104      	bne.n	8003184 <vTaskSwitchContext+0x88>
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	605a      	str	r2, [r3, #4]
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	4a09      	ldr	r2, [pc, #36]	; (80031b0 <vTaskSwitchContext+0xb4>)
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	4a06      	ldr	r2, [pc, #24]	; (80031a8 <vTaskSwitchContext+0xac>)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6013      	str	r3, [r2, #0]
}
 8003194:	bf00      	nop
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	20000bf0 	.word	0x20000bf0
 80031a4:	20000bdc 	.word	0x20000bdc
 80031a8:	20000bd0 	.word	0x20000bd0
 80031ac:	200006f8 	.word	0x200006f8
 80031b0:	200006f4 	.word	0x200006f4

080031b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d109      	bne.n	80031d8 <vTaskPlaceOnEventList+0x24>
 80031c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c8:	f383 8811 	msr	BASEPRI, r3
 80031cc:	f3bf 8f6f 	isb	sy
 80031d0:	f3bf 8f4f 	dsb	sy
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	e7fe      	b.n	80031d6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80031d8:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <vTaskPlaceOnEventList+0x44>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	3318      	adds	r3, #24
 80031de:	4619      	mov	r1, r3
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7fe fcf8 	bl	8001bd6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80031e6:	2101      	movs	r1, #1
 80031e8:	6838      	ldr	r0, [r7, #0]
 80031ea:	f000 fb6d 	bl	80038c8 <prvAddCurrentTaskToDelayedList>
}
 80031ee:	bf00      	nop
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	200006f4 	.word	0x200006f4

080031fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d109      	bne.n	8003222 <vTaskPlaceOnEventListRestricted+0x26>
 800320e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003212:	f383 8811 	msr	BASEPRI, r3
 8003216:	f3bf 8f6f 	isb	sy
 800321a:	f3bf 8f4f 	dsb	sy
 800321e:	617b      	str	r3, [r7, #20]
 8003220:	e7fe      	b.n	8003220 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003222:	4b0a      	ldr	r3, [pc, #40]	; (800324c <vTaskPlaceOnEventListRestricted+0x50>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	3318      	adds	r3, #24
 8003228:	4619      	mov	r1, r3
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f7fe fcaf 	bl	8001b8e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d002      	beq.n	800323c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003236:	f04f 33ff 	mov.w	r3, #4294967295
 800323a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	68b8      	ldr	r0, [r7, #8]
 8003240:	f000 fb42 	bl	80038c8 <prvAddCurrentTaskToDelayedList>
	}
 8003244:	bf00      	nop
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	200006f4 	.word	0x200006f4

08003250 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d109      	bne.n	800327a <xTaskRemoveFromEventList+0x2a>
 8003266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326a:	f383 8811 	msr	BASEPRI, r3
 800326e:	f3bf 8f6f 	isb	sy
 8003272:	f3bf 8f4f 	dsb	sy
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	e7fe      	b.n	8003278 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	3318      	adds	r3, #24
 800327e:	4618      	mov	r0, r3
 8003280:	f7fe fce2 	bl	8001c48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003284:	4b1d      	ldr	r3, [pc, #116]	; (80032fc <xTaskRemoveFromEventList+0xac>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d11d      	bne.n	80032c8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	3304      	adds	r3, #4
 8003290:	4618      	mov	r0, r3
 8003292:	f7fe fcd9 	bl	8001c48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329a:	4b19      	ldr	r3, [pc, #100]	; (8003300 <xTaskRemoveFromEventList+0xb0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d903      	bls.n	80032aa <xTaskRemoveFromEventList+0x5a>
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	4a16      	ldr	r2, [pc, #88]	; (8003300 <xTaskRemoveFromEventList+0xb0>)
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ae:	4613      	mov	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4a13      	ldr	r2, [pc, #76]	; (8003304 <xTaskRemoveFromEventList+0xb4>)
 80032b8:	441a      	add	r2, r3
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	3304      	adds	r3, #4
 80032be:	4619      	mov	r1, r3
 80032c0:	4610      	mov	r0, r2
 80032c2:	f7fe fc64 	bl	8001b8e <vListInsertEnd>
 80032c6:	e005      	b.n	80032d4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	3318      	adds	r3, #24
 80032cc:	4619      	mov	r1, r3
 80032ce:	480e      	ldr	r0, [pc, #56]	; (8003308 <xTaskRemoveFromEventList+0xb8>)
 80032d0:	f7fe fc5d 	bl	8001b8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d8:	4b0c      	ldr	r3, [pc, #48]	; (800330c <xTaskRemoveFromEventList+0xbc>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032de:	429a      	cmp	r2, r3
 80032e0:	d905      	bls.n	80032ee <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80032e2:	2301      	movs	r3, #1
 80032e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80032e6:	4b0a      	ldr	r3, [pc, #40]	; (8003310 <xTaskRemoveFromEventList+0xc0>)
 80032e8:	2201      	movs	r2, #1
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	e001      	b.n	80032f2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80032ee:	2300      	movs	r3, #0
 80032f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80032f2:	697b      	ldr	r3, [r7, #20]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	20000bf0 	.word	0x20000bf0
 8003300:	20000bd0 	.word	0x20000bd0
 8003304:	200006f8 	.word	0x200006f8
 8003308:	20000b88 	.word	0x20000b88
 800330c:	200006f4 	.word	0x200006f4
 8003310:	20000bdc 	.word	0x20000bdc

08003314 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800331c:	4b06      	ldr	r3, [pc, #24]	; (8003338 <vTaskInternalSetTimeOutState+0x24>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003324:	4b05      	ldr	r3, [pc, #20]	; (800333c <vTaskInternalSetTimeOutState+0x28>)
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	605a      	str	r2, [r3, #4]
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	20000be0 	.word	0x20000be0
 800333c:	20000bcc 	.word	0x20000bcc

08003340 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b088      	sub	sp, #32
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d109      	bne.n	8003364 <xTaskCheckForTimeOut+0x24>
 8003350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003354:	f383 8811 	msr	BASEPRI, r3
 8003358:	f3bf 8f6f 	isb	sy
 800335c:	f3bf 8f4f 	dsb	sy
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	e7fe      	b.n	8003362 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d109      	bne.n	800337e <xTaskCheckForTimeOut+0x3e>
 800336a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336e:	f383 8811 	msr	BASEPRI, r3
 8003372:	f3bf 8f6f 	isb	sy
 8003376:	f3bf 8f4f 	dsb	sy
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	e7fe      	b.n	800337c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800337e:	f000 ff65 	bl	800424c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003382:	4b1d      	ldr	r3, [pc, #116]	; (80033f8 <xTaskCheckForTimeOut+0xb8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339a:	d102      	bne.n	80033a2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800339c:	2300      	movs	r3, #0
 800339e:	61fb      	str	r3, [r7, #28]
 80033a0:	e023      	b.n	80033ea <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	4b15      	ldr	r3, [pc, #84]	; (80033fc <xTaskCheckForTimeOut+0xbc>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d007      	beq.n	80033be <xTaskCheckForTimeOut+0x7e>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d302      	bcc.n	80033be <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80033b8:	2301      	movs	r3, #1
 80033ba:	61fb      	str	r3, [r7, #28]
 80033bc:	e015      	b.n	80033ea <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d20b      	bcs.n	80033e0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	1ad2      	subs	r2, r2, r3
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7ff ff9d 	bl	8003314 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80033da:	2300      	movs	r3, #0
 80033dc:	61fb      	str	r3, [r7, #28]
 80033de:	e004      	b.n	80033ea <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80033e6:	2301      	movs	r3, #1
 80033e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80033ea:	f000 ff5d 	bl	80042a8 <vPortExitCritical>

	return xReturn;
 80033ee:	69fb      	ldr	r3, [r7, #28]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3720      	adds	r7, #32
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	20000bcc 	.word	0x20000bcc
 80033fc:	20000be0 	.word	0x20000be0

08003400 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003404:	4b03      	ldr	r3, [pc, #12]	; (8003414 <vTaskMissedYield+0x14>)
 8003406:	2201      	movs	r2, #1
 8003408:	601a      	str	r2, [r3, #0]
}
 800340a:	bf00      	nop
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	20000bdc 	.word	0x20000bdc

08003418 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003420:	f000 f852 	bl	80034c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003424:	4b06      	ldr	r3, [pc, #24]	; (8003440 <prvIdleTask+0x28>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d9f9      	bls.n	8003420 <prvIdleTask+0x8>
			{
				taskYIELD();
 800342c:	4b05      	ldr	r3, [pc, #20]	; (8003444 <prvIdleTask+0x2c>)
 800342e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	f3bf 8f4f 	dsb	sy
 8003438:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800343c:	e7f0      	b.n	8003420 <prvIdleTask+0x8>
 800343e:	bf00      	nop
 8003440:	200006f8 	.word	0x200006f8
 8003444:	e000ed04 	.word	0xe000ed04

08003448 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800344e:	2300      	movs	r3, #0
 8003450:	607b      	str	r3, [r7, #4]
 8003452:	e00c      	b.n	800346e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4a12      	ldr	r2, [pc, #72]	; (80034a8 <prvInitialiseTaskLists+0x60>)
 8003460:	4413      	add	r3, r2
 8003462:	4618      	mov	r0, r3
 8003464:	f7fe fb66 	bl	8001b34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3301      	adds	r3, #1
 800346c:	607b      	str	r3, [r7, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b37      	cmp	r3, #55	; 0x37
 8003472:	d9ef      	bls.n	8003454 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003474:	480d      	ldr	r0, [pc, #52]	; (80034ac <prvInitialiseTaskLists+0x64>)
 8003476:	f7fe fb5d 	bl	8001b34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800347a:	480d      	ldr	r0, [pc, #52]	; (80034b0 <prvInitialiseTaskLists+0x68>)
 800347c:	f7fe fb5a 	bl	8001b34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003480:	480c      	ldr	r0, [pc, #48]	; (80034b4 <prvInitialiseTaskLists+0x6c>)
 8003482:	f7fe fb57 	bl	8001b34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003486:	480c      	ldr	r0, [pc, #48]	; (80034b8 <prvInitialiseTaskLists+0x70>)
 8003488:	f7fe fb54 	bl	8001b34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800348c:	480b      	ldr	r0, [pc, #44]	; (80034bc <prvInitialiseTaskLists+0x74>)
 800348e:	f7fe fb51 	bl	8001b34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003492:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <prvInitialiseTaskLists+0x78>)
 8003494:	4a05      	ldr	r2, [pc, #20]	; (80034ac <prvInitialiseTaskLists+0x64>)
 8003496:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003498:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <prvInitialiseTaskLists+0x7c>)
 800349a:	4a05      	ldr	r2, [pc, #20]	; (80034b0 <prvInitialiseTaskLists+0x68>)
 800349c:	601a      	str	r2, [r3, #0]
}
 800349e:	bf00      	nop
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	200006f8 	.word	0x200006f8
 80034ac:	20000b58 	.word	0x20000b58
 80034b0:	20000b6c 	.word	0x20000b6c
 80034b4:	20000b88 	.word	0x20000b88
 80034b8:	20000b9c 	.word	0x20000b9c
 80034bc:	20000bb4 	.word	0x20000bb4
 80034c0:	20000b80 	.word	0x20000b80
 80034c4:	20000b84 	.word	0x20000b84

080034c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034ce:	e019      	b.n	8003504 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80034d0:	f000 febc 	bl	800424c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034d4:	4b0f      	ldr	r3, [pc, #60]	; (8003514 <prvCheckTasksWaitingTermination+0x4c>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3304      	adds	r3, #4
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fe fbb1 	bl	8001c48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80034e6:	4b0c      	ldr	r3, [pc, #48]	; (8003518 <prvCheckTasksWaitingTermination+0x50>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	4a0a      	ldr	r2, [pc, #40]	; (8003518 <prvCheckTasksWaitingTermination+0x50>)
 80034ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80034f0:	4b0a      	ldr	r3, [pc, #40]	; (800351c <prvCheckTasksWaitingTermination+0x54>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	3b01      	subs	r3, #1
 80034f6:	4a09      	ldr	r2, [pc, #36]	; (800351c <prvCheckTasksWaitingTermination+0x54>)
 80034f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80034fa:	f000 fed5 	bl	80042a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f80e 	bl	8003520 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003504:	4b05      	ldr	r3, [pc, #20]	; (800351c <prvCheckTasksWaitingTermination+0x54>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1e1      	bne.n	80034d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800350c:	bf00      	nop
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	20000b9c 	.word	0x20000b9c
 8003518:	20000bc8 	.word	0x20000bc8
 800351c:	20000bb0 	.word	0x20000bb0

08003520 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800352e:	2b00      	cmp	r3, #0
 8003530:	d108      	bne.n	8003544 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	4618      	mov	r0, r3
 8003538:	f001 f864 	bl	8004604 <vPortFree>
				vPortFree( pxTCB );
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f001 f861 	bl	8004604 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003542:	e017      	b.n	8003574 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800354a:	2b01      	cmp	r3, #1
 800354c:	d103      	bne.n	8003556 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f001 f858 	bl	8004604 <vPortFree>
	}
 8003554:	e00e      	b.n	8003574 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800355c:	2b02      	cmp	r3, #2
 800355e:	d009      	beq.n	8003574 <prvDeleteTCB+0x54>
 8003560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003564:	f383 8811 	msr	BASEPRI, r3
 8003568:	f3bf 8f6f 	isb	sy
 800356c:	f3bf 8f4f 	dsb	sy
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	e7fe      	b.n	8003572 <prvDeleteTCB+0x52>
	}
 8003574:	bf00      	nop
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003582:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <prvResetNextTaskUnblockTime+0x38>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d104      	bne.n	8003596 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800358c:	4b0a      	ldr	r3, [pc, #40]	; (80035b8 <prvResetNextTaskUnblockTime+0x3c>)
 800358e:	f04f 32ff 	mov.w	r2, #4294967295
 8003592:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003594:	e008      	b.n	80035a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003596:	4b07      	ldr	r3, [pc, #28]	; (80035b4 <prvResetNextTaskUnblockTime+0x38>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	4a04      	ldr	r2, [pc, #16]	; (80035b8 <prvResetNextTaskUnblockTime+0x3c>)
 80035a6:	6013      	str	r3, [r2, #0]
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	20000b80 	.word	0x20000b80
 80035b8:	20000be8 	.word	0x20000be8

080035bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80035c2:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <xTaskGetSchedulerState+0x34>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d102      	bne.n	80035d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80035ca:	2301      	movs	r3, #1
 80035cc:	607b      	str	r3, [r7, #4]
 80035ce:	e008      	b.n	80035e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035d0:	4b08      	ldr	r3, [pc, #32]	; (80035f4 <xTaskGetSchedulerState+0x38>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d102      	bne.n	80035de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80035d8:	2302      	movs	r3, #2
 80035da:	607b      	str	r3, [r7, #4]
 80035dc:	e001      	b.n	80035e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80035de:	2300      	movs	r3, #0
 80035e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80035e2:	687b      	ldr	r3, [r7, #4]
	}
 80035e4:	4618      	mov	r0, r3
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	20000bd4 	.word	0x20000bd4
 80035f4:	20000bf0 	.word	0x20000bf0

080035f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003604:	2300      	movs	r3, #0
 8003606:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d051      	beq.n	80036b2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003612:	4b2a      	ldr	r3, [pc, #168]	; (80036bc <xTaskPriorityInherit+0xc4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003618:	429a      	cmp	r2, r3
 800361a:	d241      	bcs.n	80036a0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	2b00      	cmp	r3, #0
 8003622:	db06      	blt.n	8003632 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003624:	4b25      	ldr	r3, [pc, #148]	; (80036bc <xTaskPriorityInherit+0xc4>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	6959      	ldr	r1, [r3, #20]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800363a:	4613      	mov	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4a1f      	ldr	r2, [pc, #124]	; (80036c0 <xTaskPriorityInherit+0xc8>)
 8003644:	4413      	add	r3, r2
 8003646:	4299      	cmp	r1, r3
 8003648:	d122      	bne.n	8003690 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	3304      	adds	r3, #4
 800364e:	4618      	mov	r0, r3
 8003650:	f7fe fafa 	bl	8001c48 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003654:	4b19      	ldr	r3, [pc, #100]	; (80036bc <xTaskPriorityInherit+0xc4>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003662:	4b18      	ldr	r3, [pc, #96]	; (80036c4 <xTaskPriorityInherit+0xcc>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	429a      	cmp	r2, r3
 8003668:	d903      	bls.n	8003672 <xTaskPriorityInherit+0x7a>
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366e:	4a15      	ldr	r2, [pc, #84]	; (80036c4 <xTaskPriorityInherit+0xcc>)
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003676:	4613      	mov	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4a10      	ldr	r2, [pc, #64]	; (80036c0 <xTaskPriorityInherit+0xc8>)
 8003680:	441a      	add	r2, r3
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	3304      	adds	r3, #4
 8003686:	4619      	mov	r1, r3
 8003688:	4610      	mov	r0, r2
 800368a:	f7fe fa80 	bl	8001b8e <vListInsertEnd>
 800368e:	e004      	b.n	800369a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003690:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <xTaskPriorityInherit+0xc4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800369a:	2301      	movs	r3, #1
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	e008      	b.n	80036b2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036a4:	4b05      	ldr	r3, [pc, #20]	; (80036bc <xTaskPriorityInherit+0xc4>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d201      	bcs.n	80036b2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80036ae:	2301      	movs	r3, #1
 80036b0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80036b2:	68fb      	ldr	r3, [r7, #12]
	}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	200006f4 	.word	0x200006f4
 80036c0:	200006f8 	.word	0x200006f8
 80036c4:	20000bd0 	.word	0x20000bd0

080036c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d054      	beq.n	8003788 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80036de:	4b2d      	ldr	r3, [pc, #180]	; (8003794 <xTaskPriorityDisinherit+0xcc>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d009      	beq.n	80036fc <xTaskPriorityDisinherit+0x34>
 80036e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ec:	f383 8811 	msr	BASEPRI, r3
 80036f0:	f3bf 8f6f 	isb	sy
 80036f4:	f3bf 8f4f 	dsb	sy
 80036f8:	60fb      	str	r3, [r7, #12]
 80036fa:	e7fe      	b.n	80036fa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003700:	2b00      	cmp	r3, #0
 8003702:	d109      	bne.n	8003718 <xTaskPriorityDisinherit+0x50>
 8003704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003708:	f383 8811 	msr	BASEPRI, r3
 800370c:	f3bf 8f6f 	isb	sy
 8003710:	f3bf 8f4f 	dsb	sy
 8003714:	60bb      	str	r3, [r7, #8]
 8003716:	e7fe      	b.n	8003716 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800371c:	1e5a      	subs	r2, r3, #1
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800372a:	429a      	cmp	r2, r3
 800372c:	d02c      	beq.n	8003788 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003732:	2b00      	cmp	r3, #0
 8003734:	d128      	bne.n	8003788 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	3304      	adds	r3, #4
 800373a:	4618      	mov	r0, r3
 800373c:	f7fe fa84 	bl	8001c48 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003758:	4b0f      	ldr	r3, [pc, #60]	; (8003798 <xTaskPriorityDisinherit+0xd0>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	429a      	cmp	r2, r3
 800375e:	d903      	bls.n	8003768 <xTaskPriorityDisinherit+0xa0>
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	4a0c      	ldr	r2, [pc, #48]	; (8003798 <xTaskPriorityDisinherit+0xd0>)
 8003766:	6013      	str	r3, [r2, #0]
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4a09      	ldr	r2, [pc, #36]	; (800379c <xTaskPriorityDisinherit+0xd4>)
 8003776:	441a      	add	r2, r3
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	3304      	adds	r3, #4
 800377c:	4619      	mov	r1, r3
 800377e:	4610      	mov	r0, r2
 8003780:	f7fe fa05 	bl	8001b8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003784:	2301      	movs	r3, #1
 8003786:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003788:	697b      	ldr	r3, [r7, #20]
	}
 800378a:	4618      	mov	r0, r3
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	200006f4 	.word	0x200006f4
 8003798:	20000bd0 	.word	0x20000bd0
 800379c:	200006f8 	.word	0x200006f8

080037a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b088      	sub	sp, #32
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80037ae:	2301      	movs	r3, #1
 80037b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d068      	beq.n	800388a <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d109      	bne.n	80037d4 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80037c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c4:	f383 8811 	msr	BASEPRI, r3
 80037c8:	f3bf 8f6f 	isb	sy
 80037cc:	f3bf 8f4f 	dsb	sy
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	e7fe      	b.n	80037d2 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d902      	bls.n	80037e4 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	61fb      	str	r3, [r7, #28]
 80037e2:	e002      	b.n	80037ea <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ee:	69fa      	ldr	r2, [r7, #28]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d04a      	beq.n	800388a <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d145      	bne.n	800388a <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80037fe:	4b25      	ldr	r3, [pc, #148]	; (8003894 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	429a      	cmp	r2, r3
 8003806:	d109      	bne.n	800381c <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8003808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	e7fe      	b.n	800381a <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003820:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	69fa      	ldr	r2, [r7, #28]
 8003826:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	2b00      	cmp	r3, #0
 800382e:	db04      	blt.n	800383a <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	6959      	ldr	r1, [r3, #20]
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4a13      	ldr	r2, [pc, #76]	; (8003898 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800384a:	4413      	add	r3, r2
 800384c:	4299      	cmp	r1, r3
 800384e:	d11c      	bne.n	800388a <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	3304      	adds	r3, #4
 8003854:	4618      	mov	r0, r3
 8003856:	f7fe f9f7 	bl	8001c48 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800385e:	4b0f      	ldr	r3, [pc, #60]	; (800389c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d903      	bls.n	800386e <vTaskPriorityDisinheritAfterTimeout+0xce>
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386a:	4a0c      	ldr	r2, [pc, #48]	; (800389c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003872:	4613      	mov	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4a07      	ldr	r2, [pc, #28]	; (8003898 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800387c:	441a      	add	r2, r3
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	3304      	adds	r3, #4
 8003882:	4619      	mov	r1, r3
 8003884:	4610      	mov	r0, r2
 8003886:	f7fe f982 	bl	8001b8e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800388a:	bf00      	nop
 800388c:	3720      	adds	r7, #32
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	200006f4 	.word	0x200006f4
 8003898:	200006f8 	.word	0x200006f8
 800389c:	20000bd0 	.word	0x20000bd0

080038a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80038a4:	4b07      	ldr	r3, [pc, #28]	; (80038c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d004      	beq.n	80038b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80038ac:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038b2:	3201      	adds	r2, #1
 80038b4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80038b6:	4b03      	ldr	r3, [pc, #12]	; (80038c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80038b8:	681b      	ldr	r3, [r3, #0]
	}
 80038ba:	4618      	mov	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	200006f4 	.word	0x200006f4

080038c8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80038d2:	4b21      	ldr	r3, [pc, #132]	; (8003958 <prvAddCurrentTaskToDelayedList+0x90>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038d8:	4b20      	ldr	r3, [pc, #128]	; (800395c <prvAddCurrentTaskToDelayedList+0x94>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	3304      	adds	r3, #4
 80038de:	4618      	mov	r0, r3
 80038e0:	f7fe f9b2 	bl	8001c48 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ea:	d10a      	bne.n	8003902 <prvAddCurrentTaskToDelayedList+0x3a>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d007      	beq.n	8003902 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038f2:	4b1a      	ldr	r3, [pc, #104]	; (800395c <prvAddCurrentTaskToDelayedList+0x94>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3304      	adds	r3, #4
 80038f8:	4619      	mov	r1, r3
 80038fa:	4819      	ldr	r0, [pc, #100]	; (8003960 <prvAddCurrentTaskToDelayedList+0x98>)
 80038fc:	f7fe f947 	bl	8001b8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003900:	e026      	b.n	8003950 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4413      	add	r3, r2
 8003908:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800390a:	4b14      	ldr	r3, [pc, #80]	; (800395c <prvAddCurrentTaskToDelayedList+0x94>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	429a      	cmp	r2, r3
 8003918:	d209      	bcs.n	800392e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800391a:	4b12      	ldr	r3, [pc, #72]	; (8003964 <prvAddCurrentTaskToDelayedList+0x9c>)
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	4b0f      	ldr	r3, [pc, #60]	; (800395c <prvAddCurrentTaskToDelayedList+0x94>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	3304      	adds	r3, #4
 8003924:	4619      	mov	r1, r3
 8003926:	4610      	mov	r0, r2
 8003928:	f7fe f955 	bl	8001bd6 <vListInsert>
}
 800392c:	e010      	b.n	8003950 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800392e:	4b0e      	ldr	r3, [pc, #56]	; (8003968 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	4b0a      	ldr	r3, [pc, #40]	; (800395c <prvAddCurrentTaskToDelayedList+0x94>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	3304      	adds	r3, #4
 8003938:	4619      	mov	r1, r3
 800393a:	4610      	mov	r0, r2
 800393c:	f7fe f94b 	bl	8001bd6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003940:	4b0a      	ldr	r3, [pc, #40]	; (800396c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	429a      	cmp	r2, r3
 8003948:	d202      	bcs.n	8003950 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800394a:	4a08      	ldr	r2, [pc, #32]	; (800396c <prvAddCurrentTaskToDelayedList+0xa4>)
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	6013      	str	r3, [r2, #0]
}
 8003950:	bf00      	nop
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	20000bcc 	.word	0x20000bcc
 800395c:	200006f4 	.word	0x200006f4
 8003960:	20000bb4 	.word	0x20000bb4
 8003964:	20000b84 	.word	0x20000b84
 8003968:	20000b80 	.word	0x20000b80
 800396c:	20000be8 	.word	0x20000be8

08003970 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b08a      	sub	sp, #40	; 0x28
 8003974:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003976:	2300      	movs	r3, #0
 8003978:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800397a:	f000 faff 	bl	8003f7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800397e:	4b1c      	ldr	r3, [pc, #112]	; (80039f0 <xTimerCreateTimerTask+0x80>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d021      	beq.n	80039ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800398a:	2300      	movs	r3, #0
 800398c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800398e:	1d3a      	adds	r2, r7, #4
 8003990:	f107 0108 	add.w	r1, r7, #8
 8003994:	f107 030c 	add.w	r3, r7, #12
 8003998:	4618      	mov	r0, r3
 800399a:	f7fe f8b1 	bl	8001b00 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	9202      	str	r2, [sp, #8]
 80039a6:	9301      	str	r3, [sp, #4]
 80039a8:	2302      	movs	r3, #2
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	2300      	movs	r3, #0
 80039ae:	460a      	mov	r2, r1
 80039b0:	4910      	ldr	r1, [pc, #64]	; (80039f4 <xTimerCreateTimerTask+0x84>)
 80039b2:	4811      	ldr	r0, [pc, #68]	; (80039f8 <xTimerCreateTimerTask+0x88>)
 80039b4:	f7fe fffa 	bl	80029ac <xTaskCreateStatic>
 80039b8:	4602      	mov	r2, r0
 80039ba:	4b10      	ldr	r3, [pc, #64]	; (80039fc <xTimerCreateTimerTask+0x8c>)
 80039bc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80039be:	4b0f      	ldr	r3, [pc, #60]	; (80039fc <xTimerCreateTimerTask+0x8c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80039c6:	2301      	movs	r3, #1
 80039c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d109      	bne.n	80039e4 <xTimerCreateTimerTask+0x74>
 80039d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d4:	f383 8811 	msr	BASEPRI, r3
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	613b      	str	r3, [r7, #16]
 80039e2:	e7fe      	b.n	80039e2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80039e4:	697b      	ldr	r3, [r7, #20]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20000c24 	.word	0x20000c24
 80039f4:	080048e0 	.word	0x080048e0
 80039f8:	08003b31 	.word	0x08003b31
 80039fc:	20000c28 	.word	0x20000c28

08003a00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b08a      	sub	sp, #40	; 0x28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d109      	bne.n	8003a2c <xTimerGenericCommand+0x2c>
 8003a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1c:	f383 8811 	msr	BASEPRI, r3
 8003a20:	f3bf 8f6f 	isb	sy
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	623b      	str	r3, [r7, #32]
 8003a2a:	e7fe      	b.n	8003a2a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003a2c:	4b19      	ldr	r3, [pc, #100]	; (8003a94 <xTimerGenericCommand+0x94>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d02a      	beq.n	8003a8a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b05      	cmp	r3, #5
 8003a44:	dc18      	bgt.n	8003a78 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a46:	f7ff fdb9 	bl	80035bc <xTaskGetSchedulerState>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d109      	bne.n	8003a64 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a50:	4b10      	ldr	r3, [pc, #64]	; (8003a94 <xTimerGenericCommand+0x94>)
 8003a52:	6818      	ldr	r0, [r3, #0]
 8003a54:	f107 0110 	add.w	r1, r7, #16
 8003a58:	2300      	movs	r3, #0
 8003a5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a5c:	f7fe fa8e 	bl	8001f7c <xQueueGenericSend>
 8003a60:	6278      	str	r0, [r7, #36]	; 0x24
 8003a62:	e012      	b.n	8003a8a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003a64:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <xTimerGenericCommand+0x94>)
 8003a66:	6818      	ldr	r0, [r3, #0]
 8003a68:	f107 0110 	add.w	r1, r7, #16
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f7fe fa84 	bl	8001f7c <xQueueGenericSend>
 8003a74:	6278      	str	r0, [r7, #36]	; 0x24
 8003a76:	e008      	b.n	8003a8a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003a78:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <xTimerGenericCommand+0x94>)
 8003a7a:	6818      	ldr	r0, [r3, #0]
 8003a7c:	f107 0110 	add.w	r1, r7, #16
 8003a80:	2300      	movs	r3, #0
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	f7fe fb74 	bl	8002170 <xQueueGenericSendFromISR>
 8003a88:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3728      	adds	r7, #40	; 0x28
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	20000c24 	.word	0x20000c24

08003a98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aa2:	4b22      	ldr	r3, [pc, #136]	; (8003b2c <prvProcessExpiredTimer+0x94>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	3304      	adds	r3, #4
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fe f8c9 	bl	8001c48 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d021      	beq.n	8003b08 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	699a      	ldr	r2, [r3, #24]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	18d1      	adds	r1, r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	6978      	ldr	r0, [r7, #20]
 8003ad2:	f000 f8d1 	bl	8003c78 <prvInsertTimerInActiveList>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d01e      	beq.n	8003b1a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003adc:	2300      	movs	r3, #0
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	6978      	ldr	r0, [r7, #20]
 8003ae8:	f7ff ff8a 	bl	8003a00 <xTimerGenericCommand>
 8003aec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d112      	bne.n	8003b1a <prvProcessExpiredTimer+0x82>
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	e7fe      	b.n	8003b06 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b0e:	f023 0301 	bic.w	r3, r3, #1
 8003b12:	b2da      	uxtb	r2, r3
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	6978      	ldr	r0, [r7, #20]
 8003b20:	4798      	blx	r3
}
 8003b22:	bf00      	nop
 8003b24:	3718      	adds	r7, #24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	20000c1c 	.word	0x20000c1c

08003b30 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b38:	f107 0308 	add.w	r3, r7, #8
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 f857 	bl	8003bf0 <prvGetNextExpireTime>
 8003b42:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	4619      	mov	r1, r3
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 f803 	bl	8003b54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003b4e:	f000 f8d5 	bl	8003cfc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b52:	e7f1      	b.n	8003b38 <prvTimerTask+0x8>

08003b54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003b5e:	f7ff f95b 	bl	8002e18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b62:	f107 0308 	add.w	r3, r7, #8
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 f866 	bl	8003c38 <prvSampleTimeNow>
 8003b6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d130      	bne.n	8003bd6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10a      	bne.n	8003b90 <prvProcessTimerOrBlockTask+0x3c>
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d806      	bhi.n	8003b90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003b82:	f7ff f957 	bl	8002e34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003b86:	68f9      	ldr	r1, [r7, #12]
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7ff ff85 	bl	8003a98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003b8e:	e024      	b.n	8003bda <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d008      	beq.n	8003ba8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b96:	4b13      	ldr	r3, [pc, #76]	; (8003be4 <prvProcessTimerOrBlockTask+0x90>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <prvProcessTimerOrBlockTask+0x50>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e000      	b.n	8003ba6 <prvProcessTimerOrBlockTask+0x52>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003ba8:	4b0f      	ldr	r3, [pc, #60]	; (8003be8 <prvProcessTimerOrBlockTask+0x94>)
 8003baa:	6818      	ldr	r0, [r3, #0]
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	f7fe fec5 	bl	8002944 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003bba:	f7ff f93b 	bl	8002e34 <xTaskResumeAll>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10a      	bne.n	8003bda <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003bc4:	4b09      	ldr	r3, [pc, #36]	; (8003bec <prvProcessTimerOrBlockTask+0x98>)
 8003bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	f3bf 8f6f 	isb	sy
}
 8003bd4:	e001      	b.n	8003bda <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003bd6:	f7ff f92d 	bl	8002e34 <xTaskResumeAll>
}
 8003bda:	bf00      	nop
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20000c20 	.word	0x20000c20
 8003be8:	20000c24 	.word	0x20000c24
 8003bec:	e000ed04 	.word	0xe000ed04

08003bf0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003bf8:	4b0e      	ldr	r3, [pc, #56]	; (8003c34 <prvGetNextExpireTime+0x44>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <prvGetNextExpireTime+0x16>
 8003c02:	2201      	movs	r2, #1
 8003c04:	e000      	b.n	8003c08 <prvGetNextExpireTime+0x18>
 8003c06:	2200      	movs	r2, #0
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d105      	bne.n	8003c20 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c14:	4b07      	ldr	r3, [pc, #28]	; (8003c34 <prvGetNextExpireTime+0x44>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	e001      	b.n	8003c24 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003c24:	68fb      	ldr	r3, [r7, #12]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	20000c1c 	.word	0x20000c1c

08003c38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003c40:	f7ff f994 	bl	8002f6c <xTaskGetTickCount>
 8003c44:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003c46:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <prvSampleTimeNow+0x3c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d205      	bcs.n	8003c5c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003c50:	f000 f930 	bl	8003eb4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	e002      	b.n	8003c62 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003c62:	4a04      	ldr	r2, [pc, #16]	; (8003c74 <prvSampleTimeNow+0x3c>)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003c68:	68fb      	ldr	r3, [r7, #12]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	20000c2c 	.word	0x20000c2c

08003c78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003c86:	2300      	movs	r3, #0
 8003c88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d812      	bhi.n	8003cc4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	1ad2      	subs	r2, r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d302      	bcc.n	8003cb2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003cac:	2301      	movs	r3, #1
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	e01b      	b.n	8003cea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003cb2:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <prvInsertTimerInActiveList+0x7c>)
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	f7fd ff8a 	bl	8001bd6 <vListInsert>
 8003cc2:	e012      	b.n	8003cea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d206      	bcs.n	8003cda <prvInsertTimerInActiveList+0x62>
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d302      	bcc.n	8003cda <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	617b      	str	r3, [r7, #20]
 8003cd8:	e007      	b.n	8003cea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003cda:	4b07      	ldr	r3, [pc, #28]	; (8003cf8 <prvInsertTimerInActiveList+0x80>)
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	f7fd ff76 	bl	8001bd6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003cea:	697b      	ldr	r3, [r7, #20]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3718      	adds	r7, #24
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	20000c20 	.word	0x20000c20
 8003cf8:	20000c1c 	.word	0x20000c1c

08003cfc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b08e      	sub	sp, #56	; 0x38
 8003d00:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d02:	e0c6      	b.n	8003e92 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	da17      	bge.n	8003d3a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003d0a:	1d3b      	adds	r3, r7, #4
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d109      	bne.n	8003d2a <prvProcessReceivedCommands+0x2e>
 8003d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1a:	f383 8811 	msr	BASEPRI, r3
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	61fb      	str	r3, [r7, #28]
 8003d28:	e7fe      	b.n	8003d28 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d30:	6850      	ldr	r0, [r2, #4]
 8003d32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d34:	6892      	ldr	r2, [r2, #8]
 8003d36:	4611      	mov	r1, r2
 8003d38:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f2c0 80a7 	blt.w	8003e90 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d004      	beq.n	8003d58 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d50:	3304      	adds	r3, #4
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fd ff78 	bl	8001c48 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d58:	463b      	mov	r3, r7
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7ff ff6c 	bl	8003c38 <prvSampleTimeNow>
 8003d60:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b09      	cmp	r3, #9
 8003d66:	f200 8094 	bhi.w	8003e92 <prvProcessReceivedCommands+0x196>
 8003d6a:	a201      	add	r2, pc, #4	; (adr r2, 8003d70 <prvProcessReceivedCommands+0x74>)
 8003d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d70:	08003d99 	.word	0x08003d99
 8003d74:	08003d99 	.word	0x08003d99
 8003d78:	08003d99 	.word	0x08003d99
 8003d7c:	08003e0b 	.word	0x08003e0b
 8003d80:	08003e1f 	.word	0x08003e1f
 8003d84:	08003e67 	.word	0x08003e67
 8003d88:	08003d99 	.word	0x08003d99
 8003d8c:	08003d99 	.word	0x08003d99
 8003d90:	08003e0b 	.word	0x08003e0b
 8003d94:	08003e1f 	.word	0x08003e1f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d9e:	f043 0301 	orr.w	r3, r3, #1
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	18d1      	adds	r1, r2, r3
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003db8:	f7ff ff5e 	bl	8003c78 <prvInsertTimerInActiveList>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d067      	beq.n	8003e92 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dc8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d05c      	beq.n	8003e92 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	441a      	add	r2, r3
 8003de0:	2300      	movs	r3, #0
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	2300      	movs	r3, #0
 8003de6:	2100      	movs	r1, #0
 8003de8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dea:	f7ff fe09 	bl	8003a00 <xTimerGenericCommand>
 8003dee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d14d      	bne.n	8003e92 <prvProcessReceivedCommands+0x196>
 8003df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfa:	f383 8811 	msr	BASEPRI, r3
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	61bb      	str	r3, [r7, #24]
 8003e08:	e7fe      	b.n	8003e08 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e10:	f023 0301 	bic.w	r3, r3, #1
 8003e14:	b2da      	uxtb	r2, r3
 8003e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003e1c:	e039      	b.n	8003e92 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e24:	f043 0301 	orr.w	r3, r3, #1
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e34:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d109      	bne.n	8003e52 <prvProcessReceivedCommands+0x156>
 8003e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e42:	f383 8811 	msr	BASEPRI, r3
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	e7fe      	b.n	8003e50 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e54:	699a      	ldr	r2, [r3, #24]
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	18d1      	adds	r1, r2, r3
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e60:	f7ff ff0a 	bl	8003c78 <prvInsertTimerInActiveList>
					break;
 8003e64:	e015      	b.n	8003e92 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d103      	bne.n	8003e7c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8003e74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e76:	f000 fbc5 	bl	8004604 <vPortFree>
 8003e7a:	e00a      	b.n	8003e92 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e82:	f023 0301 	bic.w	r3, r3, #1
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003e8e:	e000      	b.n	8003e92 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003e90:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e92:	4b07      	ldr	r3, [pc, #28]	; (8003eb0 <prvProcessReceivedCommands+0x1b4>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	1d39      	adds	r1, r7, #4
 8003e98:	2200      	movs	r2, #0
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fe f9fc 	bl	8002298 <xQueueReceive>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f47f af2e 	bne.w	8003d04 <prvProcessReceivedCommands+0x8>
	}
}
 8003ea8:	bf00      	nop
 8003eaa:	3730      	adds	r7, #48	; 0x30
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	20000c24 	.word	0x20000c24

08003eb4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b088      	sub	sp, #32
 8003eb8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003eba:	e047      	b.n	8003f4c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ebc:	4b2d      	ldr	r3, [pc, #180]	; (8003f74 <prvSwitchTimerLists+0xc0>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ec6:	4b2b      	ldr	r3, [pc, #172]	; (8003f74 <prvSwitchTimerLists+0xc0>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fd feb7 	bl	8001c48 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d02d      	beq.n	8003f4c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d90e      	bls.n	8003f20 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f0e:	4b19      	ldr	r3, [pc, #100]	; (8003f74 <prvSwitchTimerLists+0xc0>)
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	3304      	adds	r3, #4
 8003f16:	4619      	mov	r1, r3
 8003f18:	4610      	mov	r0, r2
 8003f1a:	f7fd fe5c 	bl	8001bd6 <vListInsert>
 8003f1e:	e015      	b.n	8003f4c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f20:	2300      	movs	r3, #0
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	2300      	movs	r3, #0
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	2100      	movs	r1, #0
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f7ff fd68 	bl	8003a00 <xTimerGenericCommand>
 8003f30:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d109      	bne.n	8003f4c <prvSwitchTimerLists+0x98>
 8003f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	603b      	str	r3, [r7, #0]
 8003f4a:	e7fe      	b.n	8003f4a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f4c:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <prvSwitchTimerLists+0xc0>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1b2      	bne.n	8003ebc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003f56:	4b07      	ldr	r3, [pc, #28]	; (8003f74 <prvSwitchTimerLists+0xc0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003f5c:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <prvSwitchTimerLists+0xc4>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a04      	ldr	r2, [pc, #16]	; (8003f74 <prvSwitchTimerLists+0xc0>)
 8003f62:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003f64:	4a04      	ldr	r2, [pc, #16]	; (8003f78 <prvSwitchTimerLists+0xc4>)
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	6013      	str	r3, [r2, #0]
}
 8003f6a:	bf00      	nop
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000c1c 	.word	0x20000c1c
 8003f78:	20000c20 	.word	0x20000c20

08003f7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003f82:	f000 f963 	bl	800424c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003f86:	4b15      	ldr	r3, [pc, #84]	; (8003fdc <prvCheckForValidListAndQueue+0x60>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d120      	bne.n	8003fd0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003f8e:	4814      	ldr	r0, [pc, #80]	; (8003fe0 <prvCheckForValidListAndQueue+0x64>)
 8003f90:	f7fd fdd0 	bl	8001b34 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003f94:	4813      	ldr	r0, [pc, #76]	; (8003fe4 <prvCheckForValidListAndQueue+0x68>)
 8003f96:	f7fd fdcd 	bl	8001b34 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003f9a:	4b13      	ldr	r3, [pc, #76]	; (8003fe8 <prvCheckForValidListAndQueue+0x6c>)
 8003f9c:	4a10      	ldr	r2, [pc, #64]	; (8003fe0 <prvCheckForValidListAndQueue+0x64>)
 8003f9e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003fa0:	4b12      	ldr	r3, [pc, #72]	; (8003fec <prvCheckForValidListAndQueue+0x70>)
 8003fa2:	4a10      	ldr	r2, [pc, #64]	; (8003fe4 <prvCheckForValidListAndQueue+0x68>)
 8003fa4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	4b11      	ldr	r3, [pc, #68]	; (8003ff0 <prvCheckForValidListAndQueue+0x74>)
 8003fac:	4a11      	ldr	r2, [pc, #68]	; (8003ff4 <prvCheckForValidListAndQueue+0x78>)
 8003fae:	2110      	movs	r1, #16
 8003fb0:	200a      	movs	r0, #10
 8003fb2:	f7fd fedb 	bl	8001d6c <xQueueGenericCreateStatic>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	4b08      	ldr	r3, [pc, #32]	; (8003fdc <prvCheckForValidListAndQueue+0x60>)
 8003fba:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003fbc:	4b07      	ldr	r3, [pc, #28]	; (8003fdc <prvCheckForValidListAndQueue+0x60>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003fc4:	4b05      	ldr	r3, [pc, #20]	; (8003fdc <prvCheckForValidListAndQueue+0x60>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	490b      	ldr	r1, [pc, #44]	; (8003ff8 <prvCheckForValidListAndQueue+0x7c>)
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fe fc92 	bl	80028f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fd0:	f000 f96a 	bl	80042a8 <vPortExitCritical>
}
 8003fd4:	bf00      	nop
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	20000c24 	.word	0x20000c24
 8003fe0:	20000bf4 	.word	0x20000bf4
 8003fe4:	20000c08 	.word	0x20000c08
 8003fe8:	20000c1c 	.word	0x20000c1c
 8003fec:	20000c20 	.word	0x20000c20
 8003ff0:	20000cd0 	.word	0x20000cd0
 8003ff4:	20000c30 	.word	0x20000c30
 8003ff8:	080048e8 	.word	0x080048e8

08003ffc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	3b04      	subs	r3, #4
 800400c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004014:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	3b04      	subs	r3, #4
 800401a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f023 0201 	bic.w	r2, r3, #1
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	3b04      	subs	r3, #4
 800402a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800402c:	4a0c      	ldr	r2, [pc, #48]	; (8004060 <pxPortInitialiseStack+0x64>)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	3b14      	subs	r3, #20
 8004036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	3b04      	subs	r3, #4
 8004042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f06f 0202 	mvn.w	r2, #2
 800404a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	3b20      	subs	r3, #32
 8004050:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004052:	68fb      	ldr	r3, [r7, #12]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	08004065 	.word	0x08004065

08004064 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800406a:	2300      	movs	r3, #0
 800406c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800406e:	4b11      	ldr	r3, [pc, #68]	; (80040b4 <prvTaskExitError+0x50>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004076:	d009      	beq.n	800408c <prvTaskExitError+0x28>
 8004078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407c:	f383 8811 	msr	BASEPRI, r3
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	e7fe      	b.n	800408a <prvTaskExitError+0x26>
 800408c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004090:	f383 8811 	msr	BASEPRI, r3
 8004094:	f3bf 8f6f 	isb	sy
 8004098:	f3bf 8f4f 	dsb	sy
 800409c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800409e:	bf00      	nop
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0fc      	beq.n	80040a0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80040a6:	bf00      	nop
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	2000000c 	.word	0x2000000c
	...

080040c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80040c0:	4b07      	ldr	r3, [pc, #28]	; (80040e0 <pxCurrentTCBConst2>)
 80040c2:	6819      	ldr	r1, [r3, #0]
 80040c4:	6808      	ldr	r0, [r1, #0]
 80040c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ca:	f380 8809 	msr	PSP, r0
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f04f 0000 	mov.w	r0, #0
 80040d6:	f380 8811 	msr	BASEPRI, r0
 80040da:	4770      	bx	lr
 80040dc:	f3af 8000 	nop.w

080040e0 <pxCurrentTCBConst2>:
 80040e0:	200006f4 	.word	0x200006f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop

080040e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80040e8:	4808      	ldr	r0, [pc, #32]	; (800410c <prvPortStartFirstTask+0x24>)
 80040ea:	6800      	ldr	r0, [r0, #0]
 80040ec:	6800      	ldr	r0, [r0, #0]
 80040ee:	f380 8808 	msr	MSP, r0
 80040f2:	f04f 0000 	mov.w	r0, #0
 80040f6:	f380 8814 	msr	CONTROL, r0
 80040fa:	b662      	cpsie	i
 80040fc:	b661      	cpsie	f
 80040fe:	f3bf 8f4f 	dsb	sy
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	df00      	svc	0
 8004108:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800410a:	bf00      	nop
 800410c:	e000ed08 	.word	0xe000ed08

08004110 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004116:	4b44      	ldr	r3, [pc, #272]	; (8004228 <xPortStartScheduler+0x118>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a44      	ldr	r2, [pc, #272]	; (800422c <xPortStartScheduler+0x11c>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d109      	bne.n	8004134 <xPortStartScheduler+0x24>
 8004120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	613b      	str	r3, [r7, #16]
 8004132:	e7fe      	b.n	8004132 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004134:	4b3c      	ldr	r3, [pc, #240]	; (8004228 <xPortStartScheduler+0x118>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a3d      	ldr	r2, [pc, #244]	; (8004230 <xPortStartScheduler+0x120>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d109      	bne.n	8004152 <xPortStartScheduler+0x42>
 800413e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004142:	f383 8811 	msr	BASEPRI, r3
 8004146:	f3bf 8f6f 	isb	sy
 800414a:	f3bf 8f4f 	dsb	sy
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	e7fe      	b.n	8004150 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004152:	4b38      	ldr	r3, [pc, #224]	; (8004234 <xPortStartScheduler+0x124>)
 8004154:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	b2db      	uxtb	r3, r3
 800415c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	22ff      	movs	r2, #255	; 0xff
 8004162:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	b2db      	uxtb	r3, r3
 800416a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800416c:	78fb      	ldrb	r3, [r7, #3]
 800416e:	b2db      	uxtb	r3, r3
 8004170:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004174:	b2da      	uxtb	r2, r3
 8004176:	4b30      	ldr	r3, [pc, #192]	; (8004238 <xPortStartScheduler+0x128>)
 8004178:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800417a:	4b30      	ldr	r3, [pc, #192]	; (800423c <xPortStartScheduler+0x12c>)
 800417c:	2207      	movs	r2, #7
 800417e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004180:	e009      	b.n	8004196 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004182:	4b2e      	ldr	r3, [pc, #184]	; (800423c <xPortStartScheduler+0x12c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3b01      	subs	r3, #1
 8004188:	4a2c      	ldr	r2, [pc, #176]	; (800423c <xPortStartScheduler+0x12c>)
 800418a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800418c:	78fb      	ldrb	r3, [r7, #3]
 800418e:	b2db      	uxtb	r3, r3
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	b2db      	uxtb	r3, r3
 8004194:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004196:	78fb      	ldrb	r3, [r7, #3]
 8004198:	b2db      	uxtb	r3, r3
 800419a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419e:	2b80      	cmp	r3, #128	; 0x80
 80041a0:	d0ef      	beq.n	8004182 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041a2:	4b26      	ldr	r3, [pc, #152]	; (800423c <xPortStartScheduler+0x12c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f1c3 0307 	rsb	r3, r3, #7
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d009      	beq.n	80041c2 <xPortStartScheduler+0xb2>
 80041ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b2:	f383 8811 	msr	BASEPRI, r3
 80041b6:	f3bf 8f6f 	isb	sy
 80041ba:	f3bf 8f4f 	dsb	sy
 80041be:	60bb      	str	r3, [r7, #8]
 80041c0:	e7fe      	b.n	80041c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041c2:	4b1e      	ldr	r3, [pc, #120]	; (800423c <xPortStartScheduler+0x12c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	021b      	lsls	r3, r3, #8
 80041c8:	4a1c      	ldr	r2, [pc, #112]	; (800423c <xPortStartScheduler+0x12c>)
 80041ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041cc:	4b1b      	ldr	r3, [pc, #108]	; (800423c <xPortStartScheduler+0x12c>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041d4:	4a19      	ldr	r2, [pc, #100]	; (800423c <xPortStartScheduler+0x12c>)
 80041d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80041e0:	4b17      	ldr	r3, [pc, #92]	; (8004240 <xPortStartScheduler+0x130>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a16      	ldr	r2, [pc, #88]	; (8004240 <xPortStartScheduler+0x130>)
 80041e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80041ec:	4b14      	ldr	r3, [pc, #80]	; (8004240 <xPortStartScheduler+0x130>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a13      	ldr	r2, [pc, #76]	; (8004240 <xPortStartScheduler+0x130>)
 80041f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80041f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80041f8:	f000 f8d6 	bl	80043a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80041fc:	4b11      	ldr	r3, [pc, #68]	; (8004244 <xPortStartScheduler+0x134>)
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004202:	f000 f8f5 	bl	80043f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004206:	4b10      	ldr	r3, [pc, #64]	; (8004248 <xPortStartScheduler+0x138>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a0f      	ldr	r2, [pc, #60]	; (8004248 <xPortStartScheduler+0x138>)
 800420c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004210:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004212:	f7ff ff69 	bl	80040e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004216:	f7fe ff71 	bl	80030fc <vTaskSwitchContext>
	prvTaskExitError();
 800421a:	f7ff ff23 	bl	8004064 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	e000ed00 	.word	0xe000ed00
 800422c:	410fc271 	.word	0x410fc271
 8004230:	410fc270 	.word	0x410fc270
 8004234:	e000e400 	.word	0xe000e400
 8004238:	20000d20 	.word	0x20000d20
 800423c:	20000d24 	.word	0x20000d24
 8004240:	e000ed20 	.word	0xe000ed20
 8004244:	2000000c 	.word	0x2000000c
 8004248:	e000ef34 	.word	0xe000ef34

0800424c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004256:	f383 8811 	msr	BASEPRI, r3
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004264:	4b0e      	ldr	r3, [pc, #56]	; (80042a0 <vPortEnterCritical+0x54>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3301      	adds	r3, #1
 800426a:	4a0d      	ldr	r2, [pc, #52]	; (80042a0 <vPortEnterCritical+0x54>)
 800426c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800426e:	4b0c      	ldr	r3, [pc, #48]	; (80042a0 <vPortEnterCritical+0x54>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d10e      	bne.n	8004294 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004276:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <vPortEnterCritical+0x58>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d009      	beq.n	8004294 <vPortEnterCritical+0x48>
 8004280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	603b      	str	r3, [r7, #0]
 8004292:	e7fe      	b.n	8004292 <vPortEnterCritical+0x46>
	}
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	2000000c 	.word	0x2000000c
 80042a4:	e000ed04 	.word	0xe000ed04

080042a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80042ae:	4b11      	ldr	r3, [pc, #68]	; (80042f4 <vPortExitCritical+0x4c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d109      	bne.n	80042ca <vPortExitCritical+0x22>
 80042b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ba:	f383 8811 	msr	BASEPRI, r3
 80042be:	f3bf 8f6f 	isb	sy
 80042c2:	f3bf 8f4f 	dsb	sy
 80042c6:	607b      	str	r3, [r7, #4]
 80042c8:	e7fe      	b.n	80042c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80042ca:	4b0a      	ldr	r3, [pc, #40]	; (80042f4 <vPortExitCritical+0x4c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	4a08      	ldr	r2, [pc, #32]	; (80042f4 <vPortExitCritical+0x4c>)
 80042d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80042d4:	4b07      	ldr	r3, [pc, #28]	; (80042f4 <vPortExitCritical+0x4c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d104      	bne.n	80042e6 <vPortExitCritical+0x3e>
 80042dc:	2300      	movs	r3, #0
 80042de:	603b      	str	r3, [r7, #0]
	__asm volatile
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	2000000c 	.word	0x2000000c
	...

08004300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004300:	f3ef 8009 	mrs	r0, PSP
 8004304:	f3bf 8f6f 	isb	sy
 8004308:	4b15      	ldr	r3, [pc, #84]	; (8004360 <pxCurrentTCBConst>)
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	f01e 0f10 	tst.w	lr, #16
 8004310:	bf08      	it	eq
 8004312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800431a:	6010      	str	r0, [r2, #0]
 800431c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004320:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004324:	f380 8811 	msr	BASEPRI, r0
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f7fe fee4 	bl	80030fc <vTaskSwitchContext>
 8004334:	f04f 0000 	mov.w	r0, #0
 8004338:	f380 8811 	msr	BASEPRI, r0
 800433c:	bc09      	pop	{r0, r3}
 800433e:	6819      	ldr	r1, [r3, #0]
 8004340:	6808      	ldr	r0, [r1, #0]
 8004342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004346:	f01e 0f10 	tst.w	lr, #16
 800434a:	bf08      	it	eq
 800434c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004350:	f380 8809 	msr	PSP, r0
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	f3af 8000 	nop.w

08004360 <pxCurrentTCBConst>:
 8004360:	200006f4 	.word	0x200006f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004364:	bf00      	nop
 8004366:	bf00      	nop

08004368 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
	__asm volatile
 800436e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004372:	f383 8811 	msr	BASEPRI, r3
 8004376:	f3bf 8f6f 	isb	sy
 800437a:	f3bf 8f4f 	dsb	sy
 800437e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004380:	f7fe fe04 	bl	8002f8c <xTaskIncrementTick>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800438a:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <xPortSysTickHandler+0x3c>)
 800438c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	2300      	movs	r3, #0
 8004394:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800439c:	bf00      	nop
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	e000ed04 	.word	0xe000ed04

080043a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80043ac:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <vPortSetupTimerInterrupt+0x34>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80043b2:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <vPortSetupTimerInterrupt+0x38>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80043b8:	4b0a      	ldr	r3, [pc, #40]	; (80043e4 <vPortSetupTimerInterrupt+0x3c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a0a      	ldr	r2, [pc, #40]	; (80043e8 <vPortSetupTimerInterrupt+0x40>)
 80043be:	fba2 2303 	umull	r2, r3, r2, r3
 80043c2:	099b      	lsrs	r3, r3, #6
 80043c4:	4a09      	ldr	r2, [pc, #36]	; (80043ec <vPortSetupTimerInterrupt+0x44>)
 80043c6:	3b01      	subs	r3, #1
 80043c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80043ca:	4b04      	ldr	r3, [pc, #16]	; (80043dc <vPortSetupTimerInterrupt+0x34>)
 80043cc:	2207      	movs	r2, #7
 80043ce:	601a      	str	r2, [r3, #0]
}
 80043d0:	bf00      	nop
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	e000e010 	.word	0xe000e010
 80043e0:	e000e018 	.word	0xe000e018
 80043e4:	20000000 	.word	0x20000000
 80043e8:	10624dd3 	.word	0x10624dd3
 80043ec:	e000e014 	.word	0xe000e014

080043f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80043f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004400 <vPortEnableVFP+0x10>
 80043f4:	6801      	ldr	r1, [r0, #0]
 80043f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80043fa:	6001      	str	r1, [r0, #0]
 80043fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80043fe:	bf00      	nop
 8004400:	e000ed88 	.word	0xe000ed88

08004404 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800440a:	f3ef 8305 	mrs	r3, IPSR
 800440e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b0f      	cmp	r3, #15
 8004414:	d913      	bls.n	800443e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004416:	4a16      	ldr	r2, [pc, #88]	; (8004470 <vPortValidateInterruptPriority+0x6c>)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4413      	add	r3, r2
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004420:	4b14      	ldr	r3, [pc, #80]	; (8004474 <vPortValidateInterruptPriority+0x70>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	7afa      	ldrb	r2, [r7, #11]
 8004426:	429a      	cmp	r2, r3
 8004428:	d209      	bcs.n	800443e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800442a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	607b      	str	r3, [r7, #4]
 800443c:	e7fe      	b.n	800443c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800443e:	4b0e      	ldr	r3, [pc, #56]	; (8004478 <vPortValidateInterruptPriority+0x74>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004446:	4b0d      	ldr	r3, [pc, #52]	; (800447c <vPortValidateInterruptPriority+0x78>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d909      	bls.n	8004462 <vPortValidateInterruptPriority+0x5e>
 800444e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	603b      	str	r3, [r7, #0]
 8004460:	e7fe      	b.n	8004460 <vPortValidateInterruptPriority+0x5c>
	}
 8004462:	bf00      	nop
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	e000e3f0 	.word	0xe000e3f0
 8004474:	20000d20 	.word	0x20000d20
 8004478:	e000ed0c 	.word	0xe000ed0c
 800447c:	20000d24 	.word	0x20000d24

08004480 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b08a      	sub	sp, #40	; 0x28
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004488:	2300      	movs	r3, #0
 800448a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800448c:	f7fe fcc4 	bl	8002e18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004490:	4b57      	ldr	r3, [pc, #348]	; (80045f0 <pvPortMalloc+0x170>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004498:	f000 f90c 	bl	80046b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800449c:	4b55      	ldr	r3, [pc, #340]	; (80045f4 <pvPortMalloc+0x174>)
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4013      	ands	r3, r2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f040 808c 	bne.w	80045c2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d01c      	beq.n	80044ea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80044b0:	2208      	movs	r2, #8
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4413      	add	r3, r2
 80044b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f003 0307 	and.w	r3, r3, #7
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d013      	beq.n	80044ea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f023 0307 	bic.w	r3, r3, #7
 80044c8:	3308      	adds	r3, #8
 80044ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d009      	beq.n	80044ea <pvPortMalloc+0x6a>
 80044d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044da:	f383 8811 	msr	BASEPRI, r3
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	e7fe      	b.n	80044e8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d068      	beq.n	80045c2 <pvPortMalloc+0x142>
 80044f0:	4b41      	ldr	r3, [pc, #260]	; (80045f8 <pvPortMalloc+0x178>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d863      	bhi.n	80045c2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80044fa:	4b40      	ldr	r3, [pc, #256]	; (80045fc <pvPortMalloc+0x17c>)
 80044fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80044fe:	4b3f      	ldr	r3, [pc, #252]	; (80045fc <pvPortMalloc+0x17c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004504:	e004      	b.n	8004510 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	429a      	cmp	r2, r3
 8004518:	d903      	bls.n	8004522 <pvPortMalloc+0xa2>
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1f1      	bne.n	8004506 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004522:	4b33      	ldr	r3, [pc, #204]	; (80045f0 <pvPortMalloc+0x170>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004528:	429a      	cmp	r2, r3
 800452a:	d04a      	beq.n	80045c2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2208      	movs	r2, #8
 8004532:	4413      	add	r3, r2
 8004534:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	1ad2      	subs	r2, r2, r3
 8004546:	2308      	movs	r3, #8
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	429a      	cmp	r2, r3
 800454c:	d91e      	bls.n	800458c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800454e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4413      	add	r3, r2
 8004554:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	2b00      	cmp	r3, #0
 800455e:	d009      	beq.n	8004574 <pvPortMalloc+0xf4>
 8004560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	613b      	str	r3, [r7, #16]
 8004572:	e7fe      	b.n	8004572 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	1ad2      	subs	r2, r2, r3
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004586:	69b8      	ldr	r0, [r7, #24]
 8004588:	f000 f8f6 	bl	8004778 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800458c:	4b1a      	ldr	r3, [pc, #104]	; (80045f8 <pvPortMalloc+0x178>)
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	4a18      	ldr	r2, [pc, #96]	; (80045f8 <pvPortMalloc+0x178>)
 8004598:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800459a:	4b17      	ldr	r3, [pc, #92]	; (80045f8 <pvPortMalloc+0x178>)
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	4b18      	ldr	r3, [pc, #96]	; (8004600 <pvPortMalloc+0x180>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d203      	bcs.n	80045ae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045a6:	4b14      	ldr	r3, [pc, #80]	; (80045f8 <pvPortMalloc+0x178>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a15      	ldr	r2, [pc, #84]	; (8004600 <pvPortMalloc+0x180>)
 80045ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	4b10      	ldr	r3, [pc, #64]	; (80045f4 <pvPortMalloc+0x174>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	431a      	orrs	r2, r3
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	2200      	movs	r2, #0
 80045c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80045c2:	f7fe fc37 	bl	8002e34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d009      	beq.n	80045e4 <pvPortMalloc+0x164>
 80045d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d4:	f383 8811 	msr	BASEPRI, r3
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	e7fe      	b.n	80045e2 <pvPortMalloc+0x162>
	return pvReturn;
 80045e4:	69fb      	ldr	r3, [r7, #28]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3728      	adds	r7, #40	; 0x28
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	20004930 	.word	0x20004930
 80045f4:	2000493c 	.word	0x2000493c
 80045f8:	20004934 	.word	0x20004934
 80045fc:	20004928 	.word	0x20004928
 8004600:	20004938 	.word	0x20004938

08004604 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d046      	beq.n	80046a4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004616:	2308      	movs	r3, #8
 8004618:	425b      	negs	r3, r3
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	4413      	add	r3, r2
 800461e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	4b20      	ldr	r3, [pc, #128]	; (80046ac <vPortFree+0xa8>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4013      	ands	r3, r2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d109      	bne.n	8004646 <vPortFree+0x42>
 8004632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004636:	f383 8811 	msr	BASEPRI, r3
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	e7fe      	b.n	8004644 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d009      	beq.n	8004662 <vPortFree+0x5e>
 800464e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004652:	f383 8811 	msr	BASEPRI, r3
 8004656:	f3bf 8f6f 	isb	sy
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	60bb      	str	r3, [r7, #8]
 8004660:	e7fe      	b.n	8004660 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	4b11      	ldr	r3, [pc, #68]	; (80046ac <vPortFree+0xa8>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4013      	ands	r3, r2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d019      	beq.n	80046a4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d115      	bne.n	80046a4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	4b0b      	ldr	r3, [pc, #44]	; (80046ac <vPortFree+0xa8>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	43db      	mvns	r3, r3
 8004682:	401a      	ands	r2, r3
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004688:	f7fe fbc6 	bl	8002e18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	4b07      	ldr	r3, [pc, #28]	; (80046b0 <vPortFree+0xac>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4413      	add	r3, r2
 8004696:	4a06      	ldr	r2, [pc, #24]	; (80046b0 <vPortFree+0xac>)
 8004698:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800469a:	6938      	ldr	r0, [r7, #16]
 800469c:	f000 f86c 	bl	8004778 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80046a0:	f7fe fbc8 	bl	8002e34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80046a4:	bf00      	nop
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	2000493c 	.word	0x2000493c
 80046b0:	20004934 	.word	0x20004934

080046b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80046ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80046be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80046c0:	4b27      	ldr	r3, [pc, #156]	; (8004760 <prvHeapInit+0xac>)
 80046c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f003 0307 	and.w	r3, r3, #7
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00c      	beq.n	80046e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	3307      	adds	r3, #7
 80046d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f023 0307 	bic.w	r3, r3, #7
 80046da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	4a1f      	ldr	r2, [pc, #124]	; (8004760 <prvHeapInit+0xac>)
 80046e4:	4413      	add	r3, r2
 80046e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80046ec:	4a1d      	ldr	r2, [pc, #116]	; (8004764 <prvHeapInit+0xb0>)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80046f2:	4b1c      	ldr	r3, [pc, #112]	; (8004764 <prvHeapInit+0xb0>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	4413      	add	r3, r2
 80046fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004700:	2208      	movs	r2, #8
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	1a9b      	subs	r3, r3, r2
 8004706:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 0307 	bic.w	r3, r3, #7
 800470e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4a15      	ldr	r2, [pc, #84]	; (8004768 <prvHeapInit+0xb4>)
 8004714:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004716:	4b14      	ldr	r3, [pc, #80]	; (8004768 <prvHeapInit+0xb4>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2200      	movs	r2, #0
 800471c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800471e:	4b12      	ldr	r3, [pc, #72]	; (8004768 <prvHeapInit+0xb4>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	1ad2      	subs	r2, r2, r3
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004734:	4b0c      	ldr	r3, [pc, #48]	; (8004768 <prvHeapInit+0xb4>)
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	4a0a      	ldr	r2, [pc, #40]	; (800476c <prvHeapInit+0xb8>)
 8004742:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	4a09      	ldr	r2, [pc, #36]	; (8004770 <prvHeapInit+0xbc>)
 800474a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800474c:	4b09      	ldr	r3, [pc, #36]	; (8004774 <prvHeapInit+0xc0>)
 800474e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004752:	601a      	str	r2, [r3, #0]
}
 8004754:	bf00      	nop
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	20000d28 	.word	0x20000d28
 8004764:	20004928 	.word	0x20004928
 8004768:	20004930 	.word	0x20004930
 800476c:	20004938 	.word	0x20004938
 8004770:	20004934 	.word	0x20004934
 8004774:	2000493c 	.word	0x2000493c

08004778 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004780:	4b28      	ldr	r3, [pc, #160]	; (8004824 <prvInsertBlockIntoFreeList+0xac>)
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	e002      	b.n	800478c <prvInsertBlockIntoFreeList+0x14>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	429a      	cmp	r2, r3
 8004794:	d8f7      	bhi.n	8004786 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	4413      	add	r3, r2
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d108      	bne.n	80047ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	441a      	add	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	441a      	add	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d118      	bne.n	8004800 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	4b15      	ldr	r3, [pc, #84]	; (8004828 <prvInsertBlockIntoFreeList+0xb0>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d00d      	beq.n	80047f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	441a      	add	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	e008      	b.n	8004808 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80047f6:	4b0c      	ldr	r3, [pc, #48]	; (8004828 <prvInsertBlockIntoFreeList+0xb0>)
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	601a      	str	r2, [r3, #0]
 80047fe:	e003      	b.n	8004808 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	429a      	cmp	r2, r3
 800480e:	d002      	beq.n	8004816 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004816:	bf00      	nop
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	20004928 	.word	0x20004928
 8004828:	20004930 	.word	0x20004930

0800482c <__libc_init_array>:
 800482c:	b570      	push	{r4, r5, r6, lr}
 800482e:	4e0d      	ldr	r6, [pc, #52]	; (8004864 <__libc_init_array+0x38>)
 8004830:	4c0d      	ldr	r4, [pc, #52]	; (8004868 <__libc_init_array+0x3c>)
 8004832:	1ba4      	subs	r4, r4, r6
 8004834:	10a4      	asrs	r4, r4, #2
 8004836:	2500      	movs	r5, #0
 8004838:	42a5      	cmp	r5, r4
 800483a:	d109      	bne.n	8004850 <__libc_init_array+0x24>
 800483c:	4e0b      	ldr	r6, [pc, #44]	; (800486c <__libc_init_array+0x40>)
 800483e:	4c0c      	ldr	r4, [pc, #48]	; (8004870 <__libc_init_array+0x44>)
 8004840:	f000 f82c 	bl	800489c <_init>
 8004844:	1ba4      	subs	r4, r4, r6
 8004846:	10a4      	asrs	r4, r4, #2
 8004848:	2500      	movs	r5, #0
 800484a:	42a5      	cmp	r5, r4
 800484c:	d105      	bne.n	800485a <__libc_init_array+0x2e>
 800484e:	bd70      	pop	{r4, r5, r6, pc}
 8004850:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004854:	4798      	blx	r3
 8004856:	3501      	adds	r5, #1
 8004858:	e7ee      	b.n	8004838 <__libc_init_array+0xc>
 800485a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800485e:	4798      	blx	r3
 8004860:	3501      	adds	r5, #1
 8004862:	e7f2      	b.n	800484a <__libc_init_array+0x1e>
 8004864:	08004974 	.word	0x08004974
 8004868:	08004974 	.word	0x08004974
 800486c:	08004974 	.word	0x08004974
 8004870:	08004978 	.word	0x08004978

08004874 <memcpy>:
 8004874:	b510      	push	{r4, lr}
 8004876:	1e43      	subs	r3, r0, #1
 8004878:	440a      	add	r2, r1
 800487a:	4291      	cmp	r1, r2
 800487c:	d100      	bne.n	8004880 <memcpy+0xc>
 800487e:	bd10      	pop	{r4, pc}
 8004880:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004884:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004888:	e7f7      	b.n	800487a <memcpy+0x6>

0800488a <memset>:
 800488a:	4402      	add	r2, r0
 800488c:	4603      	mov	r3, r0
 800488e:	4293      	cmp	r3, r2
 8004890:	d100      	bne.n	8004894 <memset+0xa>
 8004892:	4770      	bx	lr
 8004894:	f803 1b01 	strb.w	r1, [r3], #1
 8004898:	e7f9      	b.n	800488e <memset+0x4>
	...

0800489c <_init>:
 800489c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489e:	bf00      	nop
 80048a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048a2:	bc08      	pop	{r3}
 80048a4:	469e      	mov	lr, r3
 80048a6:	4770      	bx	lr

080048a8 <_fini>:
 80048a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048aa:	bf00      	nop
 80048ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ae:	bc08      	pop	{r3}
 80048b0:	469e      	mov	lr, r3
 80048b2:	4770      	bx	lr
